module dsgenerated
exports
  context-free syntax
    Item*                             -> Start {cons("File")}
    "rules" Rule*                     -> Item  {cons("Rules")}
    "strict" ID {INT ","}+ "/" INT    -> Rule  {cons("Strict")}
    "seqstrict" ID {INT ","}+ "/" INT -> Rule  {cons("Seqstrict")}
    Formula                           -> Rule  {cons("Axiom")}
    {Formula ","}+ INFER Formula      -> Rule  {cons("Rule")}

  context-free syntax
    CONTENTCOMPLETE -> Start {cons("COMPLETION-Start")}
    CONTENTCOMPLETE -> Item  {cons("COMPLETION-Item")}
    CONTENTCOMPLETE -> Rule  {cons("COMPLETION-Rule")}

  context-free syntax
    Term "=" Term                     -> Formula   {cons("TermEq")}
    Reads Source Rel Target           -> Formula   {cons("Relation")}
    "value" "(" Term ")"              -> Formula   {cons("IsValue")}
                                      -> Reads     {cons("NoReads")}
    {LabelComp ","}+ "|-"             -> Reads     {cons("Reads")}
    Term                              -> Source    {cons("Source")}
    "(" Term "," {LabelComp ","}+ ")" -> Source    {cons("Source")}
    Term                              -> Target    {cons("Target")}
    "(" Term "," {LabelComp ","}+ ")" -> Target    {cons("Target")}
    "-->"                             -> Rel       {cons("Dynamic")}
    "--" {LabelComp ","}+ "-->"       -> Rel       {cons("DynamicEmitted")}
    ID Term                           -> LabelComp {cons("LabelComp")}

  context-free syntax
    CONTENTCOMPLETE -> Formula   {cons("COMPLETION-Formula")}
    CONTENTCOMPLETE -> Reads     {cons("COMPLETION-Reads")}
    CONTENTCOMPLETE -> Source    {cons("COMPLETION-Source")}
    CONTENTCOMPLETE -> Target    {cons("COMPLETION-Target")}
    CONTENTCOMPLETE -> Rel       {cons("COMPLETION-Rel")}
    CONTENTCOMPLETE -> LabelComp {cons("COMPLETION-LabelComp")}

  context-free syntax
    ID "(" {Term ","}* ")" -> Term  {cons("Con")}
    ID                     -> Term  {cons("Var")}
    "[" {Term ","}* "]"    -> Term  {cons("List")}
    "{" {Entry ","}* "}"   -> Term  {cons("Map")}
    STRING                 -> Term  {cons("String")}
    Term "|-->" Term       -> Entry {cons("Bind")}

  context-free syntax
    CONTENTCOMPLETE -> Term  {cons("COMPLETION-Term")}
    CONTENTCOMPLETE -> Entry {cons("COMPLETION-Entry")}