module DynSem

imports Common Lexical Module
 
context-free start-symbols Module

templates // rules
     
  ModuleSection.Rules = [
    rules 
    
      [Rule*; separator="\n\n"]
  ] 
  
  Rule.Strict = [strict [ID] [INT+; separator=","]/[INT]]
  Rule.Seqstrict = [seqstrict [ID] [INT+; separator=","]/[INT]]
    
  Rule.Axiom = [[Formula]]
      
  Rule.Rule = [
    [Premise+; separator=",\n"]
    [INFER]
    [Formula]
  ]
  
  Premise.Formula = [[Formula]]

  ID = <rules> {reject}
  ID = <fresh> {reject}
  
templates // formulas

  Formula.TermEq = [[Term] = [Term]]
  Formula.Relation = [[Reads][Source] [Rel] [Target]]
  Formula.IsValue = [value([Term])]
  
  Reads.NoReads = []
  Reads.Reads = [[LabelComp+; separator=", "] |- ]
  
  Source.Source = [[Term]]
  Source.Source = [([Term], [LabelComp+; separator=", "])]

  Target.Target = [[Term]]
  Target.Target = [([Term], [LabelComp+; separator=", "])]
  
  Rel.Dynamic = [-->]
  Rel.DynamicEmitted = [-- [LabelComp+; separator=", "] -->]
  
  LabelComp.LabelComp = [[ID] [Term]]

templates // terms

  Term.Var    = [[ID]]
  Term.Var    = [[LID]]

  Term.String   = [[STRING]]
  Term.Con      = [[ID]([Term*; separator=", "])]
  Term.List     = <[ <Term*; separator=", "> ]>
  Term.ListTail = <[ <Term*; separator=", "> | <Term>]>
  
  Term.Fresh  = [fresh]
  Term.Map    = [{[Entry*;separator=", "]}]
  Entry.Bind  = [[Term] |--> [Term]] 
  Entry.Binds = [[Term] |*-> [Term]]
  Entry.MapEntry = [[Term]]
  
  Term.MapSelect = <<Term>[<Term>]>
  Term.MapExtend = [[Term] + [Term]] {assoc}
  //Term.MapExtend = [[Term] + [Term]]

context-free priorities

  Term.MapSelect > Term.MapExtend
  
  
  
	