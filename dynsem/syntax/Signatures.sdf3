module Signatures

imports
  Common
  ds

context-free syntax

  ModuleSection.Signatures = <
    signature
        <{SignatureSection "\n"}*>>

context-free syntax // sort declarations

  SignatureSection.Sorts = <
    sorts
      <{SortDecl "\n"}*>>
  
  SortDecl.SortDecl = <<ID>>
  SortDecl.InjDecl = [[ID] -> [ID]]
  

context-free syntax // variable schemes
  
  SignatureSection.VariableSchemes = <
    variables
      <{VariableScheme "\n"}*>>
  
  VariableScheme.VariableScheme = [[ID] : [Type]]

context-free syntax // constructor declarations

  SignatureSection.Constructors = <
    constructors
      <{ConsDecl "\n"}*>>

  ConsDecl.NullaryConsDecl = [[ID] : [Type] [ConsAnnos]]
  ConsDecl.ConsDecl = [[ID] : [{Type " * "}+] -> [Type] [ConsAnnos]]
  
  
  ConsAnnos.NoAnnos = []

  ConsAnnos.Annos = [{[ { ConsAnno "," }* ]}]
  ConsAnno.ImplicitAnno = [implicit]

  ConsDecl.FunDecl = [[ID] : [{Type " * "}*] --> [Type]]

  // ConsDecl.ImplConsDecl = [[ID] : [Type] -> [Type] {implicit}]

  Type.SimpleSort = <<ID>>
  Type.ListSort = <List(<Type>)> 
  Type = [[MapType]]
  
  MapType.MapSort = [Map<[Type],[Type]>]

template options

  tokenize: "<("
  
context-free syntax // semantic component declarations

  SignatureSection.SemanticComponents = <
    semantic components
      <{SemanticCompDecl "\n"}*>>
  
  SemanticCompDecl.SemanticComponent = [[ID] -> [MapType]]

context-free syntax // native data types

  SignatureSection.NativeDataTypes = <
    native datatypes
      <{NativeTypeDecl "\n"}*>>
  
  JSNIPPET = <<STRING>>
  
  NativeTypeDecl.NativeBaseTypeDecl =
    [[JSNIPPET] as [ID] { [{NativeFunctionDecl "\n"}*] } ]
  
  NativeTypeDecl.NativeSubTypeDecl =
    [[JSNIPPET] as [ID] -> [ID] { [{NativeFunctionDecl "\n"}*] } ]
  
  NativeFunctionDecl.NativeFunctionDecl =
    [[ID] : [{Type " * "}*] -> [Type]] 
  
  NativeFunctionDecl.NativeNoArgFunctionDecl =
    [[ID] : [Type]]

context-free syntax // native operator declarations

  SignatureSection.NativeOperators = <
    native operators
      <{NativeOpDecl "\n"}*>>
  
  NativeOpDecl.NativeOpDecl = [[ID] : [{Type " * "}+] -> [Type]]
  NativeOpDecl.NullaryNativeOpDecl = [[ID] : [Type]]

context-free syntax // internal constructor declarations

  SignatureSection.NativeConstructors = <
    native constructors
      <{NativeConsDecl "\n"}*>>

  NativeConsDecl.NativeConsDecl = [[ID] : [{Type " * "}+] -> [Type]]
  NativeConsDecl.NullaryNativeConsDecl = [[ID] : [Type]]

context-free syntax
  
  SignatureSection.ArrowDeclarations = <
    arrows
      <{DeclaredArrow "\n"}*>>
  
  DeclaredArrow = ArrowDeclaration
  
  ArrowDeclaration.ArrowDecl = [[Type] -[ID]-> [Type]]
  ArrowDeclaration.DefaultArrowDecl = [[Type] --> [Type]]

