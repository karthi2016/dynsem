module ds

imports Common Module Signatures
 
context-free start-symbols Module

context-free syntax // rules
     
  ModuleSection.Rules = [
    rules 
    
      [ {Rule "\n\n"}* ]
  ] 
  
  Rule.Strict = [strict [ID] [{INT ","}+]/[INT]]
  Rule.Seqstrict = [seqstrict [ID] [{INT ","}+]/[INT]]
    
  Rule.Axiom = [[Formula]]
  
  Rule.Rule = [
    [{Premise ",\n"}+]
    [INFER]
    [Relation]
  ]
  
  Rule.RuleW = [
    [Relation]
    where
      [{Premise ",\n"}+]
  ]
  
  Premise.Formula = [[Formula]]
  Premise.AllFail = <all-fail>

  PremisesBlock.PremiseBlock = <{
    <{Premise ",\n"}*>
  }>

  Premise.MergePoint = [
    [Premise]
    < [PremisesBlock]
    + [PremisesBlock]
  ]
  
  Premise.TryOr = [
    try [PremisesBlock]
  	or  [PremisesBlock]
  ]
  
  ID = <signature> {reject}
  ID = <constructors> {reject}
  ID = <sorts> {reject}
  ID = <arrows> {reject}
  ID = <rules> {reject}
  ID = <fresh> {reject}
  ID = <where> {reject}
  ID = <true> {reject}
  ID = <false> {reject}
  ID = <fresh> {reject}
  ID = <fail> {reject}

context-free syntax // formulas

  Formula.Match    = [[Term] => [Term]]
  Formula.NMatch   = [[Term] =!=> [Term]]
  Formula.TermEq   = [[Term] == [Term]]
  Formula.TermNeq  = [[Term] != [Term]]
  Formula.TypeCheck = [[Var] <? [Type]]
  Formula.TypeCast = [[Var] <: [Type]]
  
  Formula = [[Relation]]
  Relation.Relation = [[Reads][Source] [Rel] [Target]]
  
  Formula.IsValue  = [value([Term])]
  
  Reads.NoReads = []
  Reads.Reads   = [[{LabelComp " "}+] |- ]
  
  Source.Source = [[Term]]
  Source.Source = [[Term] :: [{LabelComp " "}+]]

  Target.Target = [[Term]]
  Target.Target = [[Term] :: [{LabelComp " "}+].]
  
  Rel.Dynamic = [-->]
  Rel.NamedDynamic = [-[ID]->]
  Rel.NamedDynamicParametric = [-[ID]([ID])->]
  
  Rel.DynamicEmitted = [-[{LabelComp ", "}+]->]
  Rel.NamedDynamicEmitted = [-[{LabelComp ", "}+]-[ID]->]
  Rel.NamedDynamicEmittedParametric = [-[{LabelComp ", "}+]-[ID]([ID])->]
  
  LabelComp.LabelComp = [[Type] [Term]]
  
context-free syntax // terms

  Var.VarRef    = [[ID]]
  Term = Var
  
  Cast.Cast = [[Var] : [Type]]
  Term = Cast
  
  Term.As       = [[Var]@[Term]]
  
  Term.Wld      = <_>
  
  Term.String   = [[STRING]]
  Term.Int      = [[INT]]
  Term.Real     = [[REAL]]
  Term.Con      = [[ID]([{Term ", "}*])]
  Term.List     = <[ <{Term ", "}*> ]>
  Term.ListTail = <[ <{Term ", "}*> | <Term> ]>
  
  Term.Fresh  = [fresh]
  Term.True   = [true]
  Term.False  = [false]
  
  Term.Map    = [{[{Entry  ", "}*]}]
  Entry.Bind  = [[Term] |--> [Term]] 
  Entry.Binds = [[Term] |*-> [Term]]
  Entry.MapEntry = [[Term]]
  
  Term.MapSelect = <<Term>[<Term>]>
  Term.MapExtend = [[Term] + [Term]] {assoc}
  Term.MapUnbind = [[Term] \ [Term]] {assoc}

  Term.SortFunCall = <<ID>[<Term>](<{Term ", "}*>)>

context-free priorities

  Term.MapSelect > Term.MapExtend
  
