module src-gen/check/ds-chk

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  src-gen/signatures/ds-sig


imports
  src-gen/signatures/Common-sig
  src-gen/signatures/Module-sig
  src-gen/signatures/Signatures-sig


imports
  src-gen/check/Common-chk
  src-gen/check/Module-chk
  src-gen/check/Signatures-chk


strategies
  check-SDF-start-symbols =
    check-Module


strategies
  check-example =
    check-ModuleSection

  check-example =
    check-Rule

  check-example =
    check-PremisesBlock

  check-example =
    check-Premise

  check-ModuleSection :
    Rules(t1__) -> <id>
    with <map(check-Rule <+ error-Rule)> t1__

  is-ModuleSection-with-constructor =
    ?Rules(_)

  check-Rule :
    Strict(t1__, t2__, t3__) -> <id>
    with <(check-ID <+ error-ID)> t1__
    with <map(check-INT <+ error-INT)> t2__
    with <(check-INT <+ error-INT)> t3__

  is-Rule-with-constructor =
    ?Strict(_, _, _)

  check-Rule :
    Seqstrict(t1__, t2__, t3__) -> <id>
    with <(check-ID <+ error-ID)> t1__
    with <map(check-INT <+ error-INT)> t2__
    with <(check-INT <+ error-INT)> t3__

  is-Rule-with-constructor =
    ?Seqstrict(_, _, _)

  check-Rule :
    Axiom(t1__) -> <id>
    with <(check-Formula <+ error-Formula)> t1__

  is-Rule-with-constructor =
    ?Axiom(_)

  check-Rule :
    Rule(t1__, t2__, t3__) -> <id>
    with <map(check-Premise <+ error-Premise)> t1__
    with <(check-INFER <+ error-INFER)> t2__
    with <(check-Relation <+ error-Relation)> t3__

  is-Rule-with-constructor =
    ?Rule(_, _, _)

  check-Rule :
    RuleW(t1__, t2__) -> <id>
    with <(check-Relation <+ error-Relation)> t1__
    with <map(check-Premise <+ error-Premise)> t2__

  is-Rule-with-constructor =
    ?RuleW(_, _)

  check-Premise :
    Formula(t1__) -> <id>
    with <(check-Formula <+ error-Formula)> t1__

  is-Premise-with-constructor =
    ?Formula(_)

  check-Premise :
    AllFail() -> <id>

  is-Premise-with-constructor =
    ?AllFail()

  check-PremisesBlock :
    PremiseBlock(t1__) -> <id>
    with <map(check-Premise <+ error-Premise)> t1__

  is-PremisesBlock-with-constructor =
    ?PremiseBlock(_)

  check-Premise :
    MergePoint(t1__, t2__, t3__) -> <id>
    with <(check-Premise <+ error-Premise)> t1__
    with <(check-PremisesBlock <+ error-PremisesBlock)> t2__
    with <(check-PremisesBlock <+ error-PremisesBlock)> t3__

  is-Premise-with-constructor =
    ?MergePoint(_, _, _)

  check-Premise :
    TryOr(t1__, t2__) -> <id>
    with <(check-PremisesBlock <+ error-PremisesBlock)> t1__
    with <(check-PremisesBlock <+ error-PremisesBlock)> t2__

  is-Premise-with-constructor =
    ?TryOr(_, _)

  is-ModuleSection-with-constructor =
    fail

  is-Rule-with-constructor =
    fail

  is-PremisesBlock-with-constructor =
    fail

  is-Premise-with-constructor =
    fail

  check-ModuleSection :
    amb([h|hs]) -> <check-ModuleSection> h

  check-Rule :
    amb([h|hs]) -> <check-Rule> h

  check-PremisesBlock :
    amb([h|hs]) -> <check-PremisesBlock> h

  check-Premise :
    amb([h|hs]) -> <check-Premise> h

  error-ModuleSection =
    debug(!"Unexpected constructor. Expected constructor from sort ModuleSection instead. ")

  error-Rule =
    debug(!"Unexpected constructor. Expected constructor from sort Rule instead. ")

  error-PremisesBlock =
    debug(!"Unexpected constructor. Expected constructor from sort PremisesBlock instead. ")

  error-Premise =
    debug(!"Unexpected constructor. Expected constructor from sort Premise instead. ")


strategies
  check-example =
    check-Relation

  check-example =
    check-Formula

  check-example =
    check-Reads

  check-example =
    check-Source

  check-example =
    check-Target

  check-example =
    check-Rel

  check-example =
    check-LabelComp

  check-Formula :
    Match(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Formula-with-constructor =
    ?Match(_, _)

  check-Formula :
    NMatch(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Formula-with-constructor =
    ?NMatch(_, _)

  check-Formula :
    TermEq(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Formula-with-constructor =
    ?TermEq(_, _)

  check-Formula :
    TermNeq(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Formula-with-constructor =
    ?TermNeq(_, _)

  check-Formula :
    TypeCheck(t1__, t2__) -> <id>
    with <(check-Var <+ error-Var)> t1__
    with <(check-Type <+ error-Type)> t2__

  is-Formula-with-constructor =
    ?TypeCheck(_, _)

  check-Formula :
    TypeCast(t1__, t2__) -> <id>
    with <(check-Var <+ error-Var)> t1__
    with <(check-Type <+ error-Type)> t2__

  is-Formula-with-constructor =
    ?TypeCast(_, _)

  check-Formula :
    t1__ -> <id>
    where not(is-Formula-with-constructor)
    where <(check-Relation <+ error-Relation)> t1__

  check-Relation :
    Relation(t1__, t2__, t3__, t4__) -> <id>
    with <(check-Reads <+ error-Reads)> t1__
    with <(check-Source <+ error-Source)> t2__
    with <(check-Rel <+ error-Rel)> t3__
    with <(check-Target <+ error-Target)> t4__

  is-Relation-with-constructor =
    ?Relation(_, _, _, _)

  check-Formula :
    IsValue(t1__) -> <id>
    with <(check-Term <+ error-Term)> t1__

  is-Formula-with-constructor =
    ?IsValue(_)

  check-Reads :
    NoReads() -> <id>

  is-Reads-with-constructor =
    ?NoReads()

  check-Reads :
    Reads(t1__) -> <id>
    with <map(check-LabelComp <+ error-LabelComp)> t1__

  is-Reads-with-constructor =
    ?Reads(_)

  check-Source :
    Source(t1__) -> <id>
    with <(check-Term <+ error-Term)> t1__

  is-Source-with-constructor =
    ?Source(_)

  check-Source :
    Source(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <map(check-LabelComp <+ error-LabelComp)> t2__

  is-Source-with-constructor =
    ?Source(_, _)

  check-Target :
    Target(t1__) -> <id>
    with <(check-Term <+ error-Term)> t1__

  is-Target-with-constructor =
    ?Target(_)

  check-Target :
    Target(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <map(check-LabelComp <+ error-LabelComp)> t2__

  is-Target-with-constructor =
    ?Target(_, _)

  check-Rel :
    Dynamic() -> <id>

  is-Rel-with-constructor =
    ?Dynamic()

  check-Rel :
    NamedDynamic(t1__) -> <id>
    with <(check-IDNOHYPH <+ error-IDNOHYPH)> t1__

  is-Rel-with-constructor =
    ?NamedDynamic(_)

  check-Rel :
    DynamicEmitted(t1__) -> <id>
    with <map(check-LabelComp <+ error-LabelComp)> t1__

  is-Rel-with-constructor =
    ?DynamicEmitted(_)

  check-Rel :
    NamedDynamicEmitted(t1__, t2__) -> <id>
    with <map(check-LabelComp <+ error-LabelComp)> t1__
    with <(check-IDNOHYPH <+ error-IDNOHYPH)> t2__

  is-Rel-with-constructor =
    ?NamedDynamicEmitted(_, _)

  check-LabelComp :
    LabelComp(t1__, t2__) -> <id>
    with <(check-Type <+ error-Type)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-LabelComp-with-constructor =
    ?LabelComp(_, _)

  check-LabelComp :
    VarLabelComp(t1__) -> <id>
    with <(check-Var <+ error-Var)> t1__

  is-LabelComp-with-constructor =
    ?VarLabelComp(_)

  is-Relation-with-constructor =
    fail

  is-Formula-with-constructor =
    fail

  is-Reads-with-constructor =
    fail

  is-Source-with-constructor =
    fail

  is-Target-with-constructor =
    fail

  is-Rel-with-constructor =
    fail

  is-LabelComp-with-constructor =
    fail

  check-Relation :
    amb([h|hs]) -> <check-Relation> h

  check-Formula :
    amb([h|hs]) -> <check-Formula> h

  check-Reads :
    amb([h|hs]) -> <check-Reads> h

  check-Source :
    amb([h|hs]) -> <check-Source> h

  check-Target :
    amb([h|hs]) -> <check-Target> h

  check-Rel :
    amb([h|hs]) -> <check-Rel> h

  check-LabelComp :
    amb([h|hs]) -> <check-LabelComp> h

  error-Relation =
    debug(!"Unexpected constructor. Expected constructor from sort Relation instead. ")

  error-Formula =
    debug(!"Unexpected constructor. Expected constructor from sort Formula instead. ")

  error-Reads =
    debug(!"Unexpected constructor. Expected constructor from sort Reads instead. ")

  error-Source =
    debug(!"Unexpected constructor. Expected constructor from sort Source instead. ")

  error-Target =
    debug(!"Unexpected constructor. Expected constructor from sort Target instead. ")

  error-Rel =
    debug(!"Unexpected constructor. Expected constructor from sort Rel instead. ")

  error-LabelComp =
    debug(!"Unexpected constructor. Expected constructor from sort LabelComp instead. ")


strategies
  check-example =
    check-Var

  check-example =
    check-Cast

  check-example =
    check-List

  check-example =
    check-Entry

  check-example =
    check-Term

  check-Var :
    VarRef(t1__) -> <id>
    with <(check-ID <+ error-ID)> t1__

  is-Var-with-constructor =
    ?VarRef(_)

  check-Term :
    t1__ -> <id>
    where not(is-Term-with-constructor)
    where <(check-Var <+ error-Var)> t1__

  check-Cast :
    Cast(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Type <+ error-Type)> t2__

  is-Cast-with-constructor =
    ?Cast(_, _)

  check-Term :
    t1__ -> <id>
    where not(is-Term-with-constructor)
    where <(check-Cast <+ error-Cast)> t1__

  check-Term :
    As(t1__, t2__) -> <id>
    with <(check-Var <+ error-Var)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Term-with-constructor =
    ?As(_, _)

  check-Term :
    Wld() -> <id>

  is-Term-with-constructor =
    ?Wld()

  check-Term :
    String(t1__) -> <id>
    with <(check-STRING <+ error-STRING)> t1__

  is-Term-with-constructor =
    ?String(_)

  check-Term :
    Int(t1__) -> <id>
    with <(check-INT <+ error-INT)> t1__

  is-Term-with-constructor =
    ?Int(_)

  check-Term :
    Real(t1__) -> <id>
    with <(check-REAL <+ error-REAL)> t1__

  is-Term-with-constructor =
    ?Real(_)

  check-Term :
    Con(t1__, t2__) -> <id>
    with <(check-ID <+ error-ID)> t1__
    with <map(check-Term <+ error-Term)> t2__

  is-Term-with-constructor =
    ?Con(_, _)

  check-List :
    List(t1__) -> <id>
    with <map(check-Term <+ error-Term)> t1__

  is-List-with-constructor =
    ?List(_)

  check-List :
    ListTail(t1__, t2__) -> <id>
    with <map(check-Term <+ error-Term)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-List-with-constructor =
    ?ListTail(_, _)

  check-Term :
    t1__ -> <id>
    where not(is-Term-with-constructor)
    where <(check-List <+ error-List)> t1__

  check-Term :
    Fresh() -> <id>

  is-Term-with-constructor =
    ?Fresh()

  check-Term :
    True() -> <id>

  is-Term-with-constructor =
    ?True()

  check-Term :
    False() -> <id>

  is-Term-with-constructor =
    ?False()

  check-Term :
    Map(t1__) -> <id>
    with <map(check-Entry <+ error-Entry)> t1__

  is-Term-with-constructor =
    ?Map(_)

  check-Entry :
    Bind(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Entry-with-constructor =
    ?Bind(_, _)

  check-Entry :
    Binds(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Entry-with-constructor =
    ?Binds(_, _)

  check-Entry :
    MapEntry(t1__) -> <id>
    with <(check-Term <+ error-Term)> t1__

  is-Entry-with-constructor =
    ?MapEntry(_)

  check-Term :
    MapSelect(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Term-with-constructor =
    ?MapSelect(_, _)

  check-Term :
    MapExtend(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Term-with-constructor =
    ?MapExtend(_, _)

  check-Term :
    MapUnbind(t1__, t2__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Term-with-constructor =
    ?MapUnbind(_, _)

  check-Term :
    MapKeys(t1__) -> <id>
    with <(check-Term <+ error-Term)> t1__

  is-Term-with-constructor =
    ?MapKeys(_)

  check-Term :
    MapValues(t1__) -> <id>
    with <(check-Term <+ error-Term)> t1__

  is-Term-with-constructor =
    ?MapValues(_)

  check-Term :
    SortFunCall(t1__, t2__, t3__) -> <id>
    with <(check-ID <+ error-ID)> t1__
    with <(check-Term <+ error-Term)> t2__
    with <map(check-Term <+ error-Term)> t3__

  is-Term-with-constructor =
    ?SortFunCall(_, _, _)

  is-Var-with-constructor =
    fail

  is-Cast-with-constructor =
    fail

  is-List-with-constructor =
    fail

  is-Entry-with-constructor =
    fail

  is-Term-with-constructor =
    fail

  check-Var :
    amb([h|hs]) -> <check-Var> h

  check-Cast :
    amb([h|hs]) -> <check-Cast> h

  check-List :
    amb([h|hs]) -> <check-List> h

  check-Entry :
    amb([h|hs]) -> <check-Entry> h

  check-Term :
    amb([h|hs]) -> <check-Term> h

  error-Var =
    debug(!"Unexpected constructor. Expected constructor from sort Var instead. ")

  error-Cast =
    debug(!"Unexpected constructor. Expected constructor from sort Cast instead. ")

  error-List =
    debug(!"Unexpected constructor. Expected constructor from sort List instead. ")

  error-Entry =
    debug(!"Unexpected constructor. Expected constructor from sort Entry instead. ")

  error-Term =
    debug(!"Unexpected constructor. Expected constructor from sort Term instead. ")