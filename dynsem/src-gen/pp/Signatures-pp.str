module src-gen/pp/Signatures-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  src-gen/signatures/Signatures-sig


imports
  src-gen/signatures/Common-sig
  src-gen/signatures/ds-sig


imports
  src-gen/pp/Common-pp
  src-gen/pp/ds-pp


strategies
  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-ModuleSection :
    Signatures(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("signature")]
                          )
                        , t1__'
                        ]
    with t1__' := <pp-indent(|"4")> [<pp-V-list(prettyprint-SignatureSection)> t1__]

  is-ModuleSection =
    ?Signatures(_)

  is-ModuleSection =
    fail

  prettyprint-ModuleSection :
    amb([h|hs]) -> <prettyprint-ModuleSection> h


strategies
  prettyprint-example =
    prettyprint-SignatureSection

  prettyprint-example =
    prettyprint-SortDecl

  prettyprint-SignatureSection :
    Sorts(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("sorts")]
                     )
                   , t1__'
                   ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-SortDecl)> t1__]

  is-SignatureSection =
    ?Sorts(_)

  prettyprint-SortDecl :
    SortDecl(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__

  is-SortDecl =
    ?SortDecl(_)

  is-SignatureSection =
    fail

  is-SortDecl =
    fail

  prettyprint-SignatureSection :
    amb([h|hs]) -> <prettyprint-SignatureSection> h

  prettyprint-SortDecl :
    amb([h|hs]) -> <prettyprint-SortDecl> h


strategies
  prettyprint-example =
    prettyprint-SignatureSection

  prettyprint-example =
    prettyprint-VariableScheme

  prettyprint-SignatureSection :
    VariableSchemes(t1__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("variables")]
                               )
                             , t1__'
                             ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-VariableScheme)> t1__]

  is-SignatureSection =
    ?VariableSchemes(_)

  prettyprint-VariableScheme :
    VariableScheme(t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(" : "), t2__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__

  is-VariableScheme =
    ?VariableScheme(_, _)

  is-SignatureSection =
    fail

  is-VariableScheme =
    fail

  prettyprint-SignatureSection :
    amb([h|hs]) -> <prettyprint-SignatureSection> h

  prettyprint-VariableScheme :
    amb([h|hs]) -> <prettyprint-VariableScheme> h


strategies
  prettyprint-example =
    prettyprint-SignatureSection

  prettyprint-example =
    prettyprint-AliasDecl

  prettyprint-SignatureSection :
    Aliases(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("sort aliases")]
                       )
                     , t1__'
                     ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-AliasDecl)> t1__]

  is-SignatureSection =
    ?Aliases(_)

  prettyprint-AliasDecl :
    AliasDecl(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" = "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__

  is-AliasDecl =
    ?AliasDecl(_, _)

  is-SignatureSection =
    fail

  is-AliasDecl =
    fail

  prettyprint-SignatureSection :
    amb([h|hs]) -> <prettyprint-SignatureSection> h

  prettyprint-AliasDecl :
    amb([h|hs]) -> <prettyprint-AliasDecl> h


strategies
  prettyprint-example =
    prettyprint-SignatureSection

  prettyprint-example =
    prettyprint-ConsAnnos

  prettyprint-example =
    prettyprint-ConsAnno

  prettyprint-example =
    prettyprint-ConsDecl

  prettyprint-example =
    prettyprint-Type

  prettyprint-example =
    prettyprint-MapType

  prettyprint-SignatureSection :
    Constructors(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("constructors")]
                            )
                          , t1__'
                          ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-ConsDecl)> t1__]

  is-SignatureSection =
    ?Constructors(_)

  prettyprint-ConsDecl :
    NullaryConsDecl(t1__, t2__, t3__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [ t1__'
                                             , S(" : ")
                                             , t2__'
                                             , S(" ")
                                             , t3__'
                                             ]
                                           )
                                         ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__
    with t3__' := <pp-one-Z(prettyprint-ConsAnnos)> t3__

  is-ConsDecl =
    ?NullaryConsDecl(_, _, _)

  prettyprint-ConsDecl :
    ConsDecl(t1__, t2__, t3__, t4__) -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [ t1__'
                                            , S(" : ")
                                            , t2__'
                                            , S(" -> ")
                                            , t3__'
                                            , S(" ")
                                            , t4__'
                                            ]
                                          )
                                        ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-H-list(prettyprint-Type|" * ")> t2__
    with t3__' := <pp-one-Z(prettyprint-Type)> t3__
    with t4__' := <pp-one-Z(prettyprint-ConsAnnos)> t4__

  is-ConsDecl =
    ?ConsDecl(_, _, _, _)

  prettyprint-ConsAnnos :
    NoAnnos() -> [ H(
                     []
                   , [S("")]
                   )
                 ]

  is-ConsAnnos =
    ?NoAnnos()

  prettyprint-ConsAnnos :
    Annos(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [ S("{")
                       , t1__'
                       , S("}")
                       ]
                     )
                   ]
    with t1__' := <pp-H-list(prettyprint-ConsAnno|",")> t1__

  is-ConsAnnos =
    ?Annos(_)

  prettyprint-ConsAnno :
    ImplicitAnno() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("implicit")]
                        )
                      ]

  is-ConsAnno =
    ?ImplicitAnno()

  prettyprint-ConsAnno :
    MetafunAnno() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("meta-function")]
                       )
                     ]

  is-ConsAnno =
    ?MetafunAnno()

  prettyprint-ConsDecl :
    FunDecl(t1__, t2__, t3__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [ t1__'
                                     , S(" : ")
                                     , t2__'
                                     , S(" --> ")
                                     , t3__'
                                     ]
                                   )
                                 ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-H-list(prettyprint-Type|" * ")> t2__
    with t3__' := <pp-one-Z(prettyprint-Type)> t3__

  is-ConsDecl =
    ?FunDecl(_, _, _)

  prettyprint-Type :
    SimpleSort(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__']
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__

  is-Type =
    ?SimpleSort(_)

  prettyprint-Type :
    ListSort(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ S("List(")
                          , t1__'
                          , S(")")
                          ]
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Type)> t1__

  is-Type =
    ?ListSort(_)

  prettyprint-Type :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Type)
    where t1__' := <pp-one-Z(prettyprint-MapType)> t1__

  prettyprint-MapType :
    MapSort(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("Map<")
                               , t1__'
                               , S(",")
                               , t2__'
                               , S(">")
                               ]
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Type)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__

  is-MapType =
    ?MapSort(_, _)

  is-SignatureSection =
    fail

  is-ConsAnnos =
    fail

  is-ConsAnno =
    fail

  is-ConsDecl =
    fail

  is-Type =
    fail

  is-MapType =
    fail

  prettyprint-SignatureSection :
    amb([h|hs]) -> <prettyprint-SignatureSection> h

  prettyprint-ConsAnnos :
    amb([h|hs]) -> <prettyprint-ConsAnnos> h

  prettyprint-ConsAnno :
    amb([h|hs]) -> <prettyprint-ConsAnno> h

  prettyprint-ConsDecl :
    amb([h|hs]) -> <prettyprint-ConsDecl> h

  prettyprint-Type :
    amb([h|hs]) -> <prettyprint-Type> h

  prettyprint-MapType :
    amb([h|hs]) -> <prettyprint-MapType> h


strategies
  prettyprint-example =
    prettyprint-SignatureSection

  prettyprint-example =
    prettyprint-JSNIPPET

  prettyprint-example =
    prettyprint-NativeTypeDecl

  prettyprint-example =
    prettyprint-NativeFunctionDecl

  prettyprint-SignatureSection :
    NativeDataTypes(t1__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("native datatypes")]
                               )
                             , t1__'
                             ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-NativeTypeDecl)> t1__]

  is-SignatureSection =
    ?NativeDataTypes(_)

  prettyprint-JSNIPPET :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-JSNIPPET)
    where t1__' := <pp-one-Z(prettyprint-STRING)> t1__

  prettyprint-NativeTypeDecl :
    NativeBaseTypeDecl(t1__, t2__, t3__) -> [ H(
                                                [SOpt(HS(), "0")]
                                              , [ t1__'
                                                , S(" as ")
                                                , t2__'
                                                , S(" { ")
                                                , t3__'
                                                , S(" } ")
                                                ]
                                              )
                                            ]
    with t1__' := <pp-one-Z(prettyprint-JSNIPPET)> t1__
    with t2__' := <pp-one-Z(prettyprint-ID)> t2__
    with t3__' := <pp-V-list(prettyprint-NativeFunctionDecl)> t3__

  is-NativeTypeDecl =
    ?NativeBaseTypeDecl(_, _, _)

  prettyprint-NativeTypeDecl :
    NativeSubTypeDecl(t1__, t2__, t3__, t4__) -> [ H(
                                                     [SOpt(HS(), "0")]
                                                   , [ t1__'
                                                     , S(" as ")
                                                     , t2__'
                                                     , S(" -> ")
                                                     , t3__'
                                                     , S(" { ")
                                                     , t4__'
                                                     , S(" } ")
                                                     ]
                                                   )
                                                 ]
    with t1__' := <pp-one-Z(prettyprint-JSNIPPET)> t1__
    with t2__' := <pp-one-Z(prettyprint-ID)> t2__
    with t3__' := <pp-one-Z(prettyprint-ID)> t3__
    with t4__' := <pp-V-list(prettyprint-NativeFunctionDecl)> t4__

  is-NativeTypeDecl =
    ?NativeSubTypeDecl(_, _, _, _)

  prettyprint-NativeFunctionDecl :
    NativeFunctionDecl(t1__, t2__, t3__) -> [ H(
                                                [SOpt(HS(), "0")]
                                              , [ t1__'
                                                , S(" : ")
                                                , t2__'
                                                , S(" -> ")
                                                , t3__'
                                                ]
                                              )
                                            ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-H-list(prettyprint-Type|" * ")> t2__
    with t3__' := <pp-one-Z(prettyprint-Type)> t3__

  is-NativeFunctionDecl =
    ?NativeFunctionDecl(_, _, _)

  prettyprint-NativeFunctionDecl :
    NativeNoArgFunctionDecl(t1__, t2__) -> [ H(
                                               [SOpt(HS(), "0")]
                                             , [t1__', S(" : "), t2__']
                                             )
                                           ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__

  is-NativeFunctionDecl =
    ?NativeNoArgFunctionDecl(_, _)

  is-SignatureSection =
    fail

  is-JSNIPPET =
    fail

  is-NativeTypeDecl =
    fail

  is-NativeFunctionDecl =
    fail

  prettyprint-SignatureSection :
    amb([h|hs]) -> <prettyprint-SignatureSection> h

  prettyprint-JSNIPPET :
    amb([h|hs]) -> <prettyprint-JSNIPPET> h

  prettyprint-NativeTypeDecl :
    amb([h|hs]) -> <prettyprint-NativeTypeDecl> h

  prettyprint-NativeFunctionDecl :
    amb([h|hs]) -> <prettyprint-NativeFunctionDecl> h


strategies
  prettyprint-example =
    prettyprint-SignatureSection

  prettyprint-example =
    prettyprint-NativeOpDecl

  prettyprint-SignatureSection :
    NativeOperators(t1__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("native operators")]
                               )
                             , t1__'
                             ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-NativeOpDecl)> t1__]

  is-SignatureSection =
    ?NativeOperators(_)

  prettyprint-NativeOpDecl :
    NativeOpDecl(t1__, t2__, t3__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [ t1__'
                                          , S(" : ")
                                          , t2__'
                                          , S(" -> ")
                                          , t3__'
                                          ]
                                        )
                                      ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-H-list(prettyprint-Type|" * ")> t2__
    with t3__' := <pp-one-Z(prettyprint-Type)> t3__

  is-NativeOpDecl =
    ?NativeOpDecl(_, _, _)

  prettyprint-NativeOpDecl :
    NullaryNativeOpDecl(t1__, t2__) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [t1__', S(" : "), t2__']
                                         )
                                       ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__

  is-NativeOpDecl =
    ?NullaryNativeOpDecl(_, _)

  is-SignatureSection =
    fail

  is-NativeOpDecl =
    fail

  prettyprint-SignatureSection :
    amb([h|hs]) -> <prettyprint-SignatureSection> h

  prettyprint-NativeOpDecl :
    amb([h|hs]) -> <prettyprint-NativeOpDecl> h


strategies
  prettyprint-example =
    prettyprint-SignatureSection

  prettyprint-example =
    prettyprint-NativeConsDecl

  prettyprint-SignatureSection :
    NativeConstructors(t1__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("native constructors")]
                                  )
                                , t1__'
                                ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-NativeConsDecl)> t1__]

  is-SignatureSection =
    ?NativeConstructors(_)

  prettyprint-NativeConsDecl :
    NativeConsDecl(t1__, t2__, t3__) -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [ t1__'
                                            , S(" : ")
                                            , t2__'
                                            , S(" -> ")
                                            , t3__'
                                            ]
                                          )
                                        ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-H-list(prettyprint-Type|" * ")> t2__
    with t3__' := <pp-one-Z(prettyprint-Type)> t3__

  is-NativeConsDecl =
    ?NativeConsDecl(_, _, _)

  prettyprint-NativeConsDecl :
    NullaryNativeConsDecl(t1__, t2__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [t1__', S(" : "), t2__']
                                           )
                                         ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__

  is-NativeConsDecl =
    ?NullaryNativeConsDecl(_, _)

  is-SignatureSection =
    fail

  is-NativeConsDecl =
    fail

  prettyprint-SignatureSection :
    amb([h|hs]) -> <prettyprint-SignatureSection> h

  prettyprint-NativeConsDecl :
    amb([h|hs]) -> <prettyprint-NativeConsDecl> h


strategies
  prettyprint-example =
    prettyprint-SignatureSection

  prettyprint-example =
    prettyprint-DeclaredArrow

  prettyprint-example =
    prettyprint-ArrowDeclaration

  prettyprint-SignatureSection :
    ArrowDeclarations(t1__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("arrows")]
                                 )
                               , t1__'
                               ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-DeclaredArrow)> t1__]

  is-SignatureSection =
    ?ArrowDeclarations(_)

  prettyprint-DeclaredArrow :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-DeclaredArrow)
    where t1__' := <pp-one-Z(prettyprint-ArrowDeclaration)> t1__

  prettyprint-ArrowDeclaration :
    ArrowDecl(t1__, t2__, t3__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [ t1__'
                                       , S(" -")
                                       , t2__'
                                       , S("-> ")
                                       , t3__'
                                       ]
                                     )
                                   ]
    with t1__' := <pp-one-Z(prettyprint-Type)> t1__
    with t2__' := <pp-one-Z(prettyprint-ID)> t2__
    with t3__' := <pp-one-Z(prettyprint-Type)> t3__

  is-ArrowDeclaration =
    ?ArrowDecl(_, _, _)

  prettyprint-ArrowDeclaration :
    DefaultArrowDecl(t1__, t2__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [t1__', S(" --> "), t2__']
                                      )
                                    ]
    with t1__' := <pp-one-Z(prettyprint-Type)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__

  is-ArrowDeclaration =
    ?DefaultArrowDecl(_, _)

  is-SignatureSection =
    fail

  is-DeclaredArrow =
    fail

  is-ArrowDeclaration =
    fail

  prettyprint-SignatureSection :
    amb([h|hs]) -> <prettyprint-SignatureSection> h

  prettyprint-DeclaredArrow :
    amb([h|hs]) -> <prettyprint-DeclaredArrow> h

  prettyprint-ArrowDeclaration :
    amb([h|hs]) -> <prettyprint-ArrowDeclaration> h