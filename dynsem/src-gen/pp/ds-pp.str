module src-gen/pp/ds-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/ds-sig


imports
  src-gen/signatures/Common-sig
  src-gen/signatures/Module-sig
  src-gen/signatures/Signatures-sig


imports
  src-gen/pp/Common-pp
  src-gen/pp/Module-pp
  src-gen/pp/Signatures-pp


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Module


strategies
  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-Rule

  prettyprint-example =
    prettyprint-PremisesBlock

  prettyprint-example =
    prettyprint-Premise

  prettyprint-ModuleSection :
    Rules(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("rules")]
                     )
                   , H(
                       []
                     , [S("")]
                     )
                   , t1__'
                   ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-Rule|"1")> t1__]

  is-ModuleSection =
    ?Rules(_)

  prettyprint-Rule :
    Strict(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("strict ")
                                    , t1__'
                                    , S(" ")
                                    , t2__'
                                    , S("/")
                                    , t3__'
                                    ]
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-H-list(prettyprint-INT|",")> t2__
    with t3__' := <pp-one-Z(prettyprint-INT)> t3__

  is-Rule =
    ?Strict(_, _, _)

  prettyprint-Rule :
    Seqstrict(t1__, t2__, t3__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [ S("seqstrict ")
                                       , t1__'
                                       , S(" ")
                                       , t2__'
                                       , S("/")
                                       , t3__'
                                       ]
                                     )
                                   ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-H-list(prettyprint-INT|",")> t2__
    with t3__' := <pp-one-Z(prettyprint-INT)> t3__

  is-Rule =
    ?Seqstrict(_, _, _)

  prettyprint-Rule :
    Axiom(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [t1__']
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__

  is-Rule =
    ?Axiom(_)

  prettyprint-Rule :
    Rule(t1__, t2__, t3__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__']
                                )
                              , H(
                                  [SOpt(HS(), "0")]
                                , [t2__']
                                )
                              , H(
                                  [SOpt(HS(), "0")]
                                , [t3__']
                                )
                              ]
    with t1__' := <pp-V-list(prettyprint-Premise|"0", ",")> t1__
    with t2__' := <pp-one-Z(prettyprint-INFER)> t2__
    with t3__' := <pp-one-Z(prettyprint-Relation)> t3__

  is-Rule =
    ?Rule(_, _, _)

  prettyprint-Rule :
    RuleW(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__']
                           )
                         , H(
                             [SOpt(HS(), "0")]
                           , [S("where")]
                           )
                         , t2__'
                         ]
    with t1__' := <pp-one-Z(prettyprint-Relation)> t1__
    with t2__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Premise|"0", ",")> t2__
                                    ]

  is-Rule =
    ?RuleW(_, _)

  prettyprint-Premise :
    Formula(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [t1__']
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__

  is-Premise =
    ?Formula(_)

  prettyprint-Premise :
    AllFail() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("all-fail")]
                   )
                 ]

  is-Premise =
    ?AllFail()

  prettyprint-PremisesBlock :
    PremiseBlock(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("{")]
                            )
                          , t1__'
                          , t2__'
                          ]
    with t1__' := <pp-indent(|"4")> [ <pp-V-list(prettyprint-Premise|"0", ",")> t1__
                                    ]
    with t2__' := <pp-indent(|"2")> [S("}")]

  is-PremisesBlock =
    ?PremiseBlock(_)

  prettyprint-Premise :
    MergePoint(t1__, t2__, t3__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [t1__']
                                      )
                                    , H(
                                        [SOpt(HS(), "0")]
                                      , [S("< "), t2__']
                                      )
                                    , H(
                                        [SOpt(HS(), "0")]
                                      , [S("+ "), t3__']
                                      )
                                    ]
    with t1__' := <pp-one-Z(prettyprint-Premise)> t1__
    with t2__' := <pp-one-Z(prettyprint-PremisesBlock)> t2__
    with t3__' := <pp-one-Z(prettyprint-PremisesBlock)> t3__

  is-Premise =
    ?MergePoint(_, _, _)

  prettyprint-Premise :
    TryOr(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("try "), t1__']
                           )
                         , H(
                             [SOpt(HS(), "0")]
                           , [S("or  "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-PremisesBlock)> t1__
    with t2__' := <pp-one-Z(prettyprint-PremisesBlock)> t2__

  is-Premise =
    ?TryOr(_, _)

  is-ModuleSection =
    fail

  is-Rule =
    fail

  is-PremisesBlock =
    fail

  is-Premise =
    fail


strategies
  prettyprint-example =
    prettyprint-Relation

  prettyprint-example =
    prettyprint-Formula

  prettyprint-example =
    prettyprint-Reads

  prettyprint-example =
    prettyprint-Source

  prettyprint-example =
    prettyprint-Target

  prettyprint-example =
    prettyprint-Rel

  prettyprint-example =
    prettyprint-LabelComp

  prettyprint-Formula :
    Match(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" => "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Formula =
    ?Match(_, _)

  prettyprint-Formula :
    NMatch(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [t1__', S(" =!=> "), t2__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Formula =
    ?NMatch(_, _)

  prettyprint-Formula :
    TermEq(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [t1__', S(" == "), t2__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Formula =
    ?TermEq(_, _)

  prettyprint-Formula :
    TermNeq(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S(" != "), t2__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Formula =
    ?TermNeq(_, _)

  prettyprint-Formula :
    TypeCheck(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" ? "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Var)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__

  is-Formula =
    ?TypeCheck(_, _)

  prettyprint-Formula :
    TypeCast(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__', S(" : "), t2__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-Var)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__

  is-Formula =
    ?TypeCast(_, _)

  prettyprint-Formula :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Formula)
    where t1__' := <pp-one-Z(prettyprint-Relation)> t1__

  prettyprint-Relation :
    Relation(t1__, t2__, t3__, t4__) -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [ t1__'
                                            , t2__'
                                            , S(" ")
                                            , t3__'
                                            , S(" ")
                                            , t4__'
                                            ]
                                          )
                                        ]
    with t1__' := <pp-one-Z(prettyprint-Reads)> t1__
    with t2__' := <pp-one-Z(prettyprint-Source)> t2__
    with t3__' := <pp-one-Z(prettyprint-Rel)> t3__
    with t4__' := <pp-one-Z(prettyprint-Target)> t4__

  is-Relation =
    ?Relation(_, _, _, _)

  prettyprint-Formula :
    IsValue(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ S("value(")
                         , t1__'
                         , S(")")
                         ]
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__

  is-Formula =
    ?IsValue(_)

  prettyprint-Reads :
    NoReads() -> [ H(
                     []
                   , [S("")]
                   )
                 ]

  is-Reads =
    ?NoReads()

  prettyprint-Reads :
    Reads(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [t1__', S(" |- ")]
                     )
                   ]
    with t1__' := <pp-H-list(prettyprint-LabelComp|", ")> t1__

  is-Reads =
    ?Reads(_)

  prettyprint-Source :
    Source(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__

  is-Source =
    ?Source(_)

  prettyprint-Source :
    Source(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("(")
                              , t1__'
                              , S(", ")
                              , t2__'
                              , S(")")
                              ]
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-H-list(prettyprint-LabelComp|", ")> t2__

  is-Source =
    ?Source(_, _)

  prettyprint-Target :
    Target(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__

  is-Target =
    ?Target(_)

  prettyprint-Target :
    Target(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("(")
                              , t1__'
                              , S(", ")
                              , t2__'
                              , S(")")
                              ]
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-H-list(prettyprint-LabelComp|", ")> t2__

  is-Target =
    ?Target(_, _)

  prettyprint-Rel :
    Dynamic() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("-->")]
                   )
                 ]

  is-Rel =
    ?Dynamic()

  prettyprint-Rel :
    NamedDynamic(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("-")
                              , t1__'
                              , S("->")
                              ]
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__

  is-Rel =
    ?NamedDynamic(_)

  prettyprint-Rel :
    NamedDynamicParametric(t1__, t2__) -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [ S("-")
                                              , t1__'
                                              , S("(")
                                              , t2__'
                                              , S(")->")
                                              ]
                                            )
                                          ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-one-Z(prettyprint-ID)> t2__

  is-Rel =
    ?NamedDynamicParametric(_, _)

  prettyprint-Rel :
    DynamicEmitted(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [ S("-")
                                , t1__'
                                , S("->")
                                ]
                              )
                            ]
    with t1__' := <pp-H-list(prettyprint-LabelComp|", ")> t1__

  is-Rel =
    ?DynamicEmitted(_)

  prettyprint-Rel :
    NamedDynamicEmitted(t1__, t2__) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [ S("-")
                                           , t1__'
                                           , S("-")
                                           , t2__'
                                           , S("->")
                                           ]
                                         )
                                       ]
    with t1__' := <pp-H-list(prettyprint-LabelComp|", ")> t1__
    with t2__' := <pp-one-Z(prettyprint-ID)> t2__

  is-Rel =
    ?NamedDynamicEmitted(_, _)

  prettyprint-Rel :
    NamedDynamicEmittedParametric(t1__, t2__, t3__) -> [ H(
                                                           [SOpt(HS(), "0")]
                                                         , [ S("-")
                                                           , t1__'
                                                           , S("-")
                                                           , t2__'
                                                           , S("(")
                                                           , t3__'
                                                           , S(")->")
                                                           ]
                                                         )
                                                       ]
    with t1__' := <pp-H-list(prettyprint-LabelComp|", ")> t1__
    with t2__' := <pp-one-Z(prettyprint-ID)> t2__
    with t3__' := <pp-one-Z(prettyprint-ID)> t3__

  is-Rel =
    ?NamedDynamicEmittedParametric(_, _, _)

  prettyprint-LabelComp :
    LabelComp(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Type)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-LabelComp =
    ?LabelComp(_, _)

  is-Relation =
    fail

  is-Formula =
    fail

  is-Reads =
    fail

  is-Source =
    fail

  is-Target =
    fail

  is-Rel =
    fail

  is-LabelComp =
    fail


strategies
  prettyprint-example =
    prettyprint-Var

  prettyprint-example =
    prettyprint-Cast

  prettyprint-example =
    prettyprint-Entry

  prettyprint-example =
    prettyprint-Term

  prettyprint-Var :
    VarRef(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__

  is-Var =
    ?VarRef(_)

  prettyprint-Term :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Term)
    where t1__' := <pp-one-Z(prettyprint-Var)> t1__

  prettyprint-Cast :
    Cast(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__', S(" ! "), t2__']
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-Var)> t1__
    with t2__' := <pp-one-Z(prettyprint-Type)> t2__

  is-Cast =
    ?Cast(_, _)

  prettyprint-Term :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Term)
    where t1__' := <pp-one-Z(prettyprint-Cast)> t1__

  prettyprint-Term :
    As(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S("@"), t2__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Var)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?As(_, _)

  prettyprint-Term :
    Wld() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("_")]
               )
             ]

  is-Term =
    ?Wld()

  prettyprint-Term :
    String(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-STRING)> t1__

  is-Term =
    ?String(_)

  prettyprint-Term :
    Int(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__']
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-INT)> t1__

  is-Term =
    ?Int(_)

  prettyprint-Term :
    Real(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-REAL)> t1__

  is-Term =
    ?Real(_)

  prettyprint-Term :
    Con(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ t1__'
                           , S("(")
                           , t2__'
                           , S(")")
                           ]
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-H-list(prettyprint-Term|", ")> t2__

  is-Term =
    ?Con(_, _)

  prettyprint-Term :
    List(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("[ ")
                      , t1__'
                      , S(" ]")
                      ]
                    )
                  ]
    with t1__' := <pp-H-list(prettyprint-Term|", ")> t1__

  is-Term =
    ?List(_)

  prettyprint-Term :
    ListTail(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [ S("[ ")
                                , t1__'
                                , S(" | ")
                                , t2__'
                                , S(" ]")
                                ]
                              )
                            ]
    with t1__' := <pp-H-list(prettyprint-Term|", ")> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?ListTail(_, _)

  prettyprint-Term :
    Fresh() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("fresh")]
                 )
               ]

  is-Term =
    ?Fresh()

  prettyprint-Term :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  is-Term =
    ?True()

  prettyprint-Term :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  is-Term =
    ?False()

  prettyprint-Term :
    Map(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [ S("{")
                     , t1__'
                     , S("}")
                     ]
                   )
                 ]
    with t1__' := <pp-H-list(prettyprint-Entry|", ")> t1__

  is-Term =
    ?Map(_)

  prettyprint-Entry :
    Bind(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__', S(" |--> "), t2__']
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Entry =
    ?Bind(_, _)

  prettyprint-Entry :
    Binds(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" |*-> "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Entry =
    ?Binds(_, _)

  prettyprint-Entry :
    MapEntry(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__

  is-Entry =
    ?MapEntry(_)

  prettyprint-Term :
    MapSelect(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ t1__'
                                 , S("[")
                                 , t2__'
                                 , S("]")
                                 ]
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?MapSelect(_, _)

  prettyprint-Term :
    MapExtend(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" + "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?MapExtend(_, _)

  prettyprint-Term :
    MapUnbind(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" \\ "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?MapUnbind(_, _)

  prettyprint-Term :
    SortFunCall(t1__, t2__, t3__) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [ t1__'
                                         , S("[")
                                         , t2__'
                                         , S("](")
                                         , t3__'
                                         , S(")")
                                         ]
                                       )
                                     ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__
    with t3__' := <pp-H-list(prettyprint-Term|", ")> t3__

  is-Term =
    ?SortFunCall(_, _, _)

  is-Var =
    fail

  is-Cast =
    fail

  is-Entry =
    fail

  is-Term =
    fail