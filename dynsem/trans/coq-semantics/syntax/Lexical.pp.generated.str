module Lexical.pp.generated
imports
  trans/coq-semantics/syntax/-
  libstratego-gpp
  lib/runtime/tmpl/pp

strategies
  prettyprintCoq-LAYOUT =
    ![S(<is-string>)]

  prettyprintCoq-CommentChar =
    ![S(<is-string>)]

  prettyprintCoq-FirstLetter =
    ![S(<is-string>)]

  prettyprintCoq-SubsequentLetter =
    ![S(<is-string>)]

  prettyprintCoq-Ident =
    ![S(<is-string>)]

  prettyprintCoq-Digit =
    ![S(<is-string>)]

  prettyprintCoq-Num =
    ![S(<is-string>)]

  prettyprintCoq-Integer =
    ![S(<is-string>)]

  prettyprintCoq-String =
    ![S(<is-string>)]

  prettyprintCoq-StringChar =
    ![S(<is-string>)]

  prettyprintCoq-Reserved =
    ![S(<is-string>)]

  prettyprintCoq-SingleQuote =
    ![S(<is-string>)]

  prettyprintCoq-example =
    prettyprintCoq-LAYOUT

  prettyprintCoq-example =
    prettyprintCoq-CommentChar

  prettyprintCoq-example =
    prettyprintCoq-FirstLetter

  prettyprintCoq-example =
    prettyprintCoq-SubsequentLetter

  prettyprintCoq-example =
    prettyprintCoq-Ident

  prettyprintCoq-example =
    prettyprintCoq-Digit

  prettyprintCoq-example =
    prettyprintCoq-Num

  prettyprintCoq-example =
    prettyprintCoq-Integer

  prettyprintCoq-example =
    prettyprintCoq-String

  prettyprintCoq-example =
    prettyprintCoq-StringChar

  prettyprintCoq-example =
    prettyprintCoq-Reserved

  prettyprintCoq-example =
    prettyprintCoq-SingleQuote


strategies
  prettyprintCoq-Notation :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a57]
           )
         ]
    where a57 := <pp-one-Z(prettyprintCoq-Ident)> a

  prettyprintCoq-example =
    prettyprintCoq-Notation