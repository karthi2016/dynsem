module Vernacular.pp.generated
imports
  trans/coq-semantics/syntax/-
  libstratego-gpp
  lib/runtime/tmpl/pp

strategies
  prettyprintCoq-AssumptionKeyword :
    AssumptionAxiom() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("Axiom")]
                           )
                         ]

  prettyprintCoq-AssumptionKeyword :
    AssumptionConjecture() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("Conjecture")]
                                )
                              ]

  prettyprintCoq-AssumptionKeyword :
    AssumptionParameter() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("Parameter")]
                               )
                             ]

  prettyprintCoq-AssumptionKeyword :
    AssumptionParameters() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("Parameters")]
                                )
                              ]

  prettyprintCoq-AssumptionKeyword :
    AssumptionVariable() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("Variable")]
                              )
                            ]

  prettyprintCoq-AssumptionKeyword :
    AssumptionVariables() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("Variables")]
                               )
                             ]

  prettyprintCoq-AssumptionKeyword :
    AssumptionHypothesis() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("Hypothesis")]
                                )
                              ]

  prettyprintCoq-AssumptionKeyword :
    AssumptionHypotheses() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("Hypotheses")]
                                )
                              ]

  prettyprintCoq-example =
    prettyprintCoq-AssumptionKeyword


strategies
  prettyprintCoq-AssertionKeyword :
    AssertionTheorem() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("Theorem")]
                            )
                          ]

  prettyprintCoq-AssertionKeyword :
    AssertionLemma() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("Lemma")]
                          )
                        ]

  prettyprintCoq-AssertionKeyword :
    AssertionRemark() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("Remark")]
                           )
                         ]

  prettyprintCoq-AssertionKeyword :
    AssertionFact() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("Fact")]
                         )
                       ]

  prettyprintCoq-AssertionKeyword :
    AssertionCorollary() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("Corollary")]
                              )
                            ]

  prettyprintCoq-AssertionKeyword :
    AssertionProposition() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("Proposition")]
                                )
                              ]

  prettyprintCoq-AssertionKeyword :
    AssertionDefinition() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("Definition")]
                               )
                             ]

  prettyprintCoq-AssertionKeyword :
    AssertionExample() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("Example")]
                            )
                          ]

  prettyprintCoq-example =
    prettyprintCoq-AssertionKeyword


strategies
  prettyprintCoq-Sentence :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a71]
           )
         ]
    where a71 := <pp-one-Z(prettyprintCoq-Assumption)> a

  prettyprintCoq-Sentence :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a72]
           )
         ]
    where a72 := <pp-one-Z(prettyprintCoq-Definition)> a

  prettyprintCoq-Sentence :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a73]
           )
         ]
    where a73 := <pp-one-Z(prettyprintCoq-Inductive)> a

  prettyprintCoq-Sentence :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a74]
           )
         ]
    where a74 := <pp-one-Z(prettyprintCoq-Fixpoint)> a

  prettyprintCoq-Sentence :
    AssertionProof(a, b) -> [ H(
                                [SOpt(HS(), "0")]
                              , [a75, S(" "), b35]
                              )
                            ]
    where a75 := <pp-one-Z(prettyprintCoq-Assertion)> a
    where b35 := <pp-one-Z(prettyprintCoq-Proof)> b

  prettyprintCoq-example =
    prettyprintCoq-Sentence


strategies
  prettyprintCoq-Assumption :
    Assumption(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a76
                            , S(" ")
                            , b36
                            , S(".")
                            ]
                          )
                        ]
    where a76 := <pp-one-Z(prettyprintCoq-AssumptionKeyword)> a
    where b36 := <pp-one-Z(prettyprintCoq-Assums)> b

  prettyprintCoq-Assums :
    Term(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [a77, S(" : "), b37]
                    )
                  ]
    where a77 := <pp-H-list(prettyprintCoq-Ident)> a
    where b37 := <pp-one-Z(prettyprintCoq-Term)> b

  prettyprintCoq-Assums :
    Terms(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a78]
                  )
                ]
    where a78 := <pp-H-list(prettyprintCoq-AssumsPar)> a

  prettyprintCoq-AssumsPar :
    Pars(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("(")
                      , a79
                      , S(" : ")
                      , b38
                      , S(")")
                      ]
                    )
                  ]
    where a79 := <pp-H-list(prettyprintCoq-Ident)> a
    where b38 := <pp-one-Z(prettyprintCoq-Term)> b

  prettyprintCoq-example =
    prettyprintCoq-Assumption

  prettyprintCoq-example =
    prettyprintCoq-Assums

  prettyprintCoq-example =
    prettyprintCoq-AssumsPar


strategies
  prettyprintCoq-Definition :
    Definition(a, b, c, d) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ S("Definition ")
                                  , a80
                                  , b39
                                  , c11
                                  , S(" :=")
                                  ]
                                )
                              , H(
                                  [SOpt(HS(), "0")]
                                , [d6]
                                )
                              , H(
                                  [SOpt(HS(), "0")]
                                , [S(".")]
                                )
                              ]
    where a80 := <pp-one-Z(prettyprintCoq-Ident)> a
    where b39 := <pp-one-Z(prettyprintCoq-OptBinders)> b
    where c11 := <pp-one-Z(prettyprintCoq-OptType)> c
    where d6 := <pp-one-Z(prettyprintCoq-Term)> d

  prettyprintCoq-Definition :
    Let(a, b, c, d) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("Let ")
                           , a81
                           , b40
                           , c12
                           , S(" :=")
                           ]
                         )
                       , H(
                           [SOpt(HS(), "0")]
                         , [d7, S(".")]
                         )
                       ]
    where a81 := <pp-one-Z(prettyprintCoq-Ident)> a
    where b40 := <pp-one-Z(prettyprintCoq-OptBinders)> b
    where c12 := <pp-one-Z(prettyprintCoq-OptType)> c
    where d7 := <pp-one-Z(prettyprintCoq-Term)> d

  prettyprintCoq-example =
    prettyprintCoq-Definition


strategies
  prettyprintCoq-Inductive :
    Inductive(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("Inductive "), a82, S(".")]
                      )
                    ]
    where a82 := <pp-H-list(prettyprintCoq-IndBody|"with ")> a

  prettyprintCoq-Inductive :
    CoInductive(a) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("CoInductive "), a83, S(".")]
                        )
                      ]
    where a83 := <pp-H-list(prettyprintCoq-IndBody|"with ")> a

  prettyprintCoq-IndBody :
    Induc(a, b, c, d) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ a84
                             , b41
                             , S(" : ")
                             , c13
                             , S(" :=")
                             ]
                           )
                         , H(
                             [SOpt(HS(), "0")]
                           , [d8]
                           )
                         ]
    where a84 := <pp-one-Z(prettyprintCoq-Ident)> a
    where b41 := <pp-one-Z(prettyprintCoq-OptBinders)> b
    where c13 := <pp-one-Z(prettyprintCoq-Term)> c
    where d8 := <pp-one-Z(prettyprintCoq-ConsDecls)> d

  prettyprintCoq-ConsDecls :
    ListDeclBar(a) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("| "), a85]
                        )
                      ]
    where a85 := <pp-H-list(prettyprintCoq-ConsDecl|"| ")> a

  prettyprintCoq-ConsDecls :
    ListDecl(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a86]
                     )
                   ]
    where a86 := <pp-H-list(prettyprintCoq-ConsDecl|"| ")> a

  prettyprintCoq-ConsDecl :
    ConsDecl(a, b, c) -> [ H(
                             [SOpt(HS(), "0")]
                           , [a87, b42, c14]
                           )
                         , H(
                             []
                           , [S("")]
                           )
                         ]
    where a87 := <pp-one-Z(prettyprintCoq-Ident)> a
    where b42 := <pp-one-Z(prettyprintCoq-OptBinders)> b
    where c14 := <pp-one-Z(prettyprintCoq-OptType)> c

  prettyprintCoq-example =
    prettyprintCoq-Inductive

  prettyprintCoq-example =
    prettyprintCoq-IndBody

  prettyprintCoq-example =
    prettyprintCoq-ConsDecls

  prettyprintCoq-example =
    prettyprintCoq-ConsDecl


strategies
  prettyprintCoq-Fixpoint :
    Fixpoint(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("Fixpoint")]
                     )
                   , a88
                   ]
    where a88 := <pp-indent(|"2")> [ <pp-V-list(prettyprintCoq-FixBody|"0", " with")> a
                                   , S(".")
                                   ]

  prettyprintCoq-Fixpoint :
    CoFixpoint(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("CoFixpoint")]
                       )
                     , a89
                     ]
    where a89 := <pp-indent(|"2")> [ <pp-V-list(prettyprintCoq-CoFixBody|"0", " with")> a
                                   , S(".")
                                   ]

  prettyprintCoq-example =
    prettyprintCoq-Fixpoint


strategies
  prettyprintCoq-Assertion :
    Assertion(a, b, c, d) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ a90
                                 , S(" ")
                                 , b43
                                 , c15
                                 , S(" : ")
                                 , d9
                                 , S(".")
                                 ]
                               )
                             ]
    where a90 := <pp-one-Z(prettyprintCoq-AssertionKeyword)> a
    where b43 := <pp-one-Z(prettyprintCoq-Ident)> b
    where c15 := <pp-one-Z(prettyprintCoq-OptBinders)> c
    where d9 := <pp-one-Z(prettyprintCoq-Term)> d

  prettyprintCoq-example =
    prettyprintCoq-Assertion


strategies
  prettyprintCoq-Proof :
    Qed(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("Proof. "), a91, S(" Qed.")]
                )
              ]
    where a91 := <pp-H-list(prettyprintCoq-Tactic)> a

  prettyprintCoq-Proof :
    Defined(a) -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("Proof. "), a92, S(" Defined.")]
                    )
                  ]
    where a92 := <pp-H-list(prettyprintCoq-Tactic)> a

  prettyprintCoq-Proof :
    Admitted(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("Proof. "), a93, S(" Admitted.")]
                     )
                   ]
    where a93 := <pp-H-list(prettyprintCoq-Tactic)> a

  prettyprintCoq-example =
    prettyprintCoq-Proof