module coq-semantics/main

imports
  libstratego-gpp
  coq-semantics/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/index/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/nabl/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/properties/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/task/-
  names
  lib/editor-common.generated
  include/ds
  ds
  lib/Coq/signatures/-
  lib/Coq/Coq-parenthesize
  lib/Coq/pp/-

rules
  
  generate-coq:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      task-setup(|project-path)
    ; filename := <guarantee-extension(|"v")> path
    ; coq-file := <strip-annos; module-to-coq> ast
    with
       result := <parenthesize-Coq; prettyprintCoq-CoqFile; box2text-string(|100)> coq-file
    <+ <bottomup(try(not(is-string) ; not(is-list) ; not(prettyprintCoq-example) ; debug(!"cannot pp ")))> coq-file
    ;  result := ""

rules
  
  module-to-coq:
  	Module(name, rule*) -> S|[Inductive semantics_cbn : Env -> term -> value -> Prop := decls.]|
		where
		  rule'* := <filter(?Rules(<id>)); concat> rule*
		; decls  := <foldl(fold-rule); Fst; reverse; !ListDeclBar(<id>)> (rule'*, ([], []))

rules
  
  rule-to-coq(|n*):
    RuleW(formula, prem*) -> (ConsDecl(name', <union> (p-bind*, f-bind*), type), [(name, count), n*])
    where
      (prem'*, p-bind*, i) := <foldl(fold-prem)> (prem*, ([], [], 0))
    ; (t', f-bind*, _)     := <formula-to-coq(|i)> formula
    ; type                 := <foldl(fold-type)> (prem'*, t')
    ; name                 := <formula-to-name> formula
    ; count                := <lookup; inc <+ !0> (name, n*)
    ; name'                := $[[name][count]C_sem]
  
  rule-to-coq(|n*):
  	Rule(prem*,_,formula) -> <rule-to-coq(|n*)> RuleW(formula, prem*)
  	
  rule-to-coq(|n*):
    Axiom(formula) -> <rule-to-coq(|n*)> RuleW(formula, [])

rules // Fold rules
  
  fold-rule:
    (r, (p*, n*)) -> (p'*, n'*)
    where
      (p'*, n'*) := <rule-to-coq(|n*) < !([<Fst> | p*], <Snd>) + !(p*, n*)> r
  
  fold-prem:
    (Formula(p), (p*, b*, i)) -> ([p' | p*], <union> (b*, b'*), i')
    where
      (p', b'*, i') := <formula-to-coq(|i)> p
  
  fold-type: // Composes parts of a type
    (x, y) -> T|[x -> y]|
