module coq-semantics/main

imports
  libstratego-gpp
  coq-semantics/-
  stratego/metaborg
  coq-pp/-
  ds2ds/-
  analysis/-
  outline
  lib-ds

rules
  
  explicate-for-coq(|path, project-path) =
    in-project-path(
      include-imports;
      desugar-top;
      fuse-sections;
      desugar-varschemes-module;
      add-extra-typeannos-module;
      desugar-aliases-module;
      factorize-module;
      expand-implicits-module;
      factorize-module;
      explicate-module;
      copy-propagation-module;
      constant-propagation-module;
      defactorize-module;
      explicate-arrow-types;
//      insert-wildcards-module; // FIXME: crashes?
      prettify-vars-module // FIXME: doesn't do anything?
    |project-path)
  
  generate-coq:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"v")> path
      ; ds2v_tokens := <ds2v-tokenize> path; debug(!"TOKENS")
      ; coq-file := <explicate-for-coq(|path, project-path); m-in-analysis(debug(!0); module-to-coq(|ds2v_tokens); debug(!"done"))> ast
    with
       result := <parenthesize-Coq; prettyprint-Coq; box2text-string(|100)> coq-file
    <+ <bottomup(try(not(is-string) ; not(is-list) ; not(prettyprint-Coq) ; debug(!"cannot pp ")))> coq-file
    ;  result := ""

rules // Module generation

  module-to-coq(|ds2v_tokens):
    mod -> defs
    with
      imports := <tokens-to-coq-imports> ds2v_tokens;
      
      (sort_decl_map, arrow_decl_map, sort_dep_map, arrow_dep_map) := <pre-process-module> (mod, ds2v_tokens);
      
      sort_decl_names := <hashtable-keys> sort_decl_map;
      (coq_cs, _) := <sortdecls-to-coq(|sort_decl_map, sort_dep_map, ds2v_tokens)> (sort_decl_names, [], 1);
      
      arrow_decl_names := <hashtable-keys> arrow_decl_map;
      dup_arrow_names := <find-duplicate-arrow-names> arrow_decl_map;
      (coq_rs, _) := <arrowdecls-to-coq(|arrow_decl_map, arrow_dep_map, dup_arrow_names, ds2v_tokens)> (arrow_decl_names, [], 1);
      
      defs := <concat> [imports, coq_cs, coq_rs]
