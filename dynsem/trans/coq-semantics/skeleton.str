module coq-semantics/skeleton

rules
  
    build-module(|language):
    sent_semantics -> |[
Require Import ident_lang.
Require Import ident_nabl_module.
Require Import ts_nabl.


Module ident_ds_gen.

  Module ident_nabl_mod := ident_nabl_gen. 
  Export ident_nabl_mod.
  Module ident_ts_mod := ident_ts_nabl_gen. 
  Export ident_ts_mod.

  Module ts_wf := TS_NaBL_def ident_sdf_gen ident_nabl_mod ident_ts_mod. 
  Import ts_wf.

    Inductive Env : Set := 
    | Cons_Env : (Ident -> option (term * Env)) -> Env   
    .

    Definition Nenv := Cons_Env (fun x => None).
    Definition get_e x env :=
      match env with Cons_Env m => m x end.
    
    Definition env_extend (env : Env) x t :=
      Cons_Env (fun z => if eq x z then Some t else get_e z env).

    Definition env_remove (env : Env) x :=
      Cons_Env (fun z => if eq x z then None else get_e z env).
    
    Inductive value : Set :=
    | Natval (n : nat) 
    | Clos (v : Ident) (t : term) (e : Env)
    .

    Coercion Natval : nat >-> value.
    
    Inductive get_env x : Env -> term -> Env -> Prop :=
    | get_env_C t te c: 
        c x = Some (t,te) ->
        get_env x (Cons_Env c) t te
    .

sent_semantics

End ident_ds_gen.
      ]|
      where
        ident_lang        := language;
        ident_nabl_module := $[names_[language]];
        ident_sdf_gen     := $[SDF_[language]_gen];
        ident_nabl_gen    := $[NaBL_[language]_gen];
        ident_ts_nabl_gen := $[TS_NaBL_[language]_gen];
        ident_ds_gen      := $[DynSem_[language]_gen];
        ident_nabl_mod    := $[NaBL_[language]_mod];
        ident_ts_mod      := $[TS_[language]_mod]