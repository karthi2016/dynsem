module Gallina.pp.generated

strategies
  prettyprint-Term :
    ForAll(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ S("forall ")
                        , a0
                        , S(", ")
                        , b0
                        ]
                      )
                    ]
    where a0 := <pp-H-list(prettyprint-Binder)> a
    where b0 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    Fun(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [ S("fun ")
                     , a1
                     , S(" => ")
                     , b1
                     ]
                   )
                 ]
    where a1 := <pp-H-list(prettyprint-Binder)> a
    where b1 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    Fix(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("fix "), a2]
                )
              ]
    where a2 := <pp-one-Z(prettyprint-FixBodies)> a

  prettyprint-Term :
    CoFix(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("cofix "), a3]
                  )
                ]
    where a3 := <pp-one-Z(prettyprint-CoFixBodies)> a

  prettyprint-Term :
    Let(a, b, c, d, e) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("let ")
                              , a4
                              , S(" ")
                              , b2
                              , c0
                              , S(" :=")
                              ]
                            )
                          , d0
                          , a5
                          , e0
                          ]
    where a4 := <pp-one-Z(prettyprint-Ident)> a
    where b2 := <pp-H-list(prettyprint-Binder)> b
    where c0 := <pp-one-Z(prettyprint-OptType)> c
    where d0 := <pp-indent(|"7")> [<pp-one-Z(prettyprint-Term)> d]
    where a5 := <pp-indent(|"5")> [S("in")]
    where e0 := <pp-indent(|"7")> [<pp-one-Z(prettyprint-Term)> e]

  prettyprint-Term :
    LetFix(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ S("let fix ")
                        , a6
                        , S(" in ")
                        , b3
                        ]
                      )
                    ]
    where a6 := <pp-one-Z(prettyprint-FixBody)> a
    where b3 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    LetCoFix(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ S("let fix ")
                          , a7
                          , S(" in ")
                          , b4
                          ]
                        )
                      ]
    where a7 := <pp-one-Z(prettyprint-CoFixBody)> a
    where b4 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    X(a, b, c, d) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ S("let (")
                         , a8
                         , S(") ")
                         , b5
                         , S(" := ")
                         , c1
                         , S(" in ")
                         , d1
                         ]
                       )
                     ]
    where a8 := <pp-H-list(prettyprint-Name|", ")> a
    where b5 := <pp-one-Z(prettyprint-OptDepRetType)> b
    where c1 := <pp-one-Z(prettyprint-Term)> c
    where d1 := <pp-one-Z(prettyprint-Term)> d

  prettyprint-Term :
    If(a, b, c, d) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ S("if ")
                          , a9
                          , S(" ")
                          , b6
                          , S(" then ")
                          , c2
                          , S(" else ")
                          , d2
                          ]
                        )
                      ]
    where a9 := <pp-one-Z(prettyprint-Term)> a
    where b6 := <pp-one-Z(prettyprint-OptDepRetType)> b
    where c2 := <pp-one-Z(prettyprint-Term)> c
    where d2 := <pp-one-Z(prettyprint-Term)> d

  prettyprint-Term :
    Z(a, b) -> [ H(
                   [SOpt(HS(), "0")]
                 , [ S("@")
                   , a10
                   , S(" ")
                   , b7
                   ]
                 )
               ]
    where a10 := <pp-one-Z(prettyprint-QualId)> a
    where b7 := <pp-H-list(prettyprint-Term)> b

  prettyprint-Term :
    A(a, b) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a11, S(" % "), b8]
                 )
               ]
    where a11 := <pp-one-Z(prettyprint-Term)> a
    where b8 := <pp-one-Z(prettyprint-Ident)> b

  prettyprint-Term :
    Match(a, b, c) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ S("match ")
                          , a12
                          , S(" ")
                          , b9
                          , S(" with")
                          ]
                        )
                      , c3
                      ]
    where a12 := <pp-H-list(prettyprint-MatchItem|", ")> a
    where b9 := <pp-one-Z(prettyprint-OptReturnType)> b
    where c3 := <pp-indent(|"2")> [ <pp-one-Z(prettyprint-Equations)> c
                                  , S("  end")
                                  ]

  prettyprint-Term :
    Cast(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [a13, S(" : "), b10]
                    )
                  ]
    where a13 := <pp-one-Z(prettyprint-Term)> a
    where b10 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    Check(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a14, S(" <: "), b11]
                     )
                   ]
    where a14 := <pp-one-Z(prettyprint-Term)> a
    where b11 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    Coerce(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a15, S(" :>")]
                   )
                 ]
    where a15 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Term :
    Product(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a16, S(" -> "), b12]
                       )
                     ]
    where a16 := <pp-one-Z(prettyprint-Term)> a
    where b12 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    Apply(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a17, S(" "), b13]
                     )
                   ]
    where a17 := <pp-one-Z(prettyprint-Term)> a
    where b13 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a18, S(" = "), b14]
                  )
                ]
    where a18 := <pp-one-Z(prettyprint-Term)> a
    where b14 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Equations :
    ListEqBar(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("| "), a19]
                      )
                    ]
    where a19 := <pp-H-list(prettyprint-Equation|"| ")> a

  prettyprint-Equations :
    ListEq(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a20]
                   )
                 ]
    where a20 := <pp-H-list(prettyprint-Equation|"| ")> a

  prettyprint-OptType :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprint-OptType :
    Type(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [S(": "), a21]
                 )
               ]
    where a21 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Binder :
    Bind(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a22]
                 )
               ]
    where a22 := <pp-one-Z(prettyprint-Name)> a

  prettyprint-Binder :
    Binds(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [ S("(")
                       , a23
                       , S(": ")
                       , b15
                       , S(")")
                       ]
                     )
                   ]
    where a23 := <pp-H-list(prettyprint-Name)> a
    where b15 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Binder :
    Assign(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("(")
                           , a24
                           , b16
                           , S(" := ")
                           , c4
                           , S(")")
                           ]
                         )
                       ]
    where a24 := <pp-one-Z(prettyprint-Name)> a
    where b16 := <pp-one-Z(prettyprint-OptType)> b
    where c4 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Name :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a25]
           )
         ]
    where a25 := <pp-one-Z(prettyprint-Ident)> a

  prettyprint-Name :
    Wld() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("_")]
               )
             ]

  prettyprint-Term :
    Ref(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [a26]
                )
              ]
    where a26 := <pp-one-Z(prettyprint-QualId)> a

  prettyprint-Term :
    Sort(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a27]
                 )
               ]
    where a27 := <pp-one-Z(prettyprint-Sort)> a

  prettyprint-Term :
    Num(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [a28]
                )
              ]
    where a28 := <pp-one-Z(prettyprint-Num)> a

  prettyprint-Term :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a29, S(")")]
                          )
                        ]
    where a29 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Sort :
    Prop() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("Prop")]
                )
              ]

  prettyprint-Sort :
    Set() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("Set")]
               )
             ]

  prettyprint-Sort :
    Type() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("Type")]
                )
              ]

  prettyprint-example =
    prettyprint-Equations

  prettyprint-example =
    prettyprint-OptType

  prettyprint-example =
    prettyprint-Binder

  prettyprint-example =
    prettyprint-Name

  prettyprint-example =
    prettyprint-Term

  prettyprint-example =
    prettyprint-Sort


strategies
  prettyprint-FixBodies :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a30]
           )
         ]
    where a30 := <pp-one-Z(prettyprint-FixBody)> a

  prettyprint-FixBodies :
    With(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a31
                         , S(" with ")
                         , b17
                         , S(" for ")
                         , c5
                         ]
                       )
                     ]
    where a31 := <pp-one-Z(prettyprint-FixBody)> a
    where b17 := <pp-H-list(prettyprint-FixBody|"with ")> b
    where c5 := <pp-one-Z(prettyprint-Ident)> c

  prettyprint-FixBody :
    FixBody(a, b, c, d, e) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ a32
                                  , S(" ")
                                  , b18
                                  , S(" ")
                                  , c6
                                  , S(" ")
                                  , d3
                                  , S(" :=")
                                  ]
                                )
                              , e5
                              ]
    where a32 := <pp-one-Z(prettyprint-Ident)> a
    where b18 := <pp-H-list(prettyprint-Binder)> b
    where c6 := <pp-one-Z(prettyprint-OptAnnotation)> c
    where d3 := <pp-one-Z(prettyprint-OptType)> d
    where e5 := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Term)> e]

  prettyprint-CoFixBodies :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a33]
           )
         ]
    where a33 := <pp-one-Z(prettyprint-CoFixBody)> a

  prettyprint-CoFixBodies :
    With(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a34
                         , S(" with ")
                         , b19
                         , S(" for ")
                         , c7
                         ]
                       )
                     ]
    where a34 := <pp-one-Z(prettyprint-CoFixBody)> a
    where b19 := <pp-H-list(prettyprint-CoFixBody|"with ")> b
    where c7 := <pp-one-Z(prettyprint-Ident)> c

  prettyprint-CoFixBody :
    CoFixBody(a, b, c, d) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ a35
                                 , S(" ")
                                 , b20
                                 , S(" ")
                                 , c8
                                 , S(" := ")
                                 , d4
                                 ]
                               )
                             ]
    where a35 := <pp-one-Z(prettyprint-Ident)> a
    where b20 := <pp-H-list(prettyprint-Binder)> b
    where c8 := <pp-one-Z(prettyprint-OptType)> c
    where d4 := <pp-one-Z(prettyprint-Term)> d

  prettyprint-OptAnnotation :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprint-OptAnnotation :
    Anno(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("{ struct "), a36, S(" }")]
                 )
               ]
    where a36 := <pp-one-Z(prettyprint-Ident)> a

  prettyprint-MatchItem :
    MatchItem(a, b, c) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ a37
                              , S(" ")
                              , b21
                              , S(" ")
                              , c9
                              ]
                            )
                          ]
    where a37 := <pp-one-Z(prettyprint-Term)> a
    where b21 := <pp-one-Z(prettyprint-OptAlias)> b
    where c9 := <pp-one-Z(prettyprint-OptInTerm)> c

  prettyprint-OptAlias :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprint-OptAlias :
    As(a) -> [ H(
                 [SOpt(HS(), "0")]
               , [S("as "), a38]
               )
             ]
    where a38 := <pp-one-Z(prettyprint-Name)> a

  prettyprint-OptInTerm :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprint-OptInTerm :
    In(a) -> [ H(
                 [SOpt(HS(), "0")]
               , [S("in "), a39]
               )
             ]
    where a39 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-OptDepRetType :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprint-OptDepRetType :
    DepRet(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [a40, S(" "), b22]
                      )
                    ]
    where a40 := <pp-one-Z(prettyprint-OptAlias)> a
    where b22 := <pp-one-Z(prettyprint-ReturnType)> b

  prettyprint-OptReturnType :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprint-OptReturnType :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a41]
           )
         ]
    where a41 := <pp-one-Z(prettyprint-ReturnType)> a

  prettyprint-ReturnType :
    Return(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("return "), a42]
                   )
                 ]
    where a42 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Equation :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a43, S(" => "), b23]
                  )
                , H(
                    []
                  , [S("")]
                  )
                ]
    where a43 := <pp-H-list(prettyprint-MultPattern|" | ")> a
    where b23 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-MultPattern :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a44]
           )
         ]
    where a44 := <pp-H-list(prettyprint-Pattern|", ")> a

  prettyprint-Pattern :
    QidPattern(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a45, S(" "), b24]
                          )
                        ]
    where a45 := <pp-one-Z(prettyprint-QualId)> a
    where b24 := <pp-H-list(prettyprint-Pattern)> b

  prettyprint-Pattern :
    AsPattern(a, b) -> [ H(
                           [SOpt(HS(), "0")]
                         , [a46, S(" as "), b25]
                         )
                       ]
    where a46 := <pp-one-Z(prettyprint-Pattern)> a
    where b25 := <pp-one-Z(prettyprint-Ident)> b

  prettyprint-Pattern :
    XPattern(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a47, S(" % "), b26]
                        )
                      ]
    where a47 := <pp-one-Z(prettyprint-Pattern)> a
    where b26 := <pp-one-Z(prettyprint-Ident)> b

  prettyprint-Pattern :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a48]
           )
         ]
    where a48 := <pp-one-Z(prettyprint-QualId)> a

  prettyprint-Pattern :
    Wld() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("_")]
               )
             ]

  prettyprint-Pattern :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a49]
           )
         ]
    where a49 := <pp-one-Z(prettyprint-Num)> a

  prettyprint-Pattern :
    OrPattern(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("("), a50, S(")")]
                      )
                    ]
    where a50 := <pp-H-list(prettyprint-OrPattern|", ")> a

  prettyprint-OrPattern :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a51]
           )
         ]
    where a51 := <pp-H-list(prettyprint-Pattern|" | ")> a

  prettyprint-example =
    prettyprint-FixBodies

  prettyprint-example =
    prettyprint-FixBody

  prettyprint-example =
    prettyprint-CoFixBodies

  prettyprint-example =
    prettyprint-CoFixBody

  prettyprint-example =
    prettyprint-OptAnnotation

  prettyprint-example =
    prettyprint-MatchItem

  prettyprint-example =
    prettyprint-OptAlias

  prettyprint-example =
    prettyprint-OptInTerm

  prettyprint-example =
    prettyprint-OptDepRetType

  prettyprint-example =
    prettyprint-OptReturnType

  prettyprint-example =
    prettyprint-ReturnType

  prettyprint-example =
    prettyprint-Equation

  prettyprint-example =
    prettyprint-MultPattern

  prettyprint-example =
    prettyprint-Pattern

  prettyprint-example =
    prettyprint-OrPattern