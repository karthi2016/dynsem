module coq-semantics/term

imports
  libstratego-gpp
  coq-semantics/-
  runtime/index/-
  runtime/nabl/-
  runtime/properties/-
  runtime/task/-
  names/-
  stratego/metaborg
  signatures/-
  coq-signatures/-
  coq-signatures/extensions/-
  coq-signatures/tactic/-
  
imports
  src-gen/signatures/-
  
rules // Sources and targets
	
  src-dst-to-coq(|i) = ?Source(<id>); term-to-coq(|i)
	src-dst-to-coq(|i) = ?Source(x, lbl); !x; term-to-coq(|i)
  src-dst-to-coq(|i) = ?Target(<id>); term-to-coq(|i)
  src-dst-to-coq(|i) = ?Target(x, lbl); !x; term-to-coq(|i)
  
rules // Terms
	
	term-to-coq(|i):
		Con(ident, t*) -> (T|[Co x t' k]|, b*, i')
		where not("I" := ident)
		where not("C" := ident)
		where not("T" := ident)
		with
		  k             := $[k[i]]
	  ;	(t', bt*, i') := <foldr(!(List([]), [], <inc> i), fold-con)> t*
	  ; b*            := <union> (bt*, <union> (<filter(?VarRef(<id>); !Bind(<id>))> t*, [Bind(k)]))
	  ; x             := $[[ident]C]
	
	term-to-coq(|i):
	  Con("T", [e1, e2]) -> (T|[x1' x2']|, b*, i2)
    with
      (x1', b1*, i1) := <term-to-coq(|i)> e1
    ; (x2', b2*, i2) := <term-to-coq(|i1)> e2
    ; b*             := <union> (b1*, b2*)
	
	term-to-coq(|i):
	  Con("C", [e1, e2, env]) -> (T|[Clos x1' x2' env']|, b*, i')
	  where
	    (x1', b1*, i1)  := <term-to-coq(|i)> e1
    ; (x2', b2*, i2)  := <term-to-coq(|i1)> e2
    ; (env', be*, i') := <term-to-coq(|i2)> env
    ; b*              := <union> (b1*, <union> (b2*, be*))
	
	term-to-coq(|i):
	  VarRef(x) -> (Ref(x), [Bind(x)], i)
	  
	term-to-coq(|i): // Ugly, but the only one supported by Coq for now, anyways
	  Map([Bind(e1, e2), MapEntry(VarRef(env))]) -> (T|[env_extend x1 x2 env]|, b*, i2)
	  where
	    (x1, b1*, i1) := <term-to-coq(|i)> e1
	  ; (x2, b2*, i2) := <term-to-coq(|i1)> e2
	  ; b*            := <union> ([Bind(env)], <union> (b1*, b2*))
	    
	
rules // Static definitions, hardcoded for now
	term-to-coq(|i): Con("I", [VarRef(x)])                          -> (T|[Natval x]| , [Bind(x)], i)
	term-to-coq(|i): Int(n)                                      -> (n, [], i)
	term-to-coq(|i): Con("I", [Con("addInt", [VarRef(x), VarRef(y)])]) -> (T|[plus x y]| , <union> ([Bind(x)], [Bind(y)]), i)
  term-to-coq(|i): Con("I", [Con("subInt", [VarRef(x), VarRef(y)])]) -> (T|[minus x y]|, <union> ([Bind(x)], [Bind(y)]), i)
  term-to-coq(|i): Con("I", [Con("mulInt", [VarRef(x), VarRef(y)])]) -> (T|[mult x y]| , <union> ([Bind(x)], [Bind(y)]), i)
  
rules // Fold rules
  fold-con:
  	(x, (List(tl*), b*, i)) -> (List([x' | tl*]), b'*, i')
  	with
  	  (x', bx*, i') := <term-to-coq(|i)> x
  	; b'*           := <union> (bx*, b*)