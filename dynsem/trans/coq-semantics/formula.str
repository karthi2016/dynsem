module coq-semantics/formula

imports
  libstratego-gpp
  coq-semantics/-
  lib/runtime/index/-
  lib/runtime/nabl/-
  lib/runtime/properties/-
  lib/runtime/task/-
  names
  lib/editor-common.generated
  include/ds
  lib/Coq/signatures/-
  lib/Coq/Coq-parenthesize
  lib/Coq/pp/-
  src-gen/signatures/ds-sig

rules // Formula
  
  formula-to-coq(|i):
    Relation(r, src, rel, dst) -> (T|[semantics_cbn termenv term0 term1]|, bind*, i-dst)
    where not (Source(MapSelect(_,_),_) := src)
    where
      (termenv , b-env*)      := <reads-to-env> r
    ; (term1 , b-dst*, i-dst) := <src-dst-to-coq(|i)> dst
    ; (term0 , b-src*, i-src) := <src-dst-to-coq(|i-dst)> src
    ; bind*                   := <union> (b-env*, <union> (b-src*, b-dst*))

  formula-to-coq(|i):
    TermEq(Var(identx), t) -> (T|[identx = termt]|, bind*, i')
    where
      (termt, b*, i') := <term-to-coq(|i)> t
    ; bind*           := <union> ([Bind(identx)], b*)
  
  formula-to-coq(|i):
    TermNeq(Var(identx), t) -> (T|[identx <> termt]|, bind*, i')
    where
      (termt, b*, i') := <term-to-coq(|i)> t
    ; bind*           := <union> ([Bind(identx)], b*)
  
  formula-to-coq(|i):
    Relation(r,Source(MapSelect(Var(identenv), Var(identx)),_),rel,Target(Con("T",[Var(identt),Var(identenv')]),_))
      -> (T|[get_env identx identenv identt identenv']|, bind*, i)
    where
      bind* := <map(!Bind(<id>))> [identenv, identx, identt, identenv']

  formula-to-name = ?Relation(_, <id>, _, _); (?Source(<id>, _) <+ ?Source(<id>)); ?Con(<id>, _)

rules // Environments rules
  
  reads-to-env:
    Reads(list) -> (Ref(termenv), [Bind(termenv)])
    where
      termenv := <getfirst(?LabelComp(SimpleSort("E"), Var(value)); !value) <+ !"env"> list
