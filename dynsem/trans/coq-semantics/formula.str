module coq-semantics/formula

imports
  libstratego-gpp
  coq-semantics/-
  lib/runtime/index/-
  lib/runtime/nabl/-
  lib/runtime/properties/-
  lib/runtime/task/-
  names
  lib/editor-common.generated
  include/ds
  lib/Coq/signatures/-
  lib/Coq/Coq-parenthesize
  lib/Coq/pp/-
  src-gen/signatures/ds-sig

rules // Formula
  
  formula-to-coq(|i):
    Formula(formula) -> <formula-to-coq(|i)> formula
  
  formula-to-coq(|i):
    Relation(r, src, rel, dst) -> (T|[semantics_cbn terme term0 term1]|, bind*, i-dst)
    where
      (terme, b-env*, i-env) := <reads-to-env(|i)> r
    ; (term1, b-dst*, i-dst) := <src-dst-to-coq(|i-env)> dst
    ; (term0, b-src*, i-src) := <src-dst-to-coq(|i-dst)> src
    ; bind*                  := [b-env*, b-src*, b-dst*]

  formula-to-coq(|i):
    TermEq(Var(identx), t) -> (T|[identx = termt]|, bind*, i')
    where
      (termt, b*, i') := <term-to-coq(|i)> t
    ; bind*           := [Bind(identx), b*]
  
  formula-to-coq(|i):
    TermNeq(Var(identx), t) -> (T|[identx <> termt]|, bind*, i')
    where
      (termt, b*, i') := <term-to-coq(|i)> t
    ; bind*           := [Bind(identx), b*]
  
  formula-to-coq(|i):
    Match(MapSelect(Var(identenv), Var(identx)), Con("T", [Var(identt), Var(identenv')]))
      -> (T|[get_env identx identenv identt identenv']|, bind*, i)
    where
      bind* := <map(!Bind(<id>))> [identenv, identx, identt, identenv']

  relation-to-name = ?Relation(_, <id>, _, _); (?Source(<id>, _) <+ ?Source(<id>)); ?Con(<id>, _)

rules // Environments rules
  
  reads-to-env(|i):
    Reads(list) -> env
    where
      default := (Ref("env"), [Bind("env")], i);
      env     := <getfirst(?LabelComp(SimpleSort("E"), <id>); term-to-coq(|i)) <+ !default> list
