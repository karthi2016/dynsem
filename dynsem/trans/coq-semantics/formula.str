module coq-semantics/formula

imports
  libstratego-gpp
  coq-semantics/-
  lib/runtime/index/-
  lib/runtime/nabl/-
  lib/runtime/properties/-
  lib/runtime/task/-
  names
  lib/editor-common.generated
  include/ds
  lib/Coq/signatures/-
  lib/Coq/Coq-parenthesize
  lib/Coq/pp/-
  src-gen/signatures/ds-sig

rules // Formula
  
  formula-to-coq(|i):
    Relation(r, src, rel, dst) -> (T|[semantics_cbn env t0' t1']|, bind*, i-dst)
    where
      (env , b-env*, i-env) := <reads-to-coq(|i)> r
    ; (t1' , b-dst*, i-dst) := <src-dst-to-coq(|i-env)> dst
    ; (t0' , b-src*, i-src) := <src-dst-to-coq(|i-dst)> src
    ; bind*                 := <union> (b-env*, <union> (b-src*, b-dst*))

  formula-to-coq(|i):
    TermEq(MapSelect(Var(env), Var(x)), rhs) -> (T|[get_env x env t env']|, bind*, i)
    where
      Con("T", [Var(t), Var(env')]) := rhs
    ; bind* := <map(!Bind(<id>))> [env, x, t, env']

  formula-to-coq(|i):
    TermEq(Var(x), t) -> (T|[x = t']|, bind*, i')
    where
      (t', b*, i') := <term-to-coq(|i)> t
    ; bind*        := <union> ([Bind("env")], <union> ([Bind(x)], b*))
  
  formula-to-coq(|i):
    TermNeq(Var(x), t) -> (T|[x <> t']|, bind*, i')
    where
      (t', b*, i') := <term-to-coq(|i)> t
    ; bind*        := <union> ([Bind("env")], <union> ([Bind(x)], b*))
  
  formula-to-name = ?Relation(_, <id>, _, _); (?Source(<id>, _) <+ ?Source(<id>)); ?Con(<id>, _)
  
rules // Environments rules
  
  reads-to-coq(|i):
    Reads(lbl*) -> <foldl(fold-lbl)> (lbl*, ((), [], i))
    
  reads-to-coq(|i):
    NoReads() -> (Ref("env"), [Bind("env")], i)
      
rules // Folding rules
  
  fold-lbl:
    (LabelComp(_, e), (p , b*, i)) -> (n, <union> (b*, b'*), i')
    where
      (e', b'*, i') := <term-to-coq(|i)> e
    ; n             := <?() < !e' + !Arrow(e', p)> p
