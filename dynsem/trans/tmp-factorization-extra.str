module tmp-factorization-extra


imports
  include/ds
  lib-ds
  ds
  
rules
  
  rename-rule-inputs:
    Rule(prem1*, infer, Relation(Reads(r1*), Source(lhs, sc1*), NamedDynamicEmitted(e1*, arrow), Target(rhs, tc1*))) ->
    Rule(prem2*, infer, Relation(Reads(r2*), Source(lhs, sc2*), NamedDynamicEmitted(e1*, arrow), Target(rhs', tc2*)))
    with
      while-counting(
        (r2*, extraprem1*) := <rename-inputs> r1*;
        (sc2*, extraprem2*) := <rename-inputs> sc1*
      );
      while-counting(
        (rhs', extraprem3*) := <rename-outputs> rhs;
        (tc2*, extraprem4*) := <rename-outputs> tc1*
      );
      prem2* := [extraprem1*, extraprem2*, prem1*, extraprem3*, extraprem4*]
  
  rename-inputs:
    [x | xs] -> ([x' | xs''], [p1, p2*])
    with
      (x', p1) := <rename-input> x;
      (xs'', p2*) := <rename-inputs> xs 
  
  rename-inputs:
    [] -> ([], [])  

  rename-input:
    LabelComp(name, Var(v-orig)) -> (LabelComp(name, Var(v-new)), Formula(Match(VarRef(v-new), MatchedVar(v-orig))) )
    with
      v-new := <next-variable(|"lifted_in")>

  rename-outputs:
    [x | xs] -> ([x' | xs''], [p1, p2*])
    with
      (x', p1) := <rename-output> x;
      (xs'', p2*) := <rename-outputs> xs 
  
  rename-outputs:
    Con(t, args) -> (Con(t, args'), p*)
    with
      (args', p*) := <rename-outputs> args
  
  rename-outputs:
    vref -> (vref', [p])
    where
      ?VarRef(_) + ?Var(_)
    with
      (vref', p) := <rename-output> vref
  
  rename-outputs:
    [] -> ([], [])  
  
  rename-output:
    LabelComp(name, VarRef(v-orig)) -> (LabelComp(name, VarRef(v-new)), Formula(Match(VarRef(v-orig), MatchedVar(v-new))) )
    with
      v-new := <next-variable(|"lifted_out")>
  
  rename-output:
    v -> (VarRef(v-new), Formula(Match(VarRef(v-orig), MatchedVar(v-new))))
    where
      ?VarRef(v-orig) + ?Var(v-orig)
    with
      v-new := <next-variable(|"lifted_out")>

