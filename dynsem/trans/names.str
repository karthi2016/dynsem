module names

imports
  include/ds
  editor-common.generated
  runtime/nabl/-
  runtime/types/-
  runtime/task/-
  runtime/properties/-
  ds
  names.manual


signature
  constructors
    NablNsModule       : Namespace
    NablNsVariable     : Namespace
    NablNsArrow        : Namespace
    NablNsSort         : Namespace
    NablNsSortFunction : Namespace
    NablNsConstructor  : Namespace


signature
  constructors
    NablProp_expected-type : Property
    NablProp_sort-kind     : Property
    NablProp_cons-kind     : Property
    NablProp_java-id       : Property
    NablProp_stored-tys    : Property


rules

  nabl-custom-properties(add-properties) =
    ![ NablProp_expected-type()
     , NablProp_sort-kind()
     , NablProp_cons-kind()
     , NablProp_java-id()
     , NablProp_stored-tys()
     ]
    ; add-properties

  expected-type-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  expected-type-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  expected-type-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_expected-type())

  expected-type-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  expected-type-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  expected-type-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_expected-type(), ctx__, [])

  expected-type-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_expected-type(), ctx__, dep*)

  expected-type-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_expected-type()
    , ctx__
    , Eq()
    , expected
    )

  expected-type-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_expected-type(), ctx__, relation, expected)

  create-expected-type-task(|ctx__) =
    fail

  get-expected-type(|) =
    get-property(|NablProp_expected-type())

  store-expected-type(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_expected-type(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-expected-type-task(|ctx__)> term
    where NablProp_expected-type() := kind

  sort-kind-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  sort-kind-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  sort-kind-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_sort-kind())

  sort-kind-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  sort-kind-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  sort-kind-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_sort-kind(), ctx__, [])

  sort-kind-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_sort-kind(), ctx__, dep*)

  sort-kind-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_sort-kind()
    , ctx__
    , Eq()
    , expected
    )

  sort-kind-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_sort-kind(), ctx__, relation, expected)

  create-sort-kind-task(|ctx__) =
    fail

  get-sort-kind(|) =
    get-property(|NablProp_sort-kind())

  store-sort-kind(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_sort-kind(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-sort-kind-task(|ctx__)> term
    where NablProp_sort-kind() := kind

  cons-kind-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  cons-kind-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  cons-kind-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_cons-kind())

  cons-kind-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  cons-kind-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  cons-kind-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_cons-kind(), ctx__, [])

  cons-kind-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_cons-kind(), ctx__, dep*)

  cons-kind-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_cons-kind()
    , ctx__
    , Eq()
    , expected
    )

  cons-kind-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_cons-kind(), ctx__, relation, expected)

  create-cons-kind-task(|ctx__) =
    fail

  get-cons-kind(|) =
    get-property(|NablProp_cons-kind())

  store-cons-kind(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_cons-kind(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-cons-kind-task(|ctx__)> term
    where NablProp_cons-kind() := kind

  java-id-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  java-id-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  java-id-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_java-id())

  java-id-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  java-id-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  java-id-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_java-id(), ctx__, [])

  java-id-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_java-id(), ctx__, dep*)

  java-id-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_java-id()
    , ctx__
    , Eq()
    , expected
    )

  java-id-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_java-id(), ctx__, relation, expected)

  create-java-id-task(|ctx__) =
    fail

  get-java-id(|) =
    get-property(|NablProp_java-id())

  store-java-id(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_java-id(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-java-id-task(|ctx__)> term
    where NablProp_java-id() := kind

  stored-tys-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  stored-tys-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  stored-tys-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_stored-tys())

  stored-tys-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  stored-tys-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  stored-tys-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_stored-tys(), ctx__, [])

  stored-tys-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_stored-tys(), ctx__, dep*)

  stored-tys-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_stored-tys()
    , ctx__
    , Eq()
    , expected
    )

  stored-tys-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_stored-tys(), ctx__, relation, expected)

  create-stored-tys-task(|ctx__) =
    fail

  get-stored-tys(|) =
    get-property(|NablProp_stored-tys())

  store-stored-tys(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_stored-tys(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-stored-tys-task(|ctx__)> term
    where NablProp_stored-tys() := kind


rules

  nabl-get-scope =
    ?Module(name, section*)
    ; ![ NablNsVariable()
       , NablNsConstructor()
       , NablNsSort()
       , NablNsArrow()
       ]

  nabl-get-name :
    Module(name, section*) -> name

  nabl-name-apply(s) =
    Module(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Module(name, section*)
    ; origin-track-forced(
        Module(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsModule()
          , Unique()
          , Current()
          , [ NablNsVariable()
            , NablNsConstructor()
            , NablNsSort()
            , NablNsArrow()
            ]
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    Import(name) -> name

  nabl-name-apply(s) =
    Import(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Import(name)
    ; origin-track-forced(
        Import(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsModule()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-import-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Import(name)
    ; origin-track-forced(
        nabl-import(
        | lang__
        , ctx__
        , uniques__
        , uris__
        , [ <{:
               id
               ; !Wildcard(
                    [ Import(lang__, NablNsSort())
                    , Import(lang__, NablNsConstructor())
                    , Import(lang__, NablNsArrow())
                    ]
                  , Context(
                      NablNsModule()
                    , name
                    , []
                    , Current()
                    )
                  , Current()
                  , []
                  )
             }>
          ]
        )
      |
      )

  nabl-get-name :
    v@Var(x) -> x

  nabl-name-apply(s) =
    id ; Var(s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?v@Var(x)
    ; (id
       ; origin-track-forced(
           Var(
             nabl-def(
               ?c-uri1__
             , ?s-uri1__
             | lang__
             , ctx__
             , uniques__
             , uri__
             , uri__
             , NablNsVariable()
             , Unique()
             , Current()
             , []
             , []
             )
           )
         |
         ))
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?v@Var(x)
    ; (where(ty := <new-task-fixdeps(|ctx__, [])> Id(
                                                    <get-or-create-property-task(|ctx__, NablProp_expected-type())> v
                                                  ))
       ; id
       ; Var(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), ty, [])]
           )
         ))
    ; fail

  nabl-get-name :
    As(x, t) -> x

  nabl-name-apply(s) =
    As(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?As(x, t)
    ; origin-track-forced(
        As(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?As(x, t)
    ; (where(ty := <new-task-fixdeps(|ctx__, [])> Id(
                                                    <get-or-create-property-task(|ctx__, Type())> t
                                                  ))
       ; As(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), ty, [])]
           )
         , id
         ))
    ; fail

  nabl-get-name :
    VarRef(x) -> x

  nabl-name-apply(s) =
    VarRef(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?VarRef(x)
    ; origin-track-forced(
        VarRef(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-scoping-site =
    ?Axiom(conc)
    ; nabl-scope(|[NablNsVariable()])

  nabl-get-scope =
    ?Axiom(conc) ; ![NablNsVariable()]

  nabl-scoping-site =
    ?Rule(prem*, _, conc)
    ; nabl-scope(|[NablNsVariable()])

  nabl-get-scope =
    ?Rule(prem*, _, conc)
    ; ![NablNsVariable()]

  nabl-scoping-site =
    ?RuleW(conc, prem*)
    ; nabl-scope(|[NablNsVariable()])

  nabl-get-scope =
    ?RuleW(conc, prem*)
    ; ![NablNsVariable()]

  nabl-get-name :
    SimpleSort(ty) -> ty

  nabl-name-apply(s) =
    SimpleSort(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?SimpleSort(ty)
    ; origin-track-forced(
        SimpleSort(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSort()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    SortDecl(ty) -> ty

  nabl-name-apply(s) =
    SortDecl(s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?SortDecl(ty)
    ; origin-track-forced(
        SortDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSort()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?SortDecl(ty)
    ; (where(id)
       ; SortDecl(
           nabl-store-props(
           | ctx__
           , [ Prop(Type(), SimpleSort(ty), [])
             , Prop(NablProp_sort-kind(), Language(), [])
             ]
           )
         ))
    ; fail

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?InjDecl(ty, parent)
    ; origin-track-forced(
        InjDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSort()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?InjDecl(ty, parent)
    ; (where(id)
       ; InjDecl(
           nabl-store-props(
           | ctx__
           , [ Prop(Type(), SimpleSort(ty), [])
             , Prop(NablProp_sort-kind(), Language(), [])
             ]
           )
         , id
         ))
    ; fail

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?InjDecl(ty, parent)
    ; origin-track-forced(
        InjDecl(
          id
        , nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSort()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    SemanticComponent(ty, MapSort(key-ty, val-ty)) -> ty

  nabl-name-apply(s) =
    SemanticComponent(s, MapSort(id, id))

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?SemanticComponent(ty, MapSort(key-ty, val-ty))
    ; origin-track-forced(
        SemanticComponent(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSort()
          , Unique()
          , Current()
          , []
          , []
          )
        , origin-track-forced(MapSort(id, id)|)
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?SemanticComponent(ty, MapSort(key-ty, val-ty))
    ; (where(id)
       ; SemanticComponent(
           nabl-store-props(
           | ctx__
           , [ Prop(Type(), SimpleSort(ty), [])
             , Prop(NablProp_sort-kind(), SemanticComponent(), [])
             , Prop(
                 NablProp_stored-tys()
               , (key-ty, val-ty)
               , []
               )
             ]
           )
         , MapSort(id, id)
         ))
    ; fail

  nabl-get-name :
    InternalSortDecl(ty) -> ty

  nabl-name-apply(s) =
    InternalSortDecl(s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?InternalSortDecl(ty)
    ; origin-track-forced(
        InternalSortDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSort()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?InternalSortDecl(ty)
    ; (where(id)
       ; InternalSortDecl(
           nabl-store-props(
           | ctx__
           , [Prop(NablProp_sort-kind(), Internal(), [])]
           )
         ))
    ; fail

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?InternalInjDecl(ty, parent)
    ; origin-track-forced(
        InternalInjDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSort()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?InternalInjDecl(ty, parent)
    ; (where(id)
       ; InternalInjDecl(
           nabl-store-props(
           | ctx__
           , [ Prop(Type(), SimpleSort(ty), [])
             , Prop(NablProp_sort-kind(), Internal(), [])
             ]
           )
         , id
         ))
    ; fail

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?InternalInjDecl(ty, parent)
    ; origin-track-forced(
        InternalInjDecl(
          id
        , nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSort()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-scope =
    ?NativeBaseTypeDecl(java-id, ty, member*)
    ; ![NablNsSortFunction()]

  nabl-get-name :
    NativeBaseTypeDecl(java-id, ty, member*) -> ty

  nabl-name-apply(s) =
    NativeBaseTypeDecl(id, s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?NativeBaseTypeDecl(java-id, ty, member*)
    ; origin-track-forced(
        NativeBaseTypeDecl(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSort()
          , Unique()
          , Current()
          , [NablNsSortFunction()]
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?NativeBaseTypeDecl(java-id, ty, member*)
    ; (where(id)
       ; NativeBaseTypeDecl(
           id
         , nabl-store-props(
           | ctx__
           , [ Prop(Type(), SimpleSort(ty), [])
             , Prop(NablProp_sort-kind(), NativeType(), [])
             , Prop(NablProp_java-id(), java-id, [])
             ]
           )
         , id
         ))
    ; fail

  nabl-get-scope =
    ?NativeSubTypeDecl(java-id, ty, supty, member*)
    ; ![NablNsSortFunction()]

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?NativeSubTypeDecl(java-id, ty, supty, member*)
    ; origin-track-forced(
        NativeSubTypeDecl(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSort()
          , Unique()
          , Current()
          , [NablNsSortFunction()]
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?NativeSubTypeDecl(java-id, ty, supty, member*)
    ; (where(id)
       ; NativeSubTypeDecl(
           id
         , nabl-store-props(
           | ctx__
           , [ Prop(Type(), SimpleSort(ty), [])
             , Prop(NablProp_sort-kind(), NativeType(), [])
             , Prop(NablProp_java-id(), java-id, [])
             ]
           )
         , id
         , id
         ))
    ; fail

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?NativeSubTypeDecl(java-id, ty, supty, member*)
    ; origin-track-forced(
        NativeSubTypeDecl(
          id
        , id
        , nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSort()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )
    ; origin-track-forced(
        NativeSubTypeDecl(
          id
        , id
        , nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSort()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-import-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?NativeSubTypeDecl(java-id, ty, supty, member*)
    ; origin-track-forced(
        nabl-import(
        | lang__
        , ctx__
        , uniques__
        , uris__
        , [ <{:
               id
               ; !Wildcard(
                    [Import(lang__, NablNsSortFunction())]
                  , Context(
                      NablNsSort()
                    , supty
                    , []
                    , Current()
                    )
                  , Current()
                  , []
                  )
             }>
          ]
        )
      |
      )

  nabl-get-name :
    NativeFunctionDecl(name, arg*, ty) -> name

  nabl-name-apply(s) =
    NativeFunctionDecl(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?NativeFunctionDecl(name, arg*, ty)
    ; origin-track-forced(
        NativeFunctionDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSortFunction()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?NativeFunctionDecl(name, arg*, ty)
    ; (where(id)
       ; NativeFunctionDecl(
           nabl-store-props(
           | ctx__
           , [ Prop(
                 Type()
               , (arg*, ty)
               , []
               )
             ]
           )
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    Con(c, t*) -> c

  nabl-name-apply(s) =
    Con(s, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Con(c, t*)
    ; origin-track-forced(
        Con(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsConstructor()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-get-name :
    SortFunCall(f, parent-ref, arg*) -> f

  nabl-name-apply(s) =
    SortFunCall(s, id, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?SortFunCall(f, parent-ref, arg*)
    ; origin-track-forced(
        SortFunCall(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{p__, parent, p__:
                 ({p__:
                    p__ := <new-task-fixdeps(|ctx__, [])> Id(
                                                            <get-or-create-property-task(|ctx__, Type())> parent-ref
                                                          )
                    ; {prev__:
                        ?prev__
                        ; parent := <new-task-fixdeps(|ctx__, [prev__])> Rewrite("match0", p__)
                      }
                  }
                  ; {prev__:
                      ?prev__
                      ; {p__:
                          p__ := <new-task-fixdeps(|ctx__, [prev__])> Id(
                                                                        <get-or-create-property-task(|ctx__, NablProp_sort-kind())> parent
                                                                      )
                          ; {prev__:
                              ?prev__
                              ; <new-task-fixdeps(|ctx__, [prev__])> Rewrite("match1", p__)
                            }
                        }
                    })
                 ; !UseCandidate(
                      NablNsSortFunction()
                    , []
                    , Context(
                        NablNsSort()
                      , parent
                      , []
                      , Current()
                      )
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        , id
        )
      |
      )

  task-rewrite :
    ("match0", SimpleSort(parent)) -> parent

  task-rewrite =
    ?("match1", NativeType())

  nabl-get-name :
    ConsDecl(c, ty*, ty) -> c

  nabl-name-apply(s) =
    ConsDecl(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?ConsDecl(c, ty*, ty)
    ; origin-track-forced(
        ConsDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsConstructor()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?ConsDecl(c, ty*, ty)
    ; (where(id)
       ; ConsDecl(
           nabl-store-props(
           | ctx__
           , [ Prop(
                 Type()
               , (ty*, ty)
               , []
               )
             , Prop(NablProp_cons-kind(), Language(), [])
             ]
           )
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    NativeOpDecl(c, ty*, ty) -> c

  nabl-name-apply(s) =
    NativeOpDecl(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?NativeOpDecl(c, ty*, ty)
    ; origin-track-forced(
        NativeOpDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsConstructor()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?NativeOpDecl(c, ty*, ty)
    ; (where(id)
       ; NativeOpDecl(
           nabl-store-props(
           | ctx__
           , [ Prop(
                 Type()
               , (ty*, ty)
               , []
               )
             , Prop(NablProp_cons-kind(), NativeOperator(), [])
             ]
           )
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    ValueDecl(c, ty*) -> c

  nabl-name-apply(s) =
    ValueDecl(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?ValueDecl(c, ty*)
    ; origin-track-forced(
        ValueDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsConstructor()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?ValueDecl(c, ty*)
    ; (where(id)
       ; ValueDecl(
           nabl-store-props(
           | ctx__
           , [ Prop(
                 Type()
               , (ty*, SimpleSort("Value"))
               , []
               )
             , Prop(NablProp_cons-kind(), Value(), [])
             ]
           )
         , id
         ))
    ; fail

  nabl-get-name :
    InternalConsDecl(c, ty*, ty) -> c

  nabl-name-apply(s) =
    InternalConsDecl(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?InternalConsDecl(c, ty*, ty)
    ; origin-track-forced(
        InternalConsDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsConstructor()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?InternalConsDecl(c, ty*, ty)
    ; (where(id)
       ; InternalConsDecl(
           nabl-store-props(
           | ctx__
           , [ Prop(
                 Type()
               , (ty*, ty)
               , []
               )
             , Prop(NablProp_cons-kind(), Internal(), [])
             ]
           )
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    NativeConsDecl(c, ty*, ty) -> c

  nabl-name-apply(s) =
    NativeConsDecl(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?NativeConsDecl(c, ty*, ty)
    ; origin-track-forced(
        NativeConsDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsConstructor()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?NativeConsDecl(c, ty*, ty)
    ; (where(id)
       ; NativeConsDecl(
           nabl-store-props(
           | ctx__
           , [ Prop(
                 Type()
               , (ty*, ty)
               , []
               )
             , Prop(NablProp_cons-kind(), NativeConstructor(), [])
             ]
           )
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    ArrowDecl(l-ty, name, r-ty) -> name

  nabl-name-apply(s) =
    ArrowDecl(id, s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?ArrowDecl(l-ty, name, r-ty)
    ; origin-track-forced(
        ArrowDecl(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsArrow()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?ArrowDecl(l-ty, name, r-ty)
    ; (where(id)
       ; ArrowDecl(
           id
         , nabl-store-props(
           | ctx__
           , [ Prop(
                 Type()
               , (l-ty, r-ty)
               , []
               )
             ]
           )
         , id
         ))
    ; fail

  nabl-get-name :
    NamedDynamic(name) -> name

  nabl-name-apply(s) =
    NamedDynamic(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?NamedDynamic(name)
    ; origin-track-forced(
        NamedDynamic(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsArrow()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    NamedDynamicEmitted(_, name) -> name

  nabl-name-apply(s) =
    NamedDynamicEmitted(id, s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?NamedDynamicEmitted(_, name)
    ; origin-track-forced(
        NamedDynamicEmitted(
          id
        , nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsArrow()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    Formula(Match(lhs, MatchedVar(x))) -> x

  nabl-name-apply(s) =
    Formula(Match(id, MatchedVar(s)))

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Formula(Match(lhs, MatchedVar(x)))
    ; origin-track-forced(
        Formula(
          origin-track-forced(
            Match(
              id
            , origin-track-forced(
                MatchedVar(
                  nabl-def(
                    ?c-uri1__
                  , ?s-uri1__
                  | lang__
                  , ctx__
                  , uniques__
                  , uri__
                  , uri__
                  , NablNsVariable()
                  , Unique()
                  , Current()
                  , []
                  , []
                  )
                )
              |
              )
            )
          |
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?Formula(Match(lhs, MatchedVar(x)))
    ; (where(ty := <new-task-fixdeps(|ctx__, [])> Id(
                                                    <get-or-create-property-task(|ctx__, Type())> lhs
                                                  ))
       ; Formula(
           Match(
             id
           , MatchedVar(
               nabl-store-props(
               | ctx__
               , [Prop(Type(), ty, [])]
               )
             )
           )
         ))
    ; fail
