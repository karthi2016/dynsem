module backend/interpreter/lang-ast

imports
  include/ds
  backend/interpreter/-
  libjava-front
  editor-common.generated

rules
  
  ds-to-interp-terms-module =
    ?Module(_, <fetch-elem(?Signatures(sig*))>);
    debug(!"generating term classes");
    <ds-to-interp-terms-signatures-top; ds-to-interp-write-classes(|<TermsPackageName>)> sig*;
    debug(!"generating typesystem class");
    <ds-to-interp-terms-types-signatures; MkSingleton; ds-to-interp-write-classes(|<TopPackageName>)> sig*;
    debug(!"generating termbuilding sort-classes");
    <ds-to-inter-terms-sortbuilding; ds-to-interp-write-classes(|<TermBuildPackageName>)> sig*;
    debug(!"generating termbuilding classes");
    <ds-to-interp-terms-building; ds-to-interp-write-classes(|<TermBuildPackageName>)> sig*;
    debug(!"generating termmatching classes");
    <ds-to-interp-terms-matching; ds-to-interp-write-classes(|<TermMatchPackageName>)> sig*;
    debug(!"generating term registry class");
    <ds-to-interp-terms-registry-top; MkSingleton; ds-to-interp-write-classes(|<TopPackageName>)> sig*;
    debug(!"generating interpreter entry point");
    ds-to-interp-language-entrypoint; MkSingleton; ds-to-interp-write-classes(|<TopPackageName>);
    debug(!"done generating classes")

rules /* Sort & Constructor classes */

  ds-to-interp-terms-signatures-top:
    sig* -> [sort-class*, cons-class*]
    where
      debug(!1);
      sort-dec* := <fetch-elem(?Sorts(<id>))> sig*;
      debug(!2);
      cons-dec* := <fetch-elem(?Constructors(<id>))> sig*;
      debug(!3);
      sort-class* := <map(ds-to-interp-terms-sortdecl(|cons-dec*))> sort-dec*;
      debug(!4);
      cons-class* := <map(debug(!"4a "); ds-to-interp-terms-consdecl; debug(!"4b "))> cons-dec*
      ;debug(!5)
    
  ds-to-interp-terms-sortdecl(|cons-dec*):
    dec@SortDecl(s) ->
      compilation-unit |[
        package ~x:<TermsPackageName>;
        
        import org.spoofax.interpreter.core.Tools;
        import metaborg.meta.lang.dynsem.interpreter.terms.IConTerm;
        import org.spoofax.interpreter.terms.*;
        
        public abstract class x_class implements IConTerm {
          public static x_class create(IStrategoTerm term) {
            assert term != null;
            bstm0*
            bstm1
          }
        }
      ]|
    where
      x_class := <ds-to-interp-terms-types-name> dec;
      appl-cons-dec* := <filter(?ConsDecl(_, _, SimpleSort(s),_))> cons-dec*; 
      bstm0* := <map(ds-to-interp-terms-sortdec-createdisp)> appl-cons-dec*;
      impl-consdec* := <filter(?ConsDecl(_, [_], SimpleSort(s), Annos([ImplicitAnno()])))> cons-dec*;
      bstm1 := <foldr(! bstm |[ throw new IllegalStateException("Unsupported term: " + term); ]|, ds-to-interp-terms-sortdec-impldisp)> impl-consdec*

  ds-to-interp-terms-sortdec-createdisp:
    dec@ConsDecl(name, kid*, _, _) ->
      bstm |[
        if (Tools.isTermAppl(term) && Tools.hasConstructor((IStrategoAppl) term, ~e:Lit(String([Chars(name)])), ~i:<length; int-to-string> kid*)) {
          return ~x:<ds-to-interp-terms-types-name> dec.create(term);
        }
      ]| 

  ds-to-interp-terms-sortdec-impldisp:
    (dec@ConsDecl(name, [sref@SimpleSort(_)], _, _), bstm0) ->
      bstm |[
        try {
          return new x_class(e_create);
        } catch (IllegalStateException ilsex) {
          bstm0
        }
      ]|
    where
      x_class := <ds-to-interp-terms-types-name> dec;
      e_create := <ds-to-interp-terms-sortdec-impldisp-constr> sref 
  
  ds-to-interp-terms-sortdec-impldisp-constr:
    sref@SimpleSort(s) -> e |[ ~x:<ds-to-interp-terms-types-name> sref.create(term) ]|
    where
      <not(is-builtin-type)> s

  ds-to-interp-terms-sortdec-impldisp-constr:
    sref@SimpleSort("String") -> e |[ ((IStrategoString) term).stringValue() ]|

  ds-to-interp-terms-sortdec-impldisp-constr:
    sref@SimpleSort("Int") -> e |[ ((IStrategoInt) term).intValue() ]|

  ds-to-interp-terms-consdecl:
    dec@ConsDecl(name, kid*, s, _) ->
      compilation-unit |[
        package ~x:<debug(!"ba1a1c1 "); TermsPackageName; debug(!"ba1a1c2 ")>;
        
        import org.spoofax.interpreter.core.Tools;
        import org.spoofax.interpreter.terms.*;
        
        public class x_classname extends ~x:<ds-to-interp-terms-types-name> s {

          public final static String CONSTRUCTOR = ~e:Lit(String([Chars(name)]));
          public final static int ARITY = ~i:<length; int-to-string> kid*;

          ~fdec0*

          ~fget0*

          public x_classname(param0*) {
            bstm0*
          }

          public static x_classname create(IStrategoTerm term) {
            assert term != null;
            assert Tools.isTermAppl(term);
            assert Tools.hasConstructor((IStrategoAppl) term, CONSTRUCTOR, ARITY);
            bstm1*
            return new x_classname(e1*);
          }
          
          @Override
          public String constructor() {
            return CONSTRUCTOR;
          }
        
          @Override
          public int arity() {
            return ARITY;
          }
          
          @Override
          public Object[] allSubterms() {
            return new Object[] { e0* };
          }
        }
      ]|
    where
      debug(!"a ");
      x_classname := <ds-to-interp-terms-types-name> dec;
      debug(!"b ");
      param0* := <ds-to-interp-sorts-to-params> kid*;
      debug(!"c ");
      bstm0* := <ds-to-interp-sorts-to-finits> kid*;
      debug(!"d ");
      fdec0* := <ds-to-interp-sorts-to-fdecs> kid*;
      debug(!"e ");
      fget0* := <ds-to-interp-sorts-to-fgets> kid*;
      debug(!"f ");
      e0* := <ds-to-interp-sorts-to-frefs> kid*;
      debug(!"g ");
      (bstm1*, e1*) := <map-with-index((\ i -> e |[ ~i:<dec; int-to-string> ]| \, id); ds-to-interp-sorts-to-create-arg(|"term")); unzip; (concat, id)> kid*
      ;debug(!"h ")
  
  ds-to-interp-sorts-to-create-arg(|x_term):
    (e, sref@SimpleSort(s)) -> ([], e |[ ~x:<ds-to-interp-terms-types-name> sref.create(x_term.getSubterm(e)) ]|)
    where
      <not(is-builtin-type)> s

  ds-to-interp-sorts-to-create-arg(|x_term):
    (e, ListSort(s)) -> (
      bstm* |[
        java.util.List<x_elemclass> x_tmpres = new java.util.LinkedList<x_elemclass>();
        for (IStrategoTerm x_tmpelem : Tools.listAt(x_term, e)) {
          x_tmpres.add(x_elemclass.create(x_tmpelem));
        }
      ]|, e |[ com.github.krukow.clj_lang.PersistentList.create(x_tmpres) ]|)
    where
      x_elemclass := <ds-to-interp-terms-types-name> s;
      x_tmpres := $[_[<newname>]];
      x_tmpelem := $[_[<newname>]]

  ds-to-interp-sorts-to-create-arg(|x_term):
    (e, MapSort(skey, sval)) -> (
      bstm* |[
        IStrategoAppl x_mapT = Tools.applAt(x_term, e);
        assert Tools.hasConstructor(x_mapT, "Map", 1);
      
        IStrategoList x_bindsT = Tools.listAt(x_mapT, 0);
      
        java.util.Map<x_keyclass, x_valclass> x_map = new java.util.HashMap<x_keyclass, x_valclass>(
            Math.round(x_bindsT.size() / 0.75f), 0.75f);
        for (IStrategoTerm x_bindT : x_bindsT) {
          assert Tools.isTermAppl(x_bindT) && Tools.hasConstructor((IStrategoAppl) x_bindT, "Bind", 2);
          x_map.put(e_keycreate, e_valcreate);
        }
      ]|, e |[ com.github.krukow.clj_lang.PersistentHashMap.create(x_map) ]|)
    where
      
      x_mapT := $[_[<newname>]];
      x_bindsT := $[_[<newname>]];
      x_map := $[_[<newname>]];
      x_bindT := $[_[<newname>]];
      x_keyclass := <ds-to-interp-terms-types-name> skey;
      x_valclass := <ds-to-interp-terms-types-name> sval;
      (bstm0*, e_keycreate) := <ds-to-interp-sorts-to-create-arg(|x_bindT)> (e |[ 0 ]|, skey);
      (bstm1*, e_valcreate) := <ds-to-interp-sorts-to-create-arg(|x_bindT)> (e |[ 1 ]|, sval)

  ds-to-interp-sorts-to-create-arg(|x_term):
    (e, sref@SimpleSort("String")) -> ([], e |[ Tools.stringAt(x_term, e).stringValue() ]|)

  ds-to-interp-sorts-to-create-arg(|x_term):
    (e, sref@SimpleSort("Int")) -> ([], e |[ Tools.intAt(x_term, e).intValue() ]|)

  ds-to-interp-sorts-to-create-arg(|x_term):
    (e, sref@SimpleSort("Bool")) -> (
      bstm* |[
        IStrategoAppl x_tmp1 = Tools.applAt(x_term, e);
        assert Tools.hasConstructor(x_tmp1, "True", 0) || Tools.hasConstructor(x_tmp1, "False", 0);
      ]|, e |[ Tools.hasConstructor(x_tmp1, "True", 0) ? true : false ]|)
    where
      x_tmp1 := $[_[<newname>]]
    
  ds-to-interp-sorts-to-params = is-list; map-with-index(ds-to-interp-sort-to-param)
  
  ds-to-interp-sort-to-param:
    (i, s) -> param |[ x_sortclass x_name ]|
    where
      x_sortclass := <ds-to-interp-terms-types-name> s;
      x_name := $[_[i]]
  
  ds-to-interp-sorts-to-finits = is-list; map-with-index(ds-to-interp-sort-to-finit)
  
  ds-to-interp-sort-to-finit:
    (i, _) -> bstm |[ this.x_name = x_name; ]|
    where
      x_name := $[_[i]]

  ds-to-interp-sorts-to-fdecs = is-list; map-with-index(ds-to-interp-sort-to-fdec)
  
  ds-to-interp-sort-to-fdec:
    (i, s) -> class-body-dec |[ private final x_sortclass x_name; ]|
    where
      x_sortclass := <ds-to-interp-terms-types-name> s;
      x_name := $[_[i]]

  ds-to-interp-sorts-to-fgets = is-list; map-with-index(ds-to-interp-sort-to-fget)
  
  ds-to-interp-sort-to-fget:
    (i, s) ->
      class-body-dec |[
        public x_sortclass x_getname() {
          return x_name;
        }
      ]|
    where
      x_sortclass := <ds-to-interp-terms-types-name> s;
      x_getname := $[get_[i]];
      x_name := $[_[i]]

  ds-to-interp-sorts-to-frefs = is-list; map-with-index(ds-to-interp-sort-to-fref)
  
  ds-to-interp-sort-to-fref:
    (i, _) -> e |[ x_name ]|
    where
      x_name := $[_[i]]

rules /* type system class */

  ds-to-interp-terms-types-signatures:
    sig-sec* ->
      compilation-unit |[
        package ~x:<TopPackageName>;

        import com.oracle.truffle.api.dsl.TypeSystem;
        import ~x:$[[<TermsPackageName>].*];
        @TypeSystem({ ~type* })
        public class Types {
          
        }
      ]|
    where 
      filter(?Sorts(<id>) + ?Constructors(<id>) + ?NativeDataTypes(<id>));
      concat;
      qsort(?(ConsDecl(_, _, _, _), SortDecl(_)) + ?(SortDecl(_), NativeBaseTypeDecl(_, _, _)) + ?(ConsDecl(_, _, _, _), NativeBaseTypeDecl(_, _, _)));
      map(ds-to-interp-terms-types-name);
      map(!Lit(Class(ClassOrInterfaceType(TypeName(Id(<id>)), None())))) => type*

rules /* term building */

  ds-to-inter-terms-sortbuilding = is-list; fetch-elem(?Sorts(<id>)); map(ds-to-interp-terms-sortbuilding)
  
  ds-to-interp-terms-sortbuilding:
    dec@SortDecl(s) -> 
      compilation-unit |[
        package ~x:<TermBuildPackageName>;
  
        import ~x:$[[<TermsPackageName>].[<ds-to-interp-terms-types-name> dec]];
        import ~x:$[[<TopPackageName>].TypesGen];
        
        import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.TermBuild;
        import com.oracle.truffle.api.frame.VirtualFrame;
        import com.oracle.truffle.api.nodes.UnexpectedResultException;
        import com.oracle.truffle.api.source.SourceSection;
        
        public abstract class x_class extends TermBuild {
        
          public x_class(SourceSection source) {
            super(source);
          }
        
          public x_sortclass x_execmethod(VirtualFrame frame)
              throws UnexpectedResultException {
            return TypesGen.x_expectmethod(executeGeneric(frame));
          }
        
        }
      ]|
    where
      x_class := $[A[<ds-to-interp-terms-types-name> dec]Build];
      x_sortclass := <ds-to-interp-terms-types-name> dec;
      x_execmethod := $[execute[x_sortclass]];
      x_expectmethod := $[expect[x_sortclass]]

  ds-to-interp-terms-building = is-list; fetch-elem(?Constructors(<id>)); map(ds-to-interp-terms-building)
  
  ds-to-interp-terms-building:
    dec@ConsDecl(_, kid*, s, _) ->
      compilation-unit |[
        package ~x:<TermBuildPackageName>;
      
        import ~x:$[[<TermsPackageName>].*];
        import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.*;
        
        import com.oracle.truffle.api.dsl.NodeChild;
        import com.oracle.truffle.api.dsl.NodeChildren;
        import com.oracle.truffle.api.dsl.Specialization;
        import com.oracle.truffle.api.source.SourceSection;

        @NodeChildren({ ~child* })
        public abstract class x_class extends ~x:$[A[<ds-to-interp-terms-types-name> s]Build] {

          public x_class(SourceSection source) {
            super(source);
          }
          
          @Specialization
          public x_termclass doTyped(param0*) {
            return new x_termclass(e0*);
          }
          
        }
      ]|
    where
      x_class := $[[<ds-to-interp-terms-types-name> dec]Build];
      child* := <ds-to-interp-terms-building-childannos> kid*;
      x_termclass := <ds-to-interp-terms-types-name> dec;
      param0* := <ds-to-interp-terms-building-params> kid*;
      e0* := <ds-to-interp-terms-building-exprs> kid*

  ds-to-interp-terms-building-childannos = map-with-index(ds-to-interp-terms-building-childanno)
  
  ds-to-interp-terms-building-childanno:
    (i, s) -> anno |[ @NodeChild(value = ~e:Lit(String([Chars($[tb_[i]])])), type = TermBuild.class) ]|
  
  ds-to-interp-terms-building-params = map-with-index(ds-to-interp-terms-building-param)
  
  ds-to-interp-terms-building-param:
    (i, s) -> param |[ final ~x:<ds-to-interp-terms-types-name> s ~x:$[tb_[i]] ]|

  ds-to-interp-terms-building-exprs = map-with-index(ds-to-interp-terms-building-expr)
  
  ds-to-interp-terms-building-expr:
    (i, _) -> e |[ ~x:$[tb_[i]] ]|

rules /* term matching */

  ds-to-interp-terms-matching = is-list; fetch-elem(?Constructors(<id>)); map(ds-to-interp-terms-matching)
  
  ds-to-interp-terms-matching:
    dec@ConsDecl(_, kid*, _, _) -> 
      compilation-unit |[
        package ~x:<TermMatchPackageName>;
        
        import ~x:<TermsPackageName>.x_termclass;
        import org.metaborg.meta.lang.dynsem.interpreter.nodes.matching.MatchPattern;
        
        import com.oracle.truffle.api.dsl.Specialization;
        import com.oracle.truffle.api.frame.VirtualFrame;
        import com.oracle.truffle.api.source.SourceSection;
        
        public abstract class x_matcherclass extends MatchPattern {
        
          ~fdec*
        
          public x_matcherclass(SourceSection source, param0*) {
            super(source);
            bstm0*
          }
        
          @Specialization
          public boolean execute(x_termclass term, VirtualFrame frame) {
            return e1;
          }
        }
      ]|
    where
      x_termclass := <ds-to-interp-terms-types-name> dec;
      x_matcherclass := $[[x_termclass]MatchPattern];
      fdec* := <ds-to-interp-terms-matching-fdecs> kid*; 
      param0* := <ds-to-interp-terms-matching-initparams> kid*;
      bstm0* := <ds-to-interp-terms-matching-finits> kid*;
      e1 := <foldr(!e |[ true ]|, ds-to-interp-terms-matching-matchdescend)> <range; reverse> (1, <length; inc> kid*)
      
  ds-to-interp-terms-matching-initparams = map-with-index(ds-to-interp-terms-matching-initparam)
  
  ds-to-interp-terms-matching-initparam:
    (i, s) -> param |[ MatchPattern ~x:$[p_[i]] ]|

  ds-to-interp-terms-matching-fdecs = map-with-index(ds-to-interp-terms-matching-fdec)
  
  ds-to-interp-terms-matching-fdec:
    (i, _) -> class-body-dec |[ @Child protected MatchPattern ~x:$[p_[i]]; ]|

  ds-to-interp-terms-matching-finits = map-with-index(ds-to-interp-terms-matching-finit)
  
  ds-to-interp-terms-matching-finit:
    (i, s) -> bstm |[ this.~x:$[p_[i]] = ~x:$[p_[i]]; ]|

  ds-to-interp-terms-matching-matchdescend:
    (i, e) -> e |[ e && ~x:$[p_[i]].execute(term.~x:$[get_[i]](), frame) ]|

rules /* utils */

  ds-to-interp-terms-report-unsupported = debug(!"Unsupported signature section "); ![]

