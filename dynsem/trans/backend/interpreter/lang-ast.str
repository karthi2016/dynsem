module backend/interpreter/lang-ast

imports
  include/ds
  backend/interpreter/utils
  libjava-front
  editor-common.generated

rules
  
  ds-to-interp-terms-module =
    ?Module(_, <fetch-elem(?Signatures(sig*))>);
    debug(!"generating term classes");
    <ds-to-interp-terms-signatures-top; ds-to-interp-write-classes(|<TermsPackageName>)> sig*;
    debug(!"generating typesystem class");
    <ds-to-interp-terms-types-signatures; MkSingleton; ds-to-interp-write-classes(|<TopPackageName>)> sig*;
    debug(!"generating termbuilding sort-classes");
    <ds-to-inter-terms-sortbuilding; ds-to-interp-write-classes(|<TermBuildPackageName>)> sig*;
    debug(!"generating termbuilding classes");
    <ds-to-interp-terms-building; ds-to-interp-write-classes(|<TermBuildPackageName>)> sig*;
    debug(!"generating termmatching classes");
    <ds-to-interp-terms-matching; ds-to-interp-write-classes(|<TermMatchPackageName>)> sig*;
    debug(!"generating term registry class");
    <filter(?Constructors(<id>) + ?NativeOperators(<id>)); concat; ds-to-interp-terms-registry; MkSingleton; ds-to-interp-write-classes(|<TopPackageName>)> sig*;
    debug(!"done generating classes")

rules /* Sort & Constructor classes */

  ds-to-interp-terms-signatures-top:
    sig* -> [sort-class*, cons-class*]
    where
      sort-dec* := <fetch-elem(?Sorts(<id>))> sig*;
      cons-dec* := <fetch-elem(?Constructors(<id>))> sig*;
      sort-class* := <map(ds-to-interp-terms-sortdecl(|cons-dec*))> sort-dec*;
      cons-class* := <map(ds-to-interp-terms-consdecl)> cons-dec*
    
  ds-to-interp-terms-sortdecl(|cons-dec*):
    dec@SortDecl(s) ->
      compilation-unit |[
        package ~x:<TermsPackageName>;
        
        import org.spoofax.interpreter.core.Tools;
        import metaborg.meta.lang.dynsem.interpreter.terms.IConTerm;
        import org.spoofax.interpreter.terms.*;
        
        public abstract class x_class implements IConTerm {
          public static x_class create(IStrategoTerm term) {
            assert term != null;
            bstm0*
            bstm1
          }
        }
      ]|
    where
      x_class := <ds-to-interp-terms-types-name> dec;
      appl-cons-dec* := <filter(?ConsDecl(_, _, SimpleSort(s),_))> cons-dec*; 
      bstm0* := <map(ds-to-interp-terms-sortdec-createdisp)> appl-cons-dec*;
      impl-consdec* := <filter(?ConsDecl(_, [_], SimpleSort(s), Annos([ImplicitAnno()])))> cons-dec*;
      bstm1 := <foldr(! bstm |[ throw new IllegalStateException("Unsupported term: " + term); ]|, ds-to-interp-terms-sortdec-impldisp)> impl-consdec*

  ds-to-interp-terms-sortdec-createdisp:
    dec@ConsDecl(name, kid*, _, _) ->
      bstm |[
        if (Tools.isTermAppl(term) && Tools.hasConstructor((IStrategoAppl) term, ~e:Lit(String([Chars(name)])), ~i:<length; int-to-string> kid*)) {
          return ~x:<ds-to-interp-terms-types-name> dec.create(term);
        }
      ]| 

  ds-to-interp-terms-sortdec-impldisp:
    (dec@ConsDecl(name, [sref@SimpleSort(_)], _, _), bstm0) ->
      bstm |[
        try {
          return new x_class(e_create);
        } catch (IllegalStateException ilsex) {
          bstm0
        }
      ]|
    where
      x_class := <ds-to-interp-terms-types-name> dec;
      e_create := <ds-to-interp-terms-sortdec-impldisp-constr> sref 
  
  ds-to-interp-terms-sortdec-impldisp-constr:
    sref@SimpleSort(s) -> e |[ ~x:<ds-to-interp-terms-types-name> sref.create(term) ]|
    where
      <not(is-builtin-type)> s

  ds-to-interp-terms-sortdec-impldisp-constr:
    sref@SimpleSort("String") -> e |[ ((IStrategoString) term).stringValue() ]|

  ds-to-interp-terms-sortdec-impldisp-constr:
    sref@SimpleSort("Int") -> e |[ ((IStrategoInt) term).intValue() ]|

  ds-to-interp-terms-consdecl:
    dec@ConsDecl(name, kid*, s, _) ->
      compilation-unit |[
        package ~x:<debug(!"ba1a1c1 "); TermsPackageName; debug(!"ba1a1c2 ")>;
        
        import org.spoofax.interpreter.core.Tools;
        import org.spoofax.interpreter.terms.IStrategoAppl;
        import org.spoofax.interpreter.terms.IStrategoTerm;
        
        public class x_classname extends ~x:<ds-to-interp-terms-types-name> s {

          public final static String CONSTRUCTOR = ~e:Lit(String([Chars(name)]));
          public final static int ARITY = ~i:<length; int-to-string> kid*;

          ~fdec0*

          ~fget0*

          public x_classname(param0*) {
            bstm0*
          }

          public static x_classname create(IStrategoTerm term) {
            assert term != null;
            assert Tools.isTermAppl(term);
            assert Tools.hasConstructor((IStrategoAppl) term, CONSTRUCTOR, ARITY);
            return new x_classname(e1*);
          }
          
          @Override
          public String constructor() {
            return CONSTRUCTOR;
          }
        
          @Override
          public int arity() {
            return ARITY;
          }
          
          @Override
          public Object[] allSubterms() {
            return new Object[] { e0* };
          }
        }
      ]|
    where
      x_classname := <ds-to-interp-terms-types-name> dec;
      param0* := <ds-to-interp-sorts-to-params> kid*;
      bstm0* := <ds-to-interp-sorts-to-finits> kid*;
      fdec0* := <ds-to-interp-sorts-to-fdecs> kid*;
      fget0* := <ds-to-interp-sorts-to-fgets> kid*;
      e0* := <ds-to-interp-sorts-to-frefs> kid*;
      e1* := <map-with-index(ds-to-interp-sorts-to-create-arg)> kid*
  
  ds-to-interp-sorts-to-create-arg:
    (i, sref@SimpleSort(s)) -> e |[ ~x:<ds-to-interp-terms-types-name> sref.create(term.getSubterm(~i:<dec; int-to-string> i)) ]|
    where
      <not(is-builtin-type)> s

  ds-to-interp-sorts-to-create-arg:
    (i, sref@SimpleSort("String")) -> e |[ Tools.stringAt(term, ~i:<int-to-string> i).stringValue() ]|

  ds-to-interp-sorts-to-create-arg:
    (i, sref@SimpleSort("Int")) -> e |[ Tools.intAt(term, ~i:<int-to-string> i).intValue() ]|
  
  ds-to-interp-sorts-to-params = is-list; map-with-index(ds-to-interp-sort-to-param)
  
  ds-to-interp-sort-to-param:
    (i, s) -> param |[ x_sortclass x_name ]|
    where
      x_sortclass := <ds-to-interp-terms-types-name> s;
      x_name := $[_[i]]
  
  ds-to-interp-sorts-to-finits = is-list; map-with-index(ds-to-interp-sort-to-finit)
  
  ds-to-interp-sort-to-finit:
    (i, _) -> bstm |[ this.x_name = x_name; ]|
    where
      x_name := $[_[i]]

  ds-to-interp-sorts-to-fdecs = is-list; map-with-index(ds-to-interp-sort-to-fdec)
  
  ds-to-interp-sort-to-fdec:
    (i, s) -> class-body-dec |[ private final x_sortclass x_name; ]|
    where
      x_sortclass := <ds-to-interp-terms-types-name> s;
      x_name := $[_[i]]

  ds-to-interp-sorts-to-fgets = is-list; map-with-index(ds-to-interp-sort-to-fget)
  
  ds-to-interp-sort-to-fget:
    (i, s) ->
      class-body-dec |[
        public x_sortclass x_getname() {
          return x_name;
        }
      ]|
    where
      x_sortclass := <ds-to-interp-terms-types-name> s;
      x_getname := $[get_[i]];
      x_name := $[_[i]]

  ds-to-interp-sorts-to-frefs = is-list; map-with-index(ds-to-interp-sort-to-fref)
  
  ds-to-interp-sort-to-fref:
    (i, _) -> e |[ x_name ]|
    where
      x_name := $[_[i]]

rules /* type system class */

  ds-to-interp-terms-types-signatures:
    sig-sec* ->
      compilation-unit |[
        package ~x:<TopPackageName>;

        import com.oracle.truffle.api.dsl.TypeSystem;
        import ~x:$[[<TermsPackageName>].*];
        @TypeSystem({ ~type* })
        public class Types {
          
        }
      ]|
    where 
      filter(?Sorts(<id>) + ?Constructors(<id>));
      concat;
      qsort(?(ConsDecl(_, _, _, _), SortDecl(_)));
      map(ds-to-interp-terms-types-name);
      map(!Lit(Class(ClassOrInterfaceType(TypeName(Id(<id>)), None())))) => type*

rules /* term building */

  ds-to-inter-terms-sortbuilding = is-list; fetch-elem(?Sorts(<id>)); map(ds-to-interp-terms-sortbuilding)
  
  ds-to-interp-terms-sortbuilding:
    dec@SortDecl(s) -> 
      compilation-unit |[
        package ~x:<TermBuildPackageName>;
  
        import ~x:$[[<TermsPackageName>].[<ds-to-interp-terms-types-name> dec]];
        import ~x:$[[<TopPackageName>].TypesGen];
        
        import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.TermBuild;
        import com.oracle.truffle.api.frame.VirtualFrame;
        import com.oracle.truffle.api.nodes.UnexpectedResultException;
        import com.oracle.truffle.api.source.SourceSection;
        
        public abstract class x_class extends TermBuild {
        
          public x_class(SourceSection source) {
            super(source);
          }
        
          public x_sortclass x_execmethod(VirtualFrame frame)
              throws UnexpectedResultException {
            return TypesGen.x_expectmethod(executeGeneric(frame));
          }
        
        }
      ]|
    where
      x_class := $[A[<ds-to-interp-terms-types-name> dec]Build];
      x_sortclass := <ds-to-interp-terms-types-name> dec;
      x_execmethod := $[execute[x_sortclass]];
      x_expectmethod := $[expect[x_sortclass]]

  ds-to-interp-terms-building = is-list; fetch-elem(?Constructors(<id>)); map(ds-to-interp-terms-building)
  
  ds-to-interp-terms-building:
    dec@ConsDecl(_, kid*, s, _) ->
      compilation-unit |[
        package ~x:<TermBuildPackageName>;
      
        import ~x:$[[<TermsPackageName>].*];
        import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.*;
        
        import com.oracle.truffle.api.dsl.NodeChild;
        import com.oracle.truffle.api.dsl.NodeChildren;
        import com.oracle.truffle.api.dsl.Specialization;
        import com.oracle.truffle.api.source.SourceSection;

        @NodeChildren({ ~child* })
        public abstract class x_class extends ~x:$[A[<ds-to-interp-terms-types-name> s]Build] {

          public x_class(SourceSection source) {
            super(source);
          }
          
          @Specialization
          public x_termclass doTyped(param0*) {
            return new x_termclass(e0*);
          }
          
        }
      ]|
    where
      x_class := $[[<ds-to-interp-terms-types-name> dec]Build];
      child* := <ds-to-interp-terms-building-childannos> kid*;
      x_termclass := <ds-to-interp-terms-types-name> dec;
      param0* := <ds-to-interp-terms-building-params> kid*;
      e0* := <ds-to-interp-terms-building-exprs> kid*

  ds-to-interp-terms-building-childannos = map-with-index(ds-to-interp-terms-building-childanno)
  
  ds-to-interp-terms-building-childanno:
    (i, s) -> anno |[ @NodeChild(value = ~e:Lit(String([Chars($[tb_[i]])])), type = TermBuild.class) ]|
  
  ds-to-interp-terms-building-params = map-with-index(ds-to-interp-terms-building-param)
  
  ds-to-interp-terms-building-param:
    (i, s) -> param |[ final ~x:<ds-to-interp-terms-types-name> s ~x:$[tb_[i]] ]|

  ds-to-interp-terms-building-exprs = map-with-index(ds-to-interp-terms-building-expr)
  
  ds-to-interp-terms-building-expr:
    (i, _) -> e |[ ~x:$[tb_[i]] ]|

rules /* term matching */

  ds-to-interp-terms-matching = is-list; fetch-elem(?Constructors(<id>)); map(ds-to-interp-terms-matching)
  
  ds-to-interp-terms-matching:
    dec@ConsDecl(_, kid*, _, _) -> 
      compilation-unit |[
        package ~x:<TermMatchPackageName>;
        
        import ~x:<TermsPackageName>.x_termclass;
        import org.metaborg.meta.lang.dynsem.interpreter.nodes.matching.MatchPattern;
        
        import com.oracle.truffle.api.dsl.Specialization;
        import com.oracle.truffle.api.frame.VirtualFrame;
        import com.oracle.truffle.api.source.SourceSection;
        
        public abstract class x_matcherclass extends MatchPattern {
        
          ~fdec*
        
          public x_matcherclass(SourceSection source, param0*) {
            super(source);
            bstm0*
          }
        
          @Specialization
          public boolean execute(x_termclass term, VirtualFrame frame) {
            return e1;
          }
        }
      ]|
    where
      x_termclass := <ds-to-interp-terms-types-name> dec;
      x_matcherclass := $[[x_termclass]MatchPattern];
      fdec* := <ds-to-interp-terms-matching-fdecs> kid*; 
      param0* := <ds-to-interp-terms-matching-initparams> kid*;
      bstm0* := <ds-to-interp-terms-matching-finits> kid*;
      e1 := <foldr(!e |[ true ]|, ds-to-interp-terms-matching-matchdescend)> <range; reverse> (1, <length; inc> kid*)
      
  ds-to-interp-terms-matching-initparams = map-with-index(ds-to-interp-terms-matching-initparam)
  
  ds-to-interp-terms-matching-initparam:
    (i, s) -> param |[ MatchPattern ~x:$[p_[i]] ]|

  ds-to-interp-terms-matching-fdecs = map-with-index(ds-to-interp-terms-matching-fdec)
  
  ds-to-interp-terms-matching-fdec:
    (i, _) -> class-body-dec |[ @Child protected MatchPattern ~x:$[p_[i]]; ]|

  ds-to-interp-terms-matching-finits = map-with-index(ds-to-interp-terms-matching-finit)
  
  ds-to-interp-terms-matching-finit:
    (i, s) -> bstm |[ this.~x:$[p_[i]] = ~x:$[p_[i]]; ]|

  ds-to-interp-terms-matching-matchdescend:
    (i, e) -> e |[ e && ~x:$[p_[i]].execute(term.~x:$[get_[i]](), frame) ]|

rules /* term registry */


  ds-to-interp-terms-registry:
    decl* ->
      compilation-unit |[
        package ~x:<TopPackageName>;
        
        import java.util.HashMap;
        import java.util.Map;
        
        import ~x:<TermsPackageName>.*;
        import ~x:<TermBuildPackageName>.*;
        import ~x:<TermMatchPackageName>.*;
        
        import metaborg.meta.lang.dynsem.interpreter.terms.ITerm;
        import org.spoofax.interpreter.terms.IStrategoTerm;
        import org.metaborg.meta.lang.dynsem.interpreter.ITermRegistry;
        import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.*;
        import org.metaborg.meta.lang.dynsem.interpreter.nodes.matching.*;
        
        import com.oracle.truffle.api.source.SourceSection;
        
        public class TermRegistry implements ITermRegistry {
        
          private final Map<String, ITermBuildFactory> builderFactories = new HashMap<String, ITermBuildFactory>();
          private final Map<String, ITermMatchPatternFactory> matcherFactories = new HashMap<String, ITermMatchPatternFactory>();
          private final Map<String, ITermBuildFactory> nativeFactories = new HashMap<String, ITermBuildFactory>();
        
          public TermRegistry() {
            init();
          }
        
          private void init() {
            bstm0*
            bstm1*
          }
          
          @Override
          public ITerm parseProgramTerm(IStrategoTerm p) {
            return ~x:<ds-to-interp-terms-types-name> SimpleSort(<TargetStartSort>).create(p);
          }
          
          @Override
          public ITermBuildFactory lookupBuildFactory(String constr, int arity) {
            return builderFactories.get(constr + "/" + arity);
          }
        
          @Override
          public ITermMatchPatternFactory lookupMatchFactory(String constr, int arity) {
            return matcherFactories.get(constr + "/" + arity);
          }
          
          @Override
          public ITermBuildFactory lookupNativeOpBuildFactory(String constr, int arity) {
            return nativeFactories.get(constr + "/" + arity);
          }
        }
      ]|
    where
      debug(!1);
      (consdecl*, natopdecl*) := <partition(?ConsDecl(_, _, _, _))> decl*; 
      debug(!2);
      bstm0* := <ds-to-interp-terms-registry-inits> consdecl*;
      debug(!3);
      bstm1* := <ds-to-interp-natopterms-registry-inits> natopdecl*
      ;debug(!4)

  ds-to-interp-terms-registry-inits = mapconcat(ds-to-interp-terms-registry-init)
  
  ds-to-interp-terms-registry-init:
    dec@ConsDecl(name, kid*, _, _) ->
      bstm* |[
       builderFactories.put(e_conkey, new ITermBuildFactory() {
    
          @Override
          public x_termbuildclass apply(SourceSection source,
              TermBuild... children) {
            return x_termbuildNODEGEN.create(source, e1*);
          }
        });

        matcherFactories.put(e_conkey, new ITermMatchPatternFactory() {
    
          @Override
          public MatchPattern apply(SourceSection source,
              MatchPattern... children) {
            return x_termmatchNODEGEN.create(source, e2*);
          }
        });
      ]|
    with
      e_conkey := Lit(String([Chars($[[name]/[<length> kid*]])]));
      x_termbuildclass := $[[<ds-to-interp-terms-types-name> dec]Build];
      x_termbuildNODEGEN := $[[x_termbuildclass]NodeGen];
      x_termclass := <ds-to-interp-terms-types-name> dec;
      x_termmatchNODEGEN := $[[x_termclass]MatchPatternNodeGen];
      e1* := <map-with-index(\ (i, s) -> e |[ children[~i:<dec; int-to-string> i] ]| \)> kid*;
      e2* := <map-with-index(\ (i, _) -> e |[ children[~i:<dec; int-to-string> i] ]| \)> kid*

  ds-to-interp-natopterms-registry-inits = debug(!"4a "); mapconcat(debug(!"4b "); ds-to-interp-natopterms-registry-init; debug(!"4c ")); debug(!"4d ")

  ds-to-interp-natopterms-registry-init:
    dec@NativeOpDecl(name, kid*, _) -> 
      bstm* |[
        nativeFactories.put(e_conkey, new ITermBuildFactory() {
    
          @Override
          public TermBuild apply(SourceSection source,
              TermBuild... children) {
            return ~x:<debug(!9); NativePackageName; debug(!10)>.x_natop.create(source, e1*);
          }
        });
      ]|
    where
      debug(!5);
      e_conkey := Lit(String([Chars($[[name]/[<length> kid*]])]));
      debug(!6);
      x_natop := $[[name]_[<length> kid*]];
      debug(!7);
      e1* := <map-with-index(\ (i, s) -> e |[ children[~i:<dec; int-to-string> i] ]| \)> kid*
      ;debug(!8)

rules /* utils */

  ds-to-interp-terms-types-name:
    SortDecl(s) -> $[I[s]Term]

  ds-to-interp-terms-types-name:
    SimpleSort(s) -> $[I[s]Term]
    where
      <not(is-builtin-type)> s
  
  ds-to-interp-terms-types-name:
    SimpleSort("String") -> $[String]

  ds-to-interp-terms-types-name:
    SimpleSort("Int") -> $[int]

  ds-to-interp-terms-types-name:
    SimpleSort("Bool") -> $[boolean]
  
  is-builtin-type = ?"String" + ?"Int" + ?"Bool"
  
  ds-to-interp-terms-types-name:
    ConsDecl(name, child*, _, _) -> $[[name]_[<length> child*]_Term]

  ds-to-interp-terms-report-unsupported = debug(!"Unsupported signature section "); ![]

