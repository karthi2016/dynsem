module backend/interpreter/utils

imports
  stratego/metaborg
  lib-ds
  backend/java-backend/utils/java-utils
  
rules

  ds-to-interp-init-options(|path, project-path) = 
    rules(
      CurrentFilePath: _ -> path
      ProjectPath: _ -> project-path
      PropertiesFile: _ -> $[[project-path]/dynsem.properties]
      LanguageName: _ -> <PropertiesFile; read-property(|"source.langname", "MISSING"); escape-java-id>
    );
    rules(
      TableSourceFile: _ -> $[[project-path][<PropertiesFile; read-property(|"source.table", "/target/metaborg/sdf.tbl")>]]
      SourceVersion: _ -> <PropertiesFile; read-property(|"source.version", "0.1")>
      SourceMimeType: _ -> <PropertiesFile; read-property(|"source.mimetype", $[application/x-[<LanguageName>]])>
      SourceStartSymbol: _ -> <PropertiesFile; read-property(|"source.startsymbol", "MISSING")>
      ReductionStartConstrName: _ -> <PropertiesFile; read-property(|"source.initconstructor.name", "MISSING")>
      ReductionStartConstrArity: _ -> <PropertiesFile; read-property(|"source.initconstructor.arity", "MISSING")>
      
      GenProject: _ -> $[[project-path][<PropertiesFile; read-property(|"project.path", project-path)>]]
      CleanTarget: _ -> <PropertiesFile; read-property(|"project.clean", "false"); ?"true">
      
      JavaGenDir: _ -> $[[<GenProject>]/[<PropertiesFile; read-property(|"project.javapath", "src/main/java")>]]
      TopPackageName: _ -> <PropertiesFile; read-property(|"project.javapackage", $[[<LanguageName>].interpreter.generated])>
      RelativeSpecTargetFile: _ -> <PropertiesFile; read-property(|"project.specpath", "/src/main/resources/specification.aterm")>
      SpecTargetFile: _ -> $[[<GenProject>]/[<RelativeSpecTargetFile>]]
      RelativeTableTargetFile: _ -> <PropertiesFile; read-property(|"project.tablepath", "/src/main/resources/parsetable.tbl")>      
      TableTargetFile: _ -> $[[<GenProject>]/[<RelativeTableTargetFile>]]
      NativePackageName: _ -> <PropertiesFile; read-property(|"project.nativepackage", $[[<LanguageName>].interpreter.natives])>
      RuleRegistry: _ -> <PropertiesFile; read-property(|"project.ruleregistry", "org.metaborg.meta.lang.dynsem.interpreter.nodes.rules.RuleRegistry")>
      DesugarTransform: _ -> <PropertiesFile; read-property(|"project.preprocessor", "org.metaborg.meta.lang.dynsem.interpreter.terms.ITermTransformer.IDENTITY")>
      
      TermsPackageName: _ -> $[[<TopPackageName>].terms]
      TermBuildPackageName: _ -> $[[<TermsPackageName>].build]
      TermMatchPackageName: _ -> $[[<TermsPackageName>].match]
    )

  ds-to-interp-write-classes(|package) = emit-java-classes(overwrite-merge-strategy, id | package, <JavaGenDir>)
  
  ds-to-interp-write-aterm = fail
