module backend/interpreter/utils

imports
  libspoofax/resource/path
  lib-ds
  backend/utils/utils

signature
  sorts
    DSOpt
 
  constructors
    FilePath : DSOpt
    ProjectPath : DSOpt
    LangName : DSOpt
    LangFileExtens: DSOpt
    TableSource : DSOpt
    LangVersion : DSOpt
    MimeType : DSOpt
    StartSymbol : DSOpt
    StartConstrName : DSOpt
    StartConstrArity : DSOpt
    GenProject : DSOpt
    CreateProject : DSOpt
    CleanProject : DSOpt
    EnableBacktracking : DSOpt
    EnableSafeComponents : DSOpt
    EnableTermCaching : DSOpt
    EnableDebug : DSOpt
    MavenGroupId : DSOpt
    MavenArtifactId : DSOpt
    JavaGenDirRel : DSOpt
    JavaGenDirAbs : DSOpt
    TopPkg : DSOpt
    TermPkg : DSOpt
    MatchPkg : DSOpt
    BuildPkg : DSOpt
    NativePkg : DSOpt
    RuleRegistry : DSOpt
    PreProcessor : DSOpt
    TargetSpecRel : DSOpt
    TargetSpecAbs : DSOpt
    TargetTableRel : DSOpt
    TargetTableAbs : DSOpt
    JVMArgs : DSOpt
    GenJUnit : DSOpt
    TestJavaDir : DSOpt
    TestJavaDirAbs : DSOpt
    TestsDir : DSOpt
    TestPkg : DSOpt
    
rules

  get-opt(|prop) = <DSOpt> prop
  
  get-opt:
    prop -> <DSOpt> prop

  ds-to-interp-init-options(|path, project-path) =
  with(
    <ds-to-interp-get-options> (path, project-path);
    filter(\ (opt,val) -> <rules(DSOpt:+ opt -> val)> where not("false" := val) \)
  )
 
  ds-to-interp-get-options:
    (path, project-path) -> [
      (FilePath(), path),
      (ProjectPath(), project-path),
      (LangName(), langname),
      (LangFileExtens(), fileextensions),
      (TableSource(), tbl-source),
      (LangVersion(), lang-ver),
      (MimeType(), lang-mime),
      (StartSymbol(), start-symb),
      (StartConstrName(), initcon-name),
      (StartConstrArity(), initcon-arity),
      (GenProject(), genproject-path),
      (CreateProject(), do-create-genproject),
      (CleanProject(), do-clean-genproject),
      (EnableBacktracking(), do-enable-backtracking),
      (EnableSafeComponents(), do-safe-components),
      (EnableTermCaching(), do-term-caching),
      (EnableDebug(), do-debug),
      (MavenGroupId(), genproject-groupid),
      (MavenArtifactId(), genproject-artifactid),
      (JavaGenDirRel(), java-gendir-rel),
      (JavaGenDirAbs(), java-gendir-abs),
      (TopPkg(), gen-pkg),
      (TermPkg(), terms-pkg),
      (BuildPkg(), tbuild-pkg),
      (MatchPkg(), tmatch-pkg),
      (NativePkg(), native-pkg),
      (RuleRegistry(), rulereg-class),
      (PreProcessor(), preprocess-class),
      (TargetSpecRel(), target-specfile-rel),
      (TargetSpecAbs(), target-specfile-abs),
      (TargetTableRel(), target-tblfile-rel),
      (TargetTableAbs(), target-tblfile-abs),
      (JVMArgs(), jvm-args),
      (GenJUnit(), do-generate-junit),
      (TestJavaDir(), tests-java-dir),
      (TestJavaDirAbs(), tests-java-dir-abs),
      (TestsDir(), tests-dir),
      (TestPkg(), tests-pkg)
    ]
    where
      local-project-path := <local-path> project-path;
      prop-file := $[[project-path]/dynsem.properties]
    with
      if <not(read-property(|"source.langname", ""))> prop-file
      then
        fatal-err(|"Could not find/read a dynsem.properties file")
      end
    where
      langname := <ds-to-interp-read-prop-required(|"source.langname"); ds-utils-java-escape-id> prop-file;
      fileextensions := <read-property(|"source.extensions", <lower-case> langname); string-tokenize(|[','])> prop-file;
      tbl-source := <read-property(|"source.table", "target/metaborg/sdf.tbl"); absolute-path(|local-project-path)> prop-file;
      lang-ver := <ds-to-interp-read-prop-required(|"source.version")> prop-file;
      lang-mime := <read-property(|"source.mimetype", $[application/x-[langname]])> prop-file;
      start-symb := <ds-to-interp-read-prop-required(|"source.startsymbol")> prop-file;
      initcon-name := <ds-to-interp-read-prop-required(|"source.initconstructor.name")> prop-file;
      initcon-arity := <ds-to-interp-read-prop-required(|"source.initconstructor.arity")> prop-file;
      genproject-path := <ds-to-interp-read-prop-required(|"project.path"); absolute-path(|local-project-path)> prop-file;
      do-create-genproject := <read-property(|"project.create", "false")> prop-file;
      do-clean-genproject := <read-property(|"project.clean", "false")> prop-file;
      do-enable-backtracking := <read-property(|"interpreter.fullbacktracking", "false")> prop-file;
      do-safe-components := <read-property(|"interpreter.safecomponents", "false")> prop-file;
      do-term-caching := <read-property(|"interpreter.termcaching", "false")> prop-file;
      do-debug := <read-property(|"interpreter.debug", "false")> prop-file;
      genproject-groupid := <ds-to-interp-read-prop-required(|"project.groupid")> prop-file;
      genproject-artifactid := <ds-to-interp-read-prop-required(|"project.artifactid")> prop-file;
      java-gendir-rel := <read-property(|"project.javapath", "src/main/java")> prop-file;
      java-gendir-abs := $[[genproject-path]/[java-gendir-rel]];
      gen-pkg := <read-property(|"project.javapackage", $[[<ds-utils-java-escape-id> genproject-groupid].[<ds-utils-java-escape-id> genproject-artifactid].generated])> prop-file;
      terms-pkg := $[[gen-pkg].terms];
      tbuild-pkg := $[[terms-pkg].build];
      tmatch-pkg := $[[terms-pkg].match];
      native-pkg := <read-property(|"project.nativepackage", $[[langname].interpreter.natives])> prop-file;
      tests-pkg := $[[gen-pkg].test];
      rulereg-class := <read-property(|"project.ruleregistry", "org.metaborg.meta.lang.dynsem.interpreter.nodes.rules.RuleRegistry")> prop-file;
      preprocess-class := <read-property(|"project.preprocessor", "org.metaborg.meta.lang.dynsem.interpreter.terms.ITermTransformer.IDENTITY")> prop-file;
      target-specfile-rel := <read-property(|"project.specpath", "src/main/resources/specification.aterm")> prop-file;
      target-specfile-abs := $[[genproject-path]/[target-specfile-rel]];
      target-tblfile-rel := <read-property(|"project.tablepath", "src/main/resources/parsetable.tbl")> prop-file;
      target-tblfile-abs := $[[genproject-path]/[target-tblfile-rel]];
      jvm-args := <read-property(|"interpreter.vmargs", "")> prop-file;
      do-generate-junit := <read-property(|"project.generatejunit", "false")> prop-file;
      tests-java-dir := <read-property(|"project.testjavapath", "src/test/java")> prop-file;
      tests-java-dir-abs := $[[genproject-path]/[tests-java-dir]];
      tests-dir := <read-property(|"project.testspath", "src/test/resources")> prop-file

  ds-to-interp-read-prop-required(|prop) =
    read-property(|prop, "N/A"); not(?"N/A" + ?"")
    <+ fatal-err(|$[Cannot read [prop] property])

  ds-to-interp-write-classes(|package) = ds-utils-java-emit-classes(id | package, <get-opt> JavaGenDirAbs())
