module backend/interpreter/desugar-for-interpreter

imports
  stratego/metaborg
  signatures/-
  backend/interpreter/signature
  analysis/-

rules

  desugar-for-interpreter-module:
    m@Module(_, _) -> Module($[[name]_natops], section*)
    where
      <m-in-analysis(desugar-for-interpreter); unmark-vars> m => Module(name, section*)

  desugar-for-interpreter =
    desugar-semantic-components;
    mark-rule-arguments;
    desugar-natives;
    desugar-list-reductions

rules /* rename arguments */

  mark-rule-arguments = alltd(?Rule(_, _, _); mark-rule-arguments-rule)
  
  mark-rule-arguments-rule:
    Rule(prem*, infer, MonoRelation(Source(lhs, rw), arrow, target))
      -> Rule(prem'*, infer, MonoRelation(Source(lhs', rw'), arrow, target'))
    with {| RenameArgument, NextArgument:
      rules(NextArgument: _ -> 1);
      lhs' := <try(mark-rule-arguments-bind-source)> lhs;
      rw' := <alltd(mark-rule-arguments-bind)> rw;
      prem'* := <alltd(mark-rule-arguments-read)> prem*;
      target' := <alltd(mark-rule-arguments-read)> target
    |}

  mark-rule-arguments-bind-source:
    Cast(var@Var(v), l@ListSort(_)) -> Cast(ArgBind(0), l)
    where
      rules(RenameArgument: VarRef(v) -> ArgRead(0){var})

  mark-rule-arguments-bind-source:
    As(var@Var(v), source) -> <alltd(mark-rule-arguments-bind)> source
    where
      rules(RenameArgument: VarRef(v) -> ArgRead(0){var})

  mark-rule-arguments-bind:
    r@Var(v) -> ArgBind(i)
    with
      i := <NextArgument>;
      rules(
        RenameArgument: VarRef(v) -> ArgRead(i){r}
        NextArgument: _ -> <inc> i
      )

  mark-rule-arguments-read = RenameArgument

  type-of:
    ArgRead(i){v} -> <type-of> v

rules /* native operators */

  desugar-natives = innermost(desugar-native-ops + desugar-native-types)

  desugar-native-ops:
    Con(c, k*) -> NativeOp(c, k*)
    where
      <lookup-def(|Constructors()); lookup-prop(|ConsKind())> (c, <length> k*) => NativeOpCons()

  desugar-native-types:
    SimpleSort(s) -> NativeType(s, ty-str)
    where
      ty-def := <lookup-def(|Types())> s;
      NativeSort() := <lookup-prop(|SortKind())> ty-def;
      ty-str := <lookup-prop(|NativeTypeJString()); unquote(?'"')> ty-def

  desugar-native-types:
    SortFunCall(name, recv, arg*) -> NativeFunCall(<type-of> recv, name, recv, arg*)
  
  type-of:
    NativeOp(c, k*) -> ty
    where
      ConstructorType(_, ty) := <lookup-def(|Constructors()); lookup-prop(|Type())> (c, <length> k*)
  
  type-of:
    NativeFunCall(srecv, name, _, _) -> ty
    where
      s-def := <lookup-def(|Types())> srecv;
      f-def := <lookup-native-fun-def(|name)> s-def;
      FunctionType(_, ty) := <lookup-prop(|Type())> f-def

rules /* desugar rule conclusion/premise source */

  desugar-semantic-components = alltd(desugar-rule-conclusion-source); alltd(desugar-relation-premise-source)

  desugar-rule-conclusion-source:
    Rule(p*, infer, Relation(Reads(ro*), Source(t, rw*), rel, tgt)) -> Rule(p*, infer, MonoRelation(Source(t, [ro*, rw*]), rel, tgt)) 

  desugar-relation-premise-source:
    Formula(Relation(Reads(ro*), Source(t, rw*), rel, tgt)) -> Formula(MonoRelation(Source(t, [ro*, rw*]), rel, tgt))

rules /* list reductions */

  desugar-list-reductions = alltd(desugar-list-reduction)
  
  desugar-list-reduction:
    Formula(MonoRelation(Source(t, rws), rel, target)) -> Formula(MonoRelation(Source(ListSource(t, ty), rws), rel, target))
    where
      <type-of> t => ty@ListType(_)
  