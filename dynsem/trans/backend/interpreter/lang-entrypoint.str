module backend/interpreter/lang-entrypoint

imports
  signatures/ds-sig
  libjava-front
  backend/interpreter/utils

rules /* language file. interpreter entry point */

  ds-to-interp-language-entrypoint =
    x_language := $[[<LanguageName>]Language];
    x_transformer := <DesugarTransform>;
    x_ruleregistry := <RuleRegistry>;
    !compilation-unit |[
    
      package ~x:<TopPackageName>;
      
      import java.io.IOException;
      import java.io.InputStream;
      import java.io.OutputStream;
      import java.io.PrintStream;
      import java.nio.file.Path;
      import java.nio.file.Paths;
      import java.util.concurrent.Callable;
      
      import org.metaborg.meta.lang.dynsem.interpreter.terms.ITerm;
      
      import ~x:<TopPackageName>.~x:$[[<LanguageName>]TermRegistry];
      import org.metaborg.meta.lang.dynsem.interpreter.DynSemContext;
      import org.metaborg.meta.lang.dynsem.interpreter.DynSemLanguage;
      import org.metaborg.meta.lang.dynsem.interpreter.DynSemPrimedRun;
      import org.metaborg.meta.lang.dynsem.interpreter.nodes.rules.RuleResult;
      import org.metaborg.meta.lang.dynsem.interpreter.nodes.rules.RuleRoot;
      import org.spoofax.interpreter.terms.IStrategoTerm;
      
      import com.oracle.truffle.api.CallTarget;
      import com.oracle.truffle.api.TruffleLanguage;
      import com.oracle.truffle.api.nodes.Node;
      import com.oracle.truffle.api.nodes.RootNode;
      import com.oracle.truffle.api.frame.VirtualFrame;
      import com.oracle.truffle.api.CompilerDirectives;
      import com.oracle.truffle.api.Truffle;
      import com.oracle.truffle.api.source.Source;
      import com.oracle.truffle.api.vm.PolyglotEngine;
      import com.oracle.truffle.api.vm.PolyglotEngine.Value;
      
      @TruffleLanguage.Registration(name = ~e:Lit(String([Chars(<LanguageName>)])), version = ~e:Lit(String([Chars(<SourceVersion>)])), mimeType = ~e:Lit(String([Chars(<SourceMimeType>)])))
      public class x_language extends DynSemLanguage {
      
        public final static String PARSE_TABLE = ~e:Lit(String([Chars(<RelativeTableTargetFile>)]));
        public final static String START_SYMBOL = ~e:Lit(String([Chars(<SourceStartSymbol>)]));
        public final static String SPEC_FILE = ~e:Lit(String([Chars(<RelativeSpecTargetFile>)]));
        public final static String MIME_TYPE = ~e:Lit(String([Chars(<SourceMimeType>)]));
        public final static String START_CONSTR_NAME = ~e:Lit(String([Chars(<ReductionStartConstrName>)]));
        public final static int START_CONSTR_ARITY = ~i:<ReductionStartConstrArity>;
        
        public final static x_language INSTANCE = new x_language();
      
        public x_language() {
          super();
          DynSemContext.LANGUAGE = this;
        }
        
        @Override
        public DynSemContext createDynSemContext(InputStream in, PrintStream out) {
          return createDynSemContext(in, out, Paths.get(SPEC_FILE), Paths.get(PARSE_TABLE));
        }

        public DynSemContext createDynSemContext(InputStream in, PrintStream out, Path specPath, Path tablePath) {
          return new DynSemContext(new ~x:$[[<LanguageName>]TermRegistry](),
                      new x_ruleregistry(specPath), tablePath, in, out);  
        }
      
        public static void main(String[] args) throws Exception {
          RuleResult res = evaluate(args[0], System.in, System.out, System.err);
          System.out.println(res.result);
        }
      
        public static RuleResult evaluate(String file, InputStream input, OutputStream output, OutputStream error) throws Exception {
          return getCallable(file, input, output, error).call();
        }
      
        public static Callable<RuleResult> getCallable(String file, InputStream input, OutputStream output, OutputStream error) {
          PolyglotEngine vm = PolyglotEngine.newBuilder().setIn(input)
              .setOut(output).setErr(error).build();
          assert vm.getLanguages().containsKey(MIME_TYPE);
          try {
            vm.eval(Source.fromFileName(file).withMimeType(MIME_TYPE));
          } catch (IOException ioex) {
            throw new RuntimeException("Eval failed", ioex);
          }
          Value prog = vm.findGlobalSymbol("INIT");
          return new Callable<RuleResult>() {
      
            @Override
            public RuleResult call() throws Exception {
              return prog.execute().as(RuleResult.class);
            }
          };
        }
  
        @Override
        protected CallTarget parse(Source code, Node context, String... argumentNames) throws IOException {
      
          DynSemContext ctx = getContext();
          IStrategoTerm programT = new x_transformer().transform(ctx.getParser().parse(code, START_SYMBOL));
          ITerm program = ctx.getTermRegistry().parseProgramTerm(programT);
      
          RootNode rootNode = new RootNode(x_language.class, null, null) {

            @Override
            public Object execute(VirtualFrame frame) {
              CompilerDirectives.transferToInterpreter();
      
              RuleRoot initRuleRoot = ctx.getRuleRegistry().lookupRule(
                  "init", START_CONSTR_NAME, START_CONSTR_ARITY);
              if (initRuleRoot == null) {
                throw new IllegalStateException("Rule not found");
              }
              if (program instanceof ITerm) {
                ITerm programCon = (ITerm) program;
                if (programCon.constructor().equals(START_CONSTR_NAME)
                    && programCon.arity() == START_CONSTR_ARITY) {
                  DynSemPrimedRun run = new DynSemPrimedRun();
                  run.setCallTarget(initRuleRoot.getCallTarget());
                  run.setProgram(programCon);
                  ctx.setRun(run);
                  return null;
                }
              }
              throw new IllegalStateException("Malformed program term");
            }

          };

          return Truffle.getRuntime().createCallTarget(rootNode);
        }
      }
    ]|

  ds-to-interp-language-benchmarkentry =
    x_language := $[[<LanguageName>]Language];
    !compilation-unit |[
      package ~x:<TopPackageName>;
            
      import java.io.File;
      import java.io.IOException;
      import java.util.concurrent.Callable;
      
      import org.metaborg.meta.lang.dynsem.interpreter.nodes.rules.RuleResult;
      import org.metaborg.tools.serfer.Benchmark;
      import org.metaborg.tools.serfer.BenchmarkConfiguration;
      
      public class BenchmarkRunner {
      
        public static void main(String[] args) throws IOException {
          String file = args[0];
      
          Callable<RuleResult> callee = x_language.getCallable(file, System.in,
              System.out, System.err);
      
          BenchmarkConfiguration benchconfig = new BenchmarkConfiguration();
          benchconfig.warmuprounds = Integer.parseInt(args[2]);
          benchconfig.repetitions = Integer.parseInt(args[3]);
          benchconfig.dataFile = new File(args[1]);
      
          Benchmark benchmark = new Benchmark(callee, benchconfig);
          benchmark.execute();
      
          benchmark.writeToFile();
        }
      
      }
    ]|
    