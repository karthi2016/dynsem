module backend/interpreter/lang-entrypoint

imports
  include/ds
  libjava-front
  backend/interpreter/utils

rules /* language file. interpreter entry point */

  ds-to-interp-language-entrypoint =
    x_language := $[[<LanguageName>]Language];
    x_transformer := <DesugarTransform>;
    !compilation-unit |[
    
      package ~x:<TopPackageName>;
      
      import java.io.File;
      import java.io.IOException;
      import java.nio.file.Paths;
      
      import metaborg.meta.lang.dynsem.interpreter.terms.IConTerm;
      import metaborg.meta.lang.dynsem.interpreter.terms.ITerm;
      
      import ~x:<TopPackageName>.~x:$[[<LanguageName>]TermRegistry];
      import org.metaborg.meta.lang.dynsem.interpreter.DynSemContext;
      import org.metaborg.meta.lang.dynsem.interpreter.DynSemLanguage;
      import org.metaborg.meta.lang.dynsem.interpreter.DynSemLanguageParser;
      import org.metaborg.meta.lang.dynsem.interpreter.nodes.rules.Rule;
      import org.metaborg.meta.lang.dynsem.interpreter.nodes.rules.RuleResult;
      import org.spoofax.interpreter.terms.IStrategoTerm;
      
      import com.oracle.truffle.api.CallTarget;
      import com.oracle.truffle.api.TruffleLanguage;
      import com.oracle.truffle.api.nodes.Node;
      import com.oracle.truffle.api.source.Source;
      import com.oracle.truffle.api.vm.PolyglotEngine;
      import com.oracle.truffle.api.vm.PolyglotEngine.Value;
      
      @TruffleLanguage.Registration(name = ~e:Lit(String([Chars(<LanguageName>)])), version = ~e:Lit(String([Chars(<SourceVersion>)])), mimeType = ~e:Lit(String([Chars(<SourceMimeType>)])))
      public class x_language extends DynSemLanguage {
      
        public final static String PARSE_TABLE = ~e:Lit(String([Chars(<RelativeTableTargetFile>)]));
        public final static String START_SYMBOL = ~e:Lit(String([Chars(<SourceStartSymbol>)]));
        public final static String SPEC_FILE = ~e:Lit(String([Chars(<RelativeSpecTargetFile>)]));
        public final static String MIME_TYPE = ~e:Lit(String([Chars(<SourceMimeType>)]));
        public final static String START_CONSTR_NAME = ~e:Lit(String([Chars(<ReductionStartConstrName>)]));
        public final static int START_CONSTR_ARITY = ~i:<ReductionStartConstrArity>;
        
        public final static x_language INSTANCE = new x_language();
      
        private final DynSemLanguageParser parser;
      
        public x_language() {
          super(new ~x:$[[<LanguageName>]TermRegistry](), new ~x:$[[<NativePackageName>].[<LanguageName>]RuleRegistry](new File(SPEC_FILE)));
          parser = new DynSemLanguageParser(Paths.get(PARSE_TABLE));
        }
      
        public static void main(String[] args) throws IOException {
          PolyglotEngine vm = PolyglotEngine.buildNew().build();
          assert vm.getLanguages().containsKey(MIME_TYPE);
      
          Source source = Source.fromFileName(args[0]).withMimeType(MIME_TYPE);
          Value v = vm.eval(source);
          RuleResult res = (RuleResult) v.get();
      
          System.out.println(res.result);
      
        }
      
        @Override
        protected CallTarget parse(Source code, Node context,
            String... argumentNames) throws IOException {
      
          IStrategoTerm programT = new x_transformer().transform(parser.parse(code, START_SYMBOL));
          ITerm program = getTermRegistry().parseProgramTerm(programT);
      
          return new CallTarget() {
      
            @Override
            public Object call(Object... arguments) {
              Node n = createFindContextNode();
              DynSemContext c = findContext(n);
      
              Rule initRule = c.getRuleRegistry().lookupRule("init", START_CONSTR_NAME, START_CONSTR_ARITY);
              if (initRule == null) {
                throw new IllegalStateException("Rule not found");
              }
              if (program instanceof IConTerm) {
                IConTerm programCon = (IConTerm) program;
                if (programCon.constructor().equals(START_CONSTR_NAME) && programCon.arity() == START_CONSTR_ARITY) {
      
                  return initRule.getCallTarget().call(
                      programCon.allSubterms());
                }
              }
              throw new IllegalStateException("Malformed program term");
            }
          };
        }
      }
    ]| 
    