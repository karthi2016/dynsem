module backend/java-backend/emit-execmethods

imports
  include/ds
  ds
  libjava-front

imports
  ds2ds/factorize

imports
  analysis/lib-analysis
  analysis/query
  analysis/constructors
  analysis/analysis-rules
  analysis/mark-references

imports
  backend/java-backend/analysis-extra
  backend/java-backend/lib-ds2java
  backend/java-backend/emit-arrows
  backend/java-backend/utils
  
signature
  constructors
    RuleFail: Premise
    JavaStm: List(BlockStm) -> Premise
    Target: ArrowSomething * Term * LabelComp -> Premise
    
rules
  
  ds2java-execmethods(|rule*):
    c -> <mapconcat(ds2java-execmethod(|rule-c*))> applicable-arrow*
    where
      ConstructorType(c-c-ty*, c-ty) := <lookup-def(|Constructors()); lookup-prop(|Type())> c;
      applicable-arrow* := <lookup-def(|Types()); lookup-applicable-arrow-def> c-ty;
      rule-c* := <filter(?Rule(_, _, Relation(_, Source(Con(c, _), _), _, _)))> rule*
      
  ds2java-execmethod(|rule*):
    (arrow-def, ArrowType(_, bu-ty)) ->
      class-body-dec* |[
        public ~x:<ds2java-returnclassname> (arrow-def, bu-ty) ~x:execname(param*){
          this.specializeChildren(0);
          
          bstm*
        }
        
        ~more-method*
      ]|
    where
      execname := <ds2java-methodname> (arrow-def, bu-ty);
      param* := <lookup-arrow-inputs; map-with-index(ds2java-method-paramdecl)> arrow-def;
      arrow-name := <def-get-name> arrow-def;
      if rule := <fetch-elem(?Rule(_, _, Relation(_, _, NamedDynamicEmitted(_, arrow-name), _)))> rule*
      then
        {| LiftedMethods:
          bstm* := <ds2java-rulestatements> rule;
          more-method* := <bagof-LiftedMethods>
        |}
      else
        bstm* := bstm* |[ throw new InterpreterException("Rule failure"); ]|;
        more-method* := []
      end

  
  ds2java-rulestatements:
    Rule(prem*, _, Relation(Reads(r*), Source(Con(c, patt-var*), sc*), NamedDynamicEmitted(_, arrow-name), Target(rhs, tc*))) -> [component*, patternbound*, premstms*]
    where
    	component* := <map-with-index(ds2java-componentbind)> [r*, sc*];
    	patternbound* := <map-with-index(ds2java-patternboundbind)> patt-var*;
      <lookup-def(|Constructors()); lookup-prop(|Type())> c => ConstructorType(_, c-ty);
      retgt := Target(<lookup-arrow-def> (c-ty, arrow-name), rhs, tc*);
    	prem := <inject-try-or; insert-target(|retgt)> prem*;
      premstms* := <ds2java-premise> (prem, [], [])
  
  ds2java-componentbind:
  	(idx, LabelComp(_, Var(v))) -> bstm |[ final ~x:typename ~x:v = ~x:$[_[idx]]; ]|
  	where
  		typename := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-sort-classname> v

  ds2java-patternboundbind:
  	(idx, Var(v)) -> bstm |[ final ~x:typename ~x:v = this.~x:$[_[idx]]; ]|
  	where
  		typename := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-sort-classname> v

  inject-try-or:
    [p@TryOr(_, _)] -> p 
  
  inject-try-or:
    l@[p1 | _] -> TryOr(PremiseBlock(l), PremiseBlock([RuleFail()]))
    where
      <not(?TryOr(_, _))> p1

  insert-target(|tgt):
    [] -> [tgt]
  
  insert-target(|tgt):
    [px | pxs] -> [px' | <insert-target(|tgt)> pxs]
    where
      px' := <try(insert-target(|tgt))> px 

  insert-target(|tgt):
    MergePoint(p, PremiseBlock(p1*), PremiseBlock(p2*)) -> MergePoint(p, PremiseBlock(p1'*), PremiseBlock(p2'*))
    where
      p1'* := <insert-target(|tgt)> p1*;
      p2'* := <insert-target(|tgt)> p2*

  insert-target(|tgt):
    TryOr(PremiseBlock(p1*), PremiseBlock(p2*)) -> TryOr(PremiseBlock(p1'*), PremiseBlock(p2'*))
    where
      p1'* := <insert-target(|tgt)> p1*;
      p2'* := <insert-target(|tgt)> p2*

  ds2java-premise:
    [] -> []

  ds2java-premise:
    [p | pxs] -> <ds2java-premise> (p, pxs, [])

  ds2java-premise:
    ([p | pxs*], on-succ*, on-fail*) -> <ds2java-premise> (p, [pxs*, on-succ*], on-fail*)

  ds2java-premise:
    (Target((arrow-def, ArrowType(_, bu-ty)), t1, tc*), _, _) ->
      bstm* |[
        return new x_classname(e*);
      ]|
    where
      x_classname := <ds2java-returnclassname> (arrow-def, bu-ty);
      t* := [t1 | <map(?LabelComp(_, <id>))> tc*];
      e* := <map(ds2java-term-build)> t*

  ds2java-premise:
    (RuleFail(), _, _) -> bstm* |[ throw new InterpreterException("Rule failure"); ]|

  ds2java-premise:
  	(JavaStm(bstm*), _, _) -> bstm*

  ds2java-premise:
    (Formula(Relation(Reads(r*), Source(lhs, sc*), NamedDynamicEmitted(_, arrow-name), Target(vdec@Var(v-name), tc*))), on-succ*, _) ->
      bstm* |[
        final ~x:resultclass x_tmp = e_lhs.~x:exec(e*);
        final ~x:vout-ty ~x:v-name = x_tmp.value;
        bstm1*
        bstm*
      ]|
    where
      (arrow-def, ArrowType(ma-ty, bu-ty)) := <lookup-arrow-def> (<type-of> lhs, arrow-name);
      resultclass := <ds2java-returnclassname> (arrow-def, bu-ty);
      x_tmp := <newname> "$tmp";
      e_lhs := <ds2java-term-build(|ALPHATYPE())> lhs;
      exec := <ds2java-methodname> (arrow-def, bu-ty);
      e* := <map(?LabelComp(_, <id>); ds2java-term-build(|ALPHATYPE()))> [r*, sc*];
      vout-ty := <type-of; ds2java-sort-classname> vdec;
      bstm1* := <map(?LabelComp(_, <id>)); map-with-index(ds2java-bind-out-var(|x_tmp))> tc*;
      bstm* := <ds2java-premise> on-succ*
      

  ds2java-bind-out-var(|x_result):
    (idx, Var(v)) -> bstm |[ final ~x:v-ty ~x:v = x_result.~x:$[get_[idx]](); ]|
    where
      v-ty := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-sort-classname> v
      
  ds2java-premise:
    (MergePoint(p, PremiseBlock(p1*), PremiseBlock(p2*)), _, _) -> <ds2java-premise> (p, p1*, p2*)

  ds2java-premise:
    (TryOr(PremiseBlock([p1x | p1xs]), PremiseBlock([p2x | p2xs])), _, _) ->
      bstm* |[
        { bstm1* }
        { bstm2* }
      ]|
    where
      bstm1* := <ds2java-premise> (p1x, p1xs, []);
      bstm2* := <ds2java-premise> (p2x, p2xs, [])
  
  ds2java-premise:
    (Formula(NMatch(vin@VarRef(v), pattern)), on-succ*, on-fail*) ->
      bstm* |[
        if(x_antimatch(~x:v)){
          // match failed
          bstm1*
        }else{
          // match succeeded
          bstm2*
        }
      ]|
    where
      x_antimatch := <newname> "$antimatch";
      x_inputtmp := <newname> "$tmp";
      vin-ty := <type-of> vin;
      <store-prop(|Type(), <store-def(|Vars())> x_inputtmp)> vin-ty; 
      prem* := <factorize-premises; map(mark-vardefs-in-premise); map(mark-match-vars); map(type-check-premise-top)> [Formula(Match(VarRef(x_inputtmp), pattern))];
      bstm0* := <ds2java-premise> (prem*, [JavaStm(bstm* |[ return false; ]|) ], []);
      rules(
        LiftedMethods:+ _ ->
          class-body-dec |[
            private boolean x_antimatch(~x:<ds2java-sort-classname> vin-ty x_inputtmp) {
              bstm0*
              return true;
            }
          ]|
      );
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*
  
  ds2java-premise:
    (Formula(Match(lhs, dec@MatchedVar(v))), on-succ*, _) ->
      bstm* |[
        final ~x:v-ty ~x:v = e_lhs;
        bstm*
      ]|
    where
      v-ty := <type-of; ds2java-sort-classname> dec;
      e_lhs := <ds2java-term-build(|ALPHATYPE())> lhs;
      bstm* := <ds2java-premise> on-succ*
  
  ds2java-premise:
    (Formula(Match(VarRef(v), Con(c, patt-var*))), on-succ*, on-fail*) ->
      bstm* |[
        final ~x:consname x_tmp = ~x:v.match(~x:consname.class);
        if(x_tmp != null){
          bstm1* // bind pattern variables
          bstm2* // on-success
        } else {
          bstm3* // on failure
        }
      ]|
    where
      consname := <ds2java-constr-classname> c;
      x_tmp := <newname> "$tmp";
      bstm1* := <map-with-index(ds2java-bind-out-var(|x_tmp))> patt-var*;
      bstm2* := <ds2java-premise> on-succ*;
      bstm3* := <ds2java-premise> on-fail*
  
  ds2java-premise:
    (Formula(Match(VarRef(x_v), ListTail([hd@Var(x_hv)], tl@Var(x_tv)))), on-succ*, on-fail*) ->
      bstm* |[
        if(x_v != null && !x_v.isEmpty()){
          final ~x:hd-ty x_hv = x_v.head();
          final ~x:tl-ty x_tv = x_v.tail();
          bstm1*
        }else{
          bstm2*
        }
      ]|
    where
      hd-ty := <type-of; ds2java-sort-classname> hd;
      tl-ty := <type-of; ds2java-sort-classname> tl;
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*

  ds2java-premise:
    (Formula(TermNeq(t1, t2)), on-succ*, on-fail*) -> <ds2java-premise> (Formula(TermEq(t1, t2)), on-fail*, on-succ*)
  
  ds2java-premise:
    (Formula(TermEq(t1, t2)), on-succ*, on-fail*) ->
      bstm* |[
        if(e_t1 == e_t2){
          bstm1*
        } else {
          bstm2*
        }
      ]|
    where
      <type-of; ds2java-type-is-primitive> t1;
      <type-of; ds2java-type-is-primitive> t2;
      e_t1 := <ds2java-term-build(|ALPHATYPE())> t1;
      e_t2 := <ds2java-term-build(|ALPHATYPE())> t2;
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*
  
  ds2java-premise:
    (Formula(TermEq(t1, t2)), on-succ*, on-fail*) ->
      bstm* |[
        if(e_t1 != null && e_t1.equals(e_t2)){
          bstm1*
        } else {
          bstm2*
        }
      ]|
    where
      <type-of; not(ds2java-type-is-primitive)> t1;
      <type-of; not(ds2java-type-is-primitive)> t2
    where
      e_t1 := <ds2java-term-build(|ALPHATYPE())> t1;
      e_t2 := <ds2java-term-build(|ALPHATYPE())> t2;
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*

  ds2java-premise:
    (Formula(TypeCheck(VarRef(v), ty-trm)), on-succ*, on-fail*) ->
      bstm* |[
        if(~x:v instanceof ~x:ty){
          bstm1*
        }else{
          bstm2*
        }
      ]|
    where
      ty := <rw-type; ds2java-sort-classname> ty-trm;
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*

  ds2java-premise = debug(!"Premise failure: "); fail 

  ds2java-term-build(|ex_ty):
    Int(i) -> e |[ i ]|

  ds2java-term-build(|ex_ty):
    True() -> e |[ true ]|
  
  ds2java-term-build(|ex_ty):
    False() -> e |[ false ]|
  
  ds2java-term-build(|ex_ty):
    VarRef(x_vref) -> e |[ x_vref ]|
  
  ds2java-term-build(|ex_ty):
    Con(c, child*) -> e |[ new x_consclass(null, e*) ]|
    where
      c-def := <lookup-def(|Constructors())> c;
      c-kind := <lookup-prop(|ConsKind())> c-def;
      <not(?NativeOpCons())> c-kind
    where
      x_consclass := <ds2java-constr-classname> c;
      ConstructorType(c-c-ty*, _) := <lookup-prop(|Type())> c-def;
      e* := <zip(\ (ex_ty', trm) -> <ds2java-term-build(|ex_ty')> trm \)> (c-c-ty*, child*)
  
  ds2java-term-build(|ex_ty):
    Con(c, child*) -> e |[ x_manualpkg.Natives.x_consname(e*) ]|
    where
    	c-def := <lookup-def(|Constructors())> c;
      <lookup-prop(|ConsKind())> c-def => NativeOpCons();
      ConstructorType(c-c-ty*, _) := <lookup-prop(|Type())> c-def;
      x_manualpkg := <ManuPackageName>;
      x_consname := $[[c]_[<length> c-c-ty*]];
      e* := <zip(\ (ex_ty', trm) -> <ds2java-term-build(|ex_ty')> trm \)> (c-c-ty*, child*)

  ds2java-term-build(|ex_ty):
    SortFunCall(x_fname, par, arg*) -> e |[ e_on.x_fname(e*)]|
    where
    	e_on := <ds2java-term-build(|ALPHATYPE())> par;
    	par-ty := <type-of> par;
      par-def := <lookup-def(|Types())> par-ty;
      fun-def := <lookup-native-fun-def(|x_fname)> par-def;
      <lookup-prop(|Type())> fun-def => FunctionType(farg*, _);
    	e* := <zip(\ (ex_ty', trm) -> <ds2java-term-build(|ex_ty')> trm \)> (farg*, arg*)
  
  ds2java-term-build(|ex_ty):
  	List([]) -> e |[ NodeList.NIL(x_exptype.class) ]|
  	where
  		if <?ListType(ex_elem_ty)> ex_ty
  		then
  			x_exptype := <ds2java-sort-classname; ds2java-box-java-type> ex_elem_ty
  		else
  			x_exptype := <ds2java-sort-classname> ex_ty
  		end
  		
  ds2java-term-build(|ex-ty):
    ListTail([h-trm], t-trm) -> e |[ new NodeList<x_type>(e_h, e_t) ]|
    where
      h-ty := <type-of> h-trm;
      e_h := <ds2java-term-build(|h-ty)> h-trm;
      h-ex-elem-ty := <?ListType(<id>) <+ !h-ty> ex-ty;
      if <type-of> t-trm => ListType(t-elem-ty)
      then
        actual_ex_elem_ty := <type-coerce> (h-ex-elem-ty, t-elem-ty)
      else
        actual_ex_elem_ty := h-ex-elem-ty
      end;
      x_type := <ds2java-sort-classname; ds2java-box-java-type> actual_ex_elem_ty;
      e_t := <ds2java-term-build(|ListType(actual_ex_elem_ty))> t-trm
  
  ds2java-term-build(|ex_ty):
    Cast(t, ty-trm) -> e |[ (x_ty) e_t ]|
    where
      e_t := <ds2java-term-build(|ALPHATYPE())> t;
      x_ty := <rw-type; ds2java-sort-classname> ty-trm     
  
  ds2java-term-build(|ex_ty):
    String(s) -> Lit(String([Chars(<unquote(?'"')> s)]))

  ds2java-term-build(|ex_ty) = debug(!"Term build failure: "); !e |[ xx ]|
  
  // ds2java-term-build = debug(!"Term build failure: "); fail
