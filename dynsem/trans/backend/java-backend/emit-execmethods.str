module backend/java-backend/emit-execmethods

imports
  include/ds
  ds
  libjava-front
  lib-ds
  lib-ds/lib-match

imports
  ds2ds/factorize
  ds2ds/copy-propagation
  ds2ds/constant-propagation

imports
  analysis/lib-analysis
  analysis/query
  analysis/constructors
  analysis/analysis-signatures
  analysis/analysis-rules
  analysis/mark-references

imports
  backend/java-backend/analysis-extra
  backend/java-backend/lib-ds2java
  backend/java-backend/emit-arrows
  backend/java-backend/utils
  
signature
  constructors
    RuleFail: Statement -> Premise
    JavaStm: List(BlockStm) -> Premise
    Target: ArrowSomething * Term * LabelComp -> Premise
    
rules
  
  ds2java-execmethods(on-norule-generator|rule*):
    c-def -> <mapconcat(ds2java-execmethod(on-norule-generator|rule'*))> applicable-arrow*
    where
      ConstructorType(_, c-ty) := <lookup-prop(|Type())> c-def;
      applicable-arrow* := <lookup-applicable-arrow-def> c-ty;
      rule'* := <map(copy-propagation-rule; constant-propagation-rule)> rule*
  
  lift-constant-premise:
    f@Formula(Match(_, MatchedVar(v))) -> f
    where
      v-def := <lookup-def(|Vars())> v;
      True() := <lookup-prop(|VarConstant())> v-def
  
  ds2java-execmethods(on-norule-generator|rule*):
    ty-def -> <mapconcat(ds2java-execmethod(on-norule-generator|rule-l*))> applicable-arrow*
    where
      ty := <def-get-name> ty-def;
      applicable-arrow* := <lookup-applicable-arrow-def> ty;
      rule-l* := <filter(where(get-rule-relation; get-relation-source; ?Cast(_, <id>); rw-type; ?ty))> rule*

  ds2java-execmethods(on-norule-generator|rule*):
    ty@ListType(_) -> <mapconcat(ds2java-execmethod(on-norule-generator|rule-l*))> applicable-arrow*
    where
      applicable-arrow* := <lookup-applicable-arrow-def> ty;
      rule-l* := <filter(where(get-rule-relation; get-relation-source; ?Cast(_, <id>); rw-type; ?ty))> rule*
  
  ds2java-execmethod(on-norule-generator|allrule*):
    arrow@(arrow-def, ArrowType(_, bu-ty)) ->
      class-body-dec* |[
        
        public x_rettype ~x:execname(param*){
          bstm*
        }
        
      ]|
    where
      arrow-name := <def-get-name> arrow-def;
      [] := <filter(is-rule-matching-arrow(|arrow-name))> allrule*
    where
      execname := <ds2java-methodname> (arrow-def, bu-ty);
      x_rettype := <ds2java-returnclassname> (arrow-def, bu-ty);
      func-param* := <lookup-arrow-inputs; map-with-index(ds2java-method-paramdecl)> arrow-def;
      param* := [param |[ VirtualFrame frame ]|, func-param*];
      bstm* := <on-norule-generator> arrow
  
  ds2java-execmethod(on-norule-generator|allrule*):
    arrow@(arrow-def, ArrowType(_, bu-ty)) ->
      class-body-dec* |[
        
        public x_rettype ~x:execname(param*){
          bstm*
        }
        
        ~more-method*
      ]|
    where
      arrow-name := <def-get-name> arrow-def;
      [rule] := <filter(is-rule-matching-arrow(|arrow-name))> allrule*
    where
      x_rettype := <ds2java-returnclassname> (arrow-def, bu-ty);
      execname := <ds2java-methodname> (arrow-def, bu-ty);
      func-param* := <lookup-arrow-inputs; map-with-index(ds2java-method-paramdecl)> arrow-def;
      param* := [param |[ VirtualFrame frame ]|, func-param*]
    where {| LiftedMethods:
      bstm* := <ds2java-rulestatements(ds2java-supercall|arrow)> rule;
      more-method* := <bagof-LiftedMethods>
    |}
  
  ds2java-execmethod(on-norule-generator|allrule*):
    a@(arrow-def, ArrowType(_, bu-ty)) ->
      class-body-dec* |[
        
        public x_rettype ~x:execname(param*){
          x_rettype res;
          
          bstm0*
          
          bstm1*
        }
        
        ~exec-method*
        
        ~more-method*
      ]|
    where
      arrow-name := <def-get-name> arrow-def;
      rule*@[_, _|_] := <filter(is-rule-matching-arrow(|arrow-name))> allrule*
    where
      x_rettype := <ds2java-returnclassname> (arrow-def, bu-ty);
      execname := <ds2java-methodname> (arrow-def, bu-ty);
      func-param* := <lookup-arrow-inputs; map-with-index(ds2java-method-paramdecl)> arrow-def;
      param* := [param |[ VirtualFrame frame ]|, func-param*];
      bstm1* := <on-norule-generator> a
    where {| LiftedMethods:
      e* := <lookup-arrow-inputs; map-with-index(\ (idx, _) -> e |[ ~x:$[_[idx]] ]| \)> arrow-def;
      bstm0* := <ds2java-calldispatch(|[e |[ frame ]|, e*], execname)> <length> rule*;
      exec-method* := <map-with-index(ds2java-dispatchexec(|a, x_rettype, execname, param*))> rule*;
      more-method* := <bagof-LiftedMethods>
    |}

  ds2java-dispatchexec(|arrow, x_rettype, execname, param*):
    (idx, rule) -> class-body-dec* |[
      private x_rettype x_execname(param*) {
        bstm*
      }
    ]|
    where
      x_execname := $[[execname]_[<int-to-string> idx]];
      bstm* := <ds2java-rulestatements(ds2java-retnull|arrow)> rule
      
  ds2java-calldispatch(|e*, execname):
    i -> bstm* |[
      bstm*
      res = x_execname(e*);
      if(res != null) {
        return res;
      }
    ]|
    where
      <gt> (i, 0);
      x_execname := $[[execname]_[<int-to-string> i]];
      bstm* := <ds2java-calldispatch(|e*, execname)> <dec> i

  ds2java-calldispatch(|e*, execname):
    0 -> bstm* |[ ]|
  
  ds2java-throw-statement:
    (a-def, ArrowType(_, bu-ty)) -> bstm* |[ throw new InterpreterException("Rule failure", e_aname, this); ]|
    where
      e_aname := Lit(String([Chars(<def-get-name; escape-javaid> a-def)]))
  
  ds2java-supercall:
    (arrow-def, ArrowType(_, _)) -> bstm* |[ return super.x_methodname(frame, e*); ]|
    where
      ArrowType(_, bu-ty) := <lookup-prop(|Type())> arrow-def;
      x_methodname := <ds2java-methodname> (arrow-def, bu-ty);
      e* := <lookup-arrow-inputs; map-with-index(\ (idx, _) -> e |[ ~x:$[_[idx]] ]| \)> arrow-def
  
  ds2java-retnull:
    (arrow-def, ArrowType(_, _)) -> bstm* |[ return null; ]| 
  
  ds2java-rulestatements(on-norule-generator|arrow):
    Rule(prem*, _, Relation(Reads(r*), Source(lhs, sc*), NamedDynamicEmitted(_, arrow-name), Target(rhs, tc*))) -> [component*, patternbound*, premstms*]
    where
    	patternbound* := <ds2java-patternbinds> lhs;
    	component* := <map-with-index(ds2java-componentbind)> [r*, sc*];
      lhs-ty := <type-of> lhs;
      retgt := Target(<lookup-arrow-def> (lhs-ty, arrow-name), rhs, tc*);
      prem := <inject-try-or(on-norule-generator|arrow); insert-target(|retgt)> prem*;
      premstms* := <ds2java-premise> (prem, [], [])
  
  ds2java-patternbinds:
  	Con(c, patt-var*) -> <map-with-index(ds2java-patternboundbind)> patt-var*
  
  ds2java-patternbinds:
    As(Var(v), con) -> [asbound*, con-bind*]
    where
    	con-bind* := <ds2java-patternbinds> con;
    	typename := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-type-to-unboxed-type> v;
      asbound* := bstm* |[ final ~x:typename ~x:v = this; ]|
  
  ds2java-patternbinds:
  	Cast(Var(v), _) -> asbound*
  	where
      typename := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-type-to-unboxed-type> v;
      asbound* := bstm* |[ final ~x:typename ~x:v = this; ]|
      
  ds2java-componentbind:
  	(idx, LabelComp(_, Var(v))) -> bstm |[ final ~x:typename ~x:v = ~x:$[_[idx]]; ]|
  	where
  		typename := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-type-to-unboxed-type> v

  ds2java-patternboundbind:
  	(idx, Var(v)) -> bstm |[ final ~x:typename ~x:v = this.~x:$[_[idx]]; ]|
  	where
  		typename := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-type-to-unboxed-type> v

  inject-try-or(on-norule-generator|arrow):
    p*@[_|_] -> p*
    where
      <not(fetch-elem(premise-can-fail))> p*

  inject-try-or(on-norule-generator|arrow):
    p* -> TryOr(PremiseBlock(p*), PremiseBlock([RuleFail(<on-norule-generator> arrow)]))
    where
      ?[] <+ fetch-elem(premise-can-fail)
  
  premise-can-fail =
    ?Formula(Match(_, Con(_, _)))
    + ?Formula(Match(_, List(_)))
    + ?Formula(Match(_, ListTail(_, _)))
    + ?Formula(NMatch(_, _))
    + ?Formula(TermEq(_, _))
    + ?Formula(TermNeq(_, _))
    + ?MergePoint(_, PremiseBlock(p1*), PremiseBlock(p2*)); <fetch-elem(premise-can-fail)> p2*
    + ?TryOr(_, PremiseBlock(p2*)); <fetch-elem(premise-can-fail)> p2*

  insert-target(|tgt):
    [] -> [tgt]
  
  insert-target(|tgt):
    [px | pxs] -> [px' | <insert-target(|tgt)> pxs]
    where
      px' := <try(insert-target(|tgt))> px 

  insert-target(|tgt):
    MergePoint(p, PremiseBlock(p1*), PremiseBlock(p2*)) -> MergePoint(p, PremiseBlock(p1'*), PremiseBlock(p2'*))
    where
      p1'* := <insert-target(|tgt)> p1*;
      p2'* := <insert-target(|tgt)> p2*

  insert-target(|tgt):
    TryOr(PremiseBlock(p1*), PremiseBlock(p2*)) -> TryOr(PremiseBlock(p1'*), PremiseBlock(p2'*))
    where
      p1'* := <insert-target(|tgt)> p1*;
      p2'* := <insert-target(|tgt)> p2*

  ds2java-premise:
    [] -> []

  ds2java-premise:
    [p | pxs] -> <ds2java-premise> (p, pxs, [])

  ds2java-premise:
    ([p | pxs*], on-succ*, on-fail*) -> <ds2java-premise> (p, [pxs*, on-succ*], on-fail*)

  ds2java-premise:
    (Target((arrow-def, ArrowType(_, bu-ty)), t1, tc*), _, _) ->
      bstm* |[
        return new x_classname(e*);
      ]|
    where
      x_classname := <ds2java-returnclassname> (arrow-def, bu-ty);
      t* := [t1 | <map(?LabelComp(_, <id>))> tc*];
      ty* := [bu-ty | <map(?LabelComp(<id>, _))> tc*];
      e* := <zip(ds2java-term-build)> (ty*, t*)

  ds2java-premise:
    (RuleFail(bstm*), _, _) -> bstm*

  ds2java-premise:
  	(JavaStm(bstm*), _, _) -> bstm*

  ds2java-premise:
    (Formula(Relation(Reads(r*), Source(lhs, sc*), NamedDynamicEmitted(_, arrow-name), Target(vdec@Var(v-name), tc*))), on-succ*, _) ->
      bstm* |[
        final ~x:resultclass x_tmp = e_lhs.~x:exec(frame, e*);
        final ~x:vout-ty ~x:v-name = x_tmp.value;
        bstm1*
        bstm*
      ]|
    where
      (arrow-def, ArrowType(ma-ty, bu-ty)) := <lookup-arrow-def> (<type-of> lhs, arrow-name);
      resultclass := <ds2java-returnclassname> (arrow-def, bu-ty);
      x_tmp := <newname> "$tmp";
      e_lhs := <ds2java-term-build(|ma-ty)> lhs;
      exec := <ds2java-methodname> (arrow-def, bu-ty);
      e* := <map(\ LabelComp(ty, c) -> <ds2java-term-build-optcast(|ty)> c \)> [r*, sc*];
      vout-ty := <type-of; ds2java-type-to-unboxed-type> vdec;
      bstm1* := <map(?LabelComp(_, <id>)); map-with-index(ds2java-bind-out-var(|x_tmp))> tc*;
      bstm* := <ds2java-premise> on-succ*

  ds2java-bind-out-var(|x_result):
    (idx, Var(v)) -> bstm |[ final ~x:v-ty ~x:v = x_result.~x:$[get_[idx]](); ]|
    where
      v-ty := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-type-to-unboxed-type> v
      
  ds2java-premise:
    (MergePoint(p, PremiseBlock(p1*), PremiseBlock(p2*)), _, _) -> <ds2java-premise> (p, p1*, p2*)

  ds2java-premise:
    (TryOr(PremiseBlock([p1x | p1xs]), PremiseBlock([p2x | p2xs])), _, _) ->
      bstm* |[
        bstm1*
        bstm2*
      ]|
    where
      bstm1* := <ds2java-premise> (p1x, p1xs, []);
      bstm2* := <ds2java-premise> (p2x, p2xs, [])
  
  ds2java-premise:
    (Formula(NMatch(vin@VarRef(v), pattern)), on-succ*, on-fail*) ->
      bstm* |[
        if(x_antimatch(~x:v)){
          // match failed
          bstm1*
        }else{
          // match succeeded
          bstm2*
        }
      ]|
    where
      x_antimatch := <newname> "$antimatch";
      x_inputtmp := <newname> "$tmp";
      vin-ty := <type-of> vin;
      <store-prop(|Type(), <store-def(|Vars())> x_inputtmp)> vin-ty; 
      prem* := <factorize-premises; map(mark-vardefs-in-premise); map(mark-match-vars); map(type-check-premise-top)> [Formula(Match(VarRef(x_inputtmp), pattern))];
      bstm0* := <ds2java-premise> (prem*, [JavaStm(bstm* |[ return false; ]|) ], []);
      rules(
        LiftedMethods:+ _ ->
          class-body-dec |[
            private boolean x_antimatch(~x:<ds2java-type-to-unboxed-type> vin-ty x_inputtmp) {
              bstm0*
              return true;
            }
          ]|
      );
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*
  
  ds2java-premise:
    (Formula(Match(lhs@Con(cname, c*), dec@MatchedVar(v))), on-succ*, _) ->
      bstm* |[
        final ~x:<ds2java-consdef-classname> c-def ~x:v = e_lhs;
        bstm*
      ]|
    where
      c-def := <lookup-def(|Constructors())> (cname, <length> c*);
    	c-kind := <lookup-prop(|ConsKind())> c-def;
    	<not(?NativeOpCons())> c-kind
    where
      v-ty := <type-of> dec;
      e_lhs := <ds2java-term-build-optcast(|v-ty)> lhs;
      bstm* := <ds2java-premise> on-succ*
  
  ds2java-premise:
    (Formula(Match(lhs, dec@MatchedVar(v))), on-succ*, _) ->
      bstm* |[
        final ~x:<ds2java-type-to-unboxed-type> v-ty ~x:v = e_lhs;
        bstm*
      ]|
    where
      v-ty := <type-of> dec;
      e_lhs := <ds2java-term-build-optcast(|v-ty)> lhs;
      bstm* := <ds2java-premise> on-succ*
  
  ds2java-premise:
    (Formula(Match(lhs, Con(c, patt-var*))), on-succ*, on-fail*) ->
      bstm* |[
        final ~x:consname x_tmp = e_lhs.match(~x:consname.class);
        if(x_tmp != null){
          bstm1* // bind pattern variables
          bstm2* // on-success
        } else {
          bstm3* // on failure
        }
      ]|
    where
      e_lhs := <ds2java-term-build-optcast(|ALPHATYPE())> lhs;
      c-def := <lookup-def(|Constructors())> (c, <length> patt-var*);
      consname := <ds2java-consdef-classname> c-def;
      x_tmp := <newname> "$tmp";
      bstm1* := <map-with-index(ds2java-bind-out-var(|x_tmp))> patt-var*;
      bstm2* := <ds2java-premise> on-succ*;
      bstm3* := <ds2java-premise> on-fail*
  
  ds2java-premise:
    (Formula(Match(lhs, ListTail([hd@Var(x_hv)], tl@Var(x_tv)))), on-succ*, on-fail*) ->
      bstm* |[
        final ~x:<ds2java-type-to-boxed-type> v-ty x_v = e_lhs;
        if(x_v != null && !x_v.isEmpty()){
          final ~x:hd-ty x_hv = x_v.head();
          final ~x:tl-ty x_tv = x_v.tail();
          bstm1*
        }else{
          bstm2*
        }
      ]|
    where
      v-ty := <type-of> lhs;
      e_lhs := <ds2java-term-build-optcast(|v-ty)> lhs;
      x_v := <newname> "$tmp";
      hd-ty := <type-of; ds2java-type-to-unboxed-type> hd;
      tl-ty := <type-of; ds2java-type-to-unboxed-type> tl;
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*

  ds2java-premise:
    (Formula(TermNeq(t1, t2)), on-succ*, on-fail*) -> <ds2java-premise> (Formula(TermEq(t1, t2)), on-fail*, on-succ*)
  
  ds2java-premise:
    (Formula(TermEq(t1, t2)), on-succ*, on-fail*) ->
      bstm* |[
        if(e_t1 == e_t2){
          bstm1*
        } else {
          bstm2*
        }
      ]|
    where
      <type-of; ds2java-type-is-primitive> t1;
      <type-of; ds2java-type-is-primitive> t2;
      e_t1 := <ds2java-term-build(|ALPHATYPE())> t1;
      e_t2 := <ds2java-term-build(|ALPHATYPE())> t2;
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*
  
  ds2java-premise:
    (Formula(TermEq(t1, List([]))), on-succ*, on-fail*) ->
      bstm* |[
        final ~x:<ds2java-type-to-boxed-type> v-ty x_v = e_lhs;
        if(x_v != null && x_v.isEmpty()){
          bstm1*
        } else {
          bstm2*
        }
      ]|
    where
      <type-of; not(ds2java-type-is-primitive)> t1
    where
      v-ty := <type-of> t1;
      e_lhs := <ds2java-term-build-optcast(|v-ty)> t1;
      x_v := <newname> "$tmp";
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*
      
  ds2java-premise:
    (Formula(TermEq(List([]), t2)), on-succ*, on-fail*) ->
      <ds2java-premise> (Formula(TermEq(t2, List([]))), on-succ*, on-fail*)
    where
      <not(?List([]))> t2
      
  ds2java-premise:
    (Formula(TermEq(t1, t2)), on-succ*, on-fail*) ->
      bstm* |[
        if(e_t1 != null && e_t1.equals(e_t2)){
          bstm1*
        } else {
          bstm2*
        }
      ]|
    where
      <type-of; not(ds2java-type-is-primitive)> t1;
      <type-of; not(ds2java-type-is-primitive)> t2;
      <not(?List([]))> t1;
      <not(?List([]))> t2
    where
      e_t1 := <ds2java-term-build(|ALPHATYPE())> t1;
      e_t2 := <ds2java-term-build(|ALPHATYPE())> t2;
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*

  ds2java-premise:
    (Formula(TypeCheck(VarRef(v), ty-trm)), on-succ*, on-fail*) ->
      bstm* |[
        if(~x:v instanceof ~x:ty){
          bstm1*
        }else{
          bstm2*
        }
      ]|
    where
      ty := <rw-type; ds2java-type-to-unboxed-type> ty-trm;
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*

  ds2java-premise = debug(!"Premise failure: "); fail
  
  ds2java-term-build-optcast(|ex_ty):
    trm -> <ds2java-term-build(|ex_ty)> trm
    where not(
      <type-of> trm => MapType(ALPHATYPE(), ALPHATYPE())
    )
  
  ds2java-term-build-optcast(|ex_ty):
    trm -> <ds2java-term-build(|ex_ty)> Cast(trm, ex_ty)
    where
      <type-of> trm => MapType(ALPHATYPE(), ALPHATYPE())

  ds2java-term-build:
    (ty, t) -> <ds2java-term-build(|ty)> t
  
  ds2java-term-build(|ex_ty):
    Int(i) -> e |[ i ]|

  ds2java-term-build(|ex_ty):
    True() -> e |[ true ]|
  
  ds2java-term-build(|ex_ty):
    False() -> e |[ false ]|
  
  ds2java-term-build(|ex_ty):
    VarRef(x_vref) -> e |[ x_vref ]|
  
  ds2java-term-build(|ex_ty):
    Con(c, child*) -> e |[ new x_consclass(this.getSourceSection(), e*) ]|
    where
      c-def := <lookup-def(|Constructors())> (c, <length> child*);
      c-kind := <lookup-prop(|ConsKind())> c-def;
      <not(?NativeOpCons())> c-kind
    where
      x_consclass := <ds2java-consdef-classname> c-def;
      ConstructorType(c-c-ty*, _) := <lookup-prop(|Type())> c-def;
      e* := <zip(\ (ex_ty', trm) -> <ds2java-term-build(|ex_ty')> trm \)> (c-c-ty*, child*)

  ds2java-term-build(|ex_ty):
    Con(c, child*) -> e |[ x_manualpkg.Natives.x_consname(e*) ]|
    where
    	c-def := <lookup-def(|Constructors())> (c, <length> child*);
      <lookup-prop(|ConsKind())> c-def => NativeOpCons();
      ConstructorType(c-c-ty*, _) := <lookup-prop(|Type())> c-def;
      x_manualpkg := <ManuPackageName>;
      x_consname := $[[c]_[<length> c-c-ty*]];
      e* := <zip(\ (ex_ty', trm) -> <ds2java-term-build(|ex_ty')> trm \)> (c-c-ty*, child*)
  
  ds2java-term-build(|ex_ty):
    SortFunCall(x_fname, par, arg*) -> e |[ e_on.x_fname(e*)]|
    where
    	e_on := <ds2java-term-build(|ALPHATYPE())> par;
    	par-ty := <type-of> par;
      par-def := <lookup-def(|Types())> par-ty;
      fun-def := <lookup-native-fun-def(|x_fname)> par-def;
      <lookup-prop(|Type())> fun-def => FunctionType(farg*, _);
    	e* := <zip(\ (ex_ty', trm) -> <ds2java-term-build(|ex_ty')> trm \)> (farg*, arg*)
  
  ds2java-term-build(|ex_ty):
  	List([]) -> e |[ new x_type(this.getSourceSection()) ]|
  	where
  		if <?ListType(_)> ex_ty
  		then
  			x_type := <ds2java-type-to-unboxed-type> ex_ty
  		else
  			x_type := <ds2java-type-to-unboxed-type> ListType(ex_ty)
  		end 
  
  ds2java-term-build(|ex-ty):
    ListTail([h-trm], t-trm) -> e |[ new x_type(this.getSourceSection(), e_h, e_t) ]|
    where
      h-ty := <type-of> h-trm;
      e_h := <ds2java-term-build(|h-ty)> h-trm;
      h-ex-elem-ty := <?ListType(<id>) <+ !h-ty> ex-ty;
      if <type-of> t-trm => ListType(t-elem-ty)
      then
        actual_ex_elem_ty := <type-coerce-sym(type-coerce-direct(fail))> (h-ex-elem-ty, t-elem-ty)
      else
        actual_ex_elem_ty := h-ex-elem-ty
      end;
      x_type := <ds2java-type-to-unboxed-type> ListType(actual_ex_elem_ty);
      e_t := <ds2java-term-build(|ListType(actual_ex_elem_ty))> t-trm
  
  ds2java-term-build(|ex_ty):
    Cast(t, ty-trm) -> e |[ (x_ty) e_t ]|
    where
      e_t := <ds2java-term-build(|<try(rw-type)> ty-trm)> t;
      x_ty := <try(rw-type); ds2java-type-to-unboxed-type> ty-trm
  
  ds2java-term-build(|ex_ty):
    String(s) -> Lit(String([Chars(<unquote(?'"')> s)]))

  ds2java-term-build(|ex_ty):
    Fresh() -> e |[ x_manualpkg.Natives.fresh() ]|
    where
      x_manualpkg := <ManuPackageName>
  
  ds2java-term-build(|ex_ty):
    MapSelect(map-expr, key-expr) -> e |[ MapUtils.get(e_map, e_key) ]|
    where
      e_map := <ds2java-term-build(|ALPHATYPE())> map-expr;
      e_key := <ds2java-term-build(|ALPHATYPE())> key-expr

  ds2java-term-build(|ex_ty):
    MapExtend(lmap, rmap) -> e |[ MapUtils.plus(e_rmap, e_lmap) ]|
    where
      e_rmap := <ds2java-term-build(|ALPHATYPE())> rmap;
      e_lmap := <ds2java-term-build(|ALPHATYPE())> lmap

  ds2java-term-build(|ex-ty):
    MapKeys(m-t) -> e |[ x_lclass.fromList(new ArrayList<x_eclass>(e_map.keySet())) ]|
    where
      MapType(k-ty, _) := <type-of> m-t;
      x_eclass := <ds2java-type-to-boxed-type> k-ty;
      x_lclass := <ds2java-type-to-boxed-type> ListType(k-ty);
      e_map := <ds2java-term-build(|ALPHATYPE())> m-t

  ds2java-term-build(|ex-ty):
    MapValues(m-t) -> e |[ x_lclass.fromList(new ArrayList<x_eclass>(e_map.values())) ]|
    where
      MapType(_, v-ty) := <type-of> m-t;
      x_eclass := <ds2java-type-to-boxed-type> v-ty;
      x_lclass := <ds2java-type-to-boxed-type> ListType(v-ty);
      e_map := <ds2java-term-build(|ALPHATYPE())> m-t

  ds2java-term-build(|ex-ty):
    MapHas(m-t, k-t) -> e |[ e_map.containsKey(e_key) ]|
    where
      e_map := <ds2java-term-build(|ALPHATYPE())> m-t;
      e_key := <ds2java-term-build(|ALPHATYPE())> k-t

  ds2java-term-build(|ex_ty):
    Map([Bind(key, val)]) -> e |[ MapUtils.add(PersistentHashMap.EMPTY, e_key, e_val) ]|
    where
      x_keyty := <type-of; ds2java-type-to-boxed-type> key;
      x_valty := <type-of; ds2java-type-to-boxed-type> val;
      e_key := <ds2java-term-build(|ALPHATYPE())> key;
      e_val := <ds2java-term-build(|ALPHATYPE())> val

  ds2java-term-build(|ex_ty):
    Map([]) -> e |[ PersistentHashMap.EMPTY ]|
      
  ds2java-term-build(|ex_ty) = debug(!"Term build failure: "); !e |[ xx ]|
  
