module backend/java-backend/emit-execmethods

imports
  include/ds
  ds

imports
  analysis/lib-analysis
  analysis/query
  analysis/constructors

imports
  backend/java-backend/analysis-extra
  backend/java-backend/lib-ds2java
  backend/java-backend/emit-arrows

signature
  constructors
    RuleFail: Premise
    Target: ArrowSomething * Term * LabelComp -> Premise

rules
  
  ds2java-execmethods(|rule*):
    c -> <map(ds2java-execmethod(|rule*))> applicable-arrow*
    where
      ConstructorType(c-c-ty*, c-ty) := <lookup-def(|Constructors()); lookup-prop(|Type())> c;
      applicable-arrow* := <lookup-def(|Types()); lookup-applicable-arrow-def> c-ty
      
  ds2java-execmethod(|rule*):
    (arrow-def, ArrowType(_, bu-ty)) ->
      class-body-dec |[
        public ~x:<ds2java-returnclassname> (arrow-def, bu-ty) ~x:execname(param*){
          this.specializeChildren(0);
          
          bstm*
        }
      ]|
    where
      execname := <ds2java-methodname> (arrow-def, bu-ty);
      param* := <lookup-arrow-inputs; map-with-index(ds2java-method-paramdecl)> arrow-def;
      arrow-name := <def-get-name> arrow-def;
      rule := <fetch-elem(?Rule(_, _, Relation(_, _, NamedDynamicEmitted(_, arrow-name), _)))> rule*;
      bstm* := <ds2java-rulestatements> rule
  
  ds2java-rulestatements:
    Rule(prem*, _, Relation(Reads(r*), Source(Con(c, patt-var*), sc*), NamedDynamicEmitted(_, arrow-name), Target(rhs, tc*))) -> [component*, patternbound*, premstms*]
    where
    	// bind reads and incoming changeables
    	component* := <map-with-index(ds2java-componentbind)> [r*, sc*];
    	// bind pattern bound variables
    	patternbound* := <map-with-index(ds2java-patternboundbind)> patt-var*;
      // build informationfull tgt
      retgt := Target(<lookup-arrow-def> (Con(c, patt-var*), arrow-name), rhs, tc*);
    	// push tgt down as a premise on all branches
    	prem'* := <pushdown-target(|retgt)> prem*;
    	// add throw InterpreterException on rules that do not have a try-or
    	p := <inject-try-or> prem'*;
    	// compile the premises
    	premstms* := <ds2java-premise> (p, [], [])
  
  ds2java-componentbind:
  	(idx, LabelComp(_, Var(v))) -> bstm |[ final ~x:typename ~x:v = ~x:$[_[idx]]; ]|
  	where
  		typename := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-sort-classname> v

  ds2java-patternboundbind:
  	(idx, Var(v)) -> bstm |[ final ~x:typename ~x:v = this.~x:$[_[idx]]; ]|
  	where
  		typename := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-sort-classname> v

  inject-try-or:
    [p@TryOr(_, _)] -> p 
  
  inject-try-or:
    l@[p1 | _] -> TryOr(PremiseBlock(l), PremiseBlock([RuleFail()]))
    where
      <not(?TryOr(_, _))> p1

  pushdown-target(|tgt):
    MergePoint(p, PremiseBlock(p1*), PremiseBlock(p2*)) -> MergePoint(p, PremiseBlock(p1'*), PremiseBlock(p2'*))
    where
      p1'* := <pushdown-target(|tgt)> p1*;
      p2'* := <pushdown-target(|tgt)> p2*

  pushdown-target(|tgt):
    TryOr(PremiseBlock(p1*), PremiseBlock(p2*)) -> TryOr(PremiseBlock(p1'*), PremiseBlock(p2'*))
    where
      p1'* := <pushdown-target(|tgt)> p1*;
      p2'* := <pushdown-target(|tgt)> p2*

  pushdown-target(|tgt):
    prem* -> [prem*, tgt]
    where
      is-list

  ds2java-premise:
    [p | pxs] -> <ds2java-premise> (p, pxs, [])

  ds2java-premise:
    (Target((arrow-def, ArrowType(_, bu-ty)), t1, tc*), _, _) ->
      bstm* |[
        return new x_classname(e*);
      ]|
    where
      x_classname := <ds2java-returnclassname> (arrow-def, bu-ty);
      t* := [t1 | <map(?LabelComp(_, <id>))> tc*];
      e* := <map(ds2java-term-build)> t*

  ds2java-premise:
    (RuleFail(), _, _) -> bstm* |[ throw new InterpreterException("Rule failure"); ]|

  ds2java-premise:
    (MergePoint(p, PremiseBlock(p1*), PremiseBlock(p2*)), _, _) -> <ds2java-premise> (p, p1*, p2*)

  ds2java-premise:
    (TryOr(PremiseBlock([p1x | p1xs]), PremiseBlock([p2x | p2xs])), _, _) ->
      bstm* |[
        { bstm1* }
        { bstm2* }
      ]|
    where
      debug(!"A ");
      bstm1* := <ds2java-premise> (p1x, p1xs, []);
      debug(!"B ");
      bstm2* := <ds2java-premise> (p2x, p2xs, [])
      ;debug(!"C ")
  
  ds2java-premise:
    (Formula(NMatch(t1, t2)), on-succ*, on-fail*) -> <ds2java-premise> (Formula(Match(t1, t2)), on-fail*, on-succ*)
  
  ds2java-premise:
    (Formula(Match(lhs, MatchedVar(v))), _, _) ->
      bstm* |[
        final ~x:v-ty ~x:v = e_lhs;
      ]|
    where
      debug(!1);
      v-ty := <lookup-def(|Vars()); lookup-prop(|Type()); ds2java-sort-classname> v;
      debug(!2);
      e_lhs := <ds2java-term-build> lhs 
      ;debug(!3)
  
  ds2java-premise:
    (Formula(TermNeq(t1, t2)), on-succ*, on-fail*) -> <ds2java-premise> (Formula(TermEq(t1, t2)), on-fail*, on-succ*)
  
  ds2java-premise:
    (Formula(TermEq(t1, t2)), on-succ*, on-fail*) ->
      bstm* |[
        if(e_t1 == e_t2){
          bstm1*
        } else {
          bstm2*
        }
      ]|
    where
      <type-of; ds2java-type-is-primitive> t1;
      <type-of; ds2java-type-is-primitive> t2
    where
      e_t1 := <ds2java-term-build> t1;
      e_t2 := <ds2java-term-build> t2;
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*
  
  ds2java-premise:
    (Formula(TermEq(t1, t2)), on-succ*, on-fail*) ->
      bstm* |[
        if(e_t1 != null && e_t1 == e_t2){
          bstm1*
        } else {
          bstm2*
        }
      ]|
    where
      <type-of; not(ds2java-type-is-primitive)> t1;
      <type-of; not(ds2java-type-is-primitive)> t2
    where
      e_t1 := <ds2java-term-build> t1;
      e_t2 := <ds2java-term-build> t2;
      bstm1* := <ds2java-premise> on-succ*;
      bstm2* := <ds2java-premise> on-fail*

  ds2java-premise = Fst; debug(!"Premise failure: "); fail

  ds2java-term-build = ! e |[ 42 ]|
  ds2java-term-match = ! bstm* |[ System.out.println(42); ]|
  
