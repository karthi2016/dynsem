module backend/java-backend/emit-listclasses

imports
  include/ds
  ds

imports
  analysis/constructors
  analysis/lib-analysis
  analysis/query

imports
  backend/java-backend/emit-execmethods
  backend/java-backend/lib-ds2java
  backend/java-backend/utils
  backend/java-backend/emit-specializercode
  
rules
  
  ds2java-listclasses:
    Module(_, section*) -> <make-set; map(ds2java-listclass(|rule*))> lty*
    where
      rule* := <fetch-elem(?Rules(<id>))> section*;
      lty-1* := <collect-all(?ListTail(_, _); type-of); filter(where(ListType(not(lookup-def(|Types()); lookup-prop(|SortKind()) => SystemSort()))))> section*;
      lty-2* := <collect-all(?VarRef(_); type-of; ?ListType(_)); filter(where(ListType(not(lookup-def(|Types()); lookup-prop(|SortKind()) => SystemSort()))))> section*;
      lty-3* := <collect-all(?ListSort(_); rw-type; ?ListType(_)); filter(where(ListType(not(lookup-def(|Types()); lookup-prop(|SortKind()) => SystemSort()))))> section*;
      lty* := <make-set; filter(not(?ListType(ALPHATYPE())))> [lty-1*, lty-2*, lty-3*]
  
  ds2java-listclass(|rule*):
  	lty@ListType(ety) -> class
    where
      x_classname := <ds2java-type-to-unboxed-type> lty;
      specializer* := <mklist-specializer(|x_classname, ety) <+ ![]>;
      exec* := <ds2java-execmethods(ds2java-throw-statement|rule*)> lty;
		  class := <mklist-class(|x_classname, ety, [specializer*, exec*])>
  
rules
	
  mklist-class(|x_classname, elemty, exec*) =
    x_elemname := <ds2java-type-to-unboxed-type> elemty;
    !compilation-unit |[
      package ~x:<AutoPackageName>;
        
        import org.metaborg.meta.interpreter.framework.AbstractNodeList;
				import org.metaborg.meta.interpreter.framework.SourceSectionUtil;
				import org.spoofax.interpreter.terms.IStrategoTerm;
				import com.oracle.truffle.api.source.SourceSection;
        import com.github.krukow.clj_lang.PersistentTreeMap;
        
        public class x_classname extends AbstractNodeList<x_elemname> {
          
          public x_classname(SourceSection src) {
            super(src);
          }
          
          public x_classname(SourceSection src, x_elemname head, x_classname tail) {
            super(src, head, tail);
          }
          
          ~exec*
        }
    ]|

  mklist-specializer(|x_classname, e-ty) =
    e-ty-def := <lookup-def(|Types())> e-ty;
    where(<lookup-prop(|SortKind())> e-ty-def => LanguageSort());
    x_genelem := $[Generic_[<ds2java-type-to-identifier> e-ty]];
    !class-body-dec* |[

      public static x_classname fromStrategoTerm(IStrategoTerm alist) {
		    x_classname list = new x_classname(SourceSectionUtil.fromStrategoTerm(alist));
		    for (IStrategoTerm elem : alist) {
		      final SourceSection src = SourceSectionUtil.fromStrategoTerm(elem);
		      list = new x_classname(src, new x_genelem(src, elem), list);
		    }
		    return list;
		  }

    ]|

  mklist-specializer(|x_classname, e-ty) =
    e-ty-def := <lookup-def(|Types())> e-ty;
    not(<lookup-prop(|SortKind())> e-ty-def => LanguageSort());
    !class-body-dec* |[
    	@Override
      public x_classname fromStrategoTerm(IStrategoTerm alist) {
        throw new UnsupportedOperationException();
		  }
    ]|

