module backend/java-backend/lib-ds2java

imports
  include/ds
  analysis/constructors
  analysis/lib-analysis

rules /* projections of types to names */

  ds2java-sort-to-classname = ds2java-sort-to-name(id)
  
  ds2java-sort-to-id = ds2java-sort-to-name(fail)

  ds2java-sort-to-name(is-classname):
    ty -> ty-str
    where
      ty-def := <lookup-def(|Types())> ty;
      NativeSort() := <lookup-prop(|SortKind())> ty-def;
      if is-classname
      then
        ty-str := <lookup-prop(|NativeTypeJString()); unquote(?'"')> ty-def
      else
        ty-str := <def-get-name> ty-def
      end
  
  ds2java-sort-to-name(is-classname):
    ty -> $[A_[<def-get-name> ty-def]]
    where
      ty-def := <lookup-def(|Types())> ty;
      ty-kind := <lookup-prop(|SortKind())> ty-def;
      <not(?SystemSort() <+ ?NativeSort())> ty-kind
  
  ds2java-sort-to-name(is-classname):
    ListType(ALPHATYPE()) -> "NIL"

  ds2java-sort-to-name(is-classname):
    ListType(ety) -> $[L_[<ds2java-sort-to-name(fail)> ety]]
    where
      <not(?ALPHATYPE())> ety
      
  ds2java-sort-to-name(is-classname):
    MapType(ALPHATYPE(), ALPHATYPE()) -> $[com.github.krukow.clj_ds.PersistentMap<?, ?>]
    where is-classname
  
  ds2java-sort-to-name(is-classname):
    MapType(kty, vty) -> $[com.github.krukow.clj_ds.PersistentMap<[kty-str], [vty-str]>]
    where
      is-classname;
      <not(?ALPHATYPE())> kty;
      <not(?ALPHATYPE())> vty
    where
     kty-str := <ds2java-sort-to-name(id)> kty;
     vty-str := <ds2java-sort-to-name(id)> vty
  
  ds2java-sort-to-name(is-classname):
    MapType(ALPHATYPE(), ALPHATYPE()) -> $[Map]
    where not(is-classname)
  
  ds2java-sort-to-name(is-classname):
    MapType(kty, vty) -> $[Map_[kty-str]_[vty-str]>]
    where
      not(is-classname);
      <not(?ALPHATYPE())> kty;
      <not(?ALPHATYPE())> vty
    where
     kty-str := <ds2java-sort-to-name(fail)> kty;
     vty-str := <ds2java-sort-to-name(fail)> vty

  ds2java-sort-to-name(box-type) =
    ?IntType();
    if box-type
    then
      !"Integer"
    else
      !"int"
    end

  ds2java-sort-to-name(box-type) =
    ?LongType();
    if box-type
    then
      !"Long"
    else
      !"long"
    end
  
  ds2java-sort-to-name(box-type) =
    ?FloatType();
    if box-type
    then
      !"Float"
    else
      !"float"
    end

  ds2java-sort-to-name(box-type) =
    ?RealType();
    if box-type
    then
      !"Double"
    else
      !"double"
    end

  ds2java-sort-to-name(box-type) =
    ?BoolType();
    if box-type
    then
      !"Boolean"
    else
      !"boolean"
    end

  ds2java-sort-to-name(box-type):
    StringType() -> "String"

  ds2java-sort-to-name(is-classname) = is-string

rules /* name generation */


  pp-type-java =
    ?ListType(e); !$[List_[<pp-type-java> e]_]
    <+
    ?MapType(k, v); !$[Map_[<pp-type-java> k]_[<pp-type-java> v]_]
    <+
    pp-type

  ds2java-methodname:
    (a-def, bu-type) -> $[exec_[name]]
    where
      Arrows() := <def-get-namespace> a-def;
      name := <def-get-name> a-def

  ds2java-returnclassname:
    (a-def, bu-type) -> $[R_[name]_[bu-type-str]]
    where
      Arrows() := <def-get-namespace> a-def;
      name := <def-get-name> a-def;
      bu-type-str := <pp-type-java> bu-type

  ds2java-constr-classname:
    constr -> $[[name]_[arity]]
    where
      <lookup-def(|Constructors())> constr => c-def;
      <def-get-name> c-def => name;
      <lookup-prop(|Type())> c-def => ConstructorType(child-ty*, ty);
      <length> child-ty* => arity

  ds2java-type-is-primitive =
  	?IntType()
  	+ ?RealType()
  	+ ?BoolType()
  
  mkidx:
  	idx -> $[_[idx]]





 