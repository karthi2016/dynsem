module backend/java-backend/lib-ds2java

imports
  include/ds
  analysis/constructors
  analysis/lib-analysis

rules /* projections of types to names */

  ds2java-type-to-identifier   = ds2java-type-to-java(fail, id)
  ds2java-type-to-boxed-type   = ds2java-type-to-java(id, ds2java-box-type)
  ds2java-type-to-unboxed-type = ds2java-type-to-java(id, id)

  ds2java-type-to-java(is-mk-type, box):
    IntType() -> <box> "int"
  
  ds2java-type-to-java(is-mk-type, box):
    LongType() -> <box> "long"
  
  ds2java-type-to-java(is-mk-type, box):
    FloatType() -> <box> "float" 

  ds2java-type-to-java(is-mk-type, box):
    RealType() -> <box> "double"
  
  ds2java-type-to-java(is-mk-type, box):
    BoolType() -> <box> "boolean"

  ds2java-type-to-java(is-mk-type, box):
    ty -> <escape-javaid> ty-str
    where
      ty-def := <lookup-def(|Types())> ty;
      NativeSort() := <lookup-prop(|SortKind())> ty-def;
      if is-mk-type
      then
        ty-str := <lookup-prop(|NativeTypeJString()); unquote(?'"')> ty-def
      else
        ty-str := <def-get-name> ty-def
      end

  ds2java-type-to-java(is-mk-type, box):
    ty -> $[A_[<def-get-name; escape-javaid> ty-def]]
    where
      ty-def := <lookup-def(|Types())> ty;
      ty-kind := <lookup-prop(|SortKind())> ty-def;
      <not(?SystemSort() <+ ?NativeSort())> ty-kind
  
  ds2java-type-to-java(is-mk-type, box):
    ListType(ALPHATYPE()) -> "NIL"

  ds2java-type-to-java(is-mk-type, box):
    ListType(ety) -> $[L_[<ds2java-type-to-identifier> ety]]
    where
      <not(?ALPHATYPE())> ety

  ds2java-type-to-java(is-mk-type, box):
    MapType(ALPHATYPE(), ALPHATYPE()) -> $[com.github.krukow.clj_ds.PersistentMap<?, ?>]
    where is-mk-type
  
  ds2java-type-to-java(is-mk-type, box):
    MapType(kty, vty) -> $[com.github.krukow.clj_ds.PersistentMap<[kty-str], [vty-str]>]
    where
      is-mk-type;
      <not(?ALPHATYPE())> kty;
      <not(?ALPHATYPE())> vty
    where
     kty-str := <ds2java-type-to-boxed-type> kty;
     vty-str := <ds2java-type-to-boxed-type> vty
  
  ds2java-type-to-java(is-mk-type, box):
    MapType(ALPHATYPE(), ALPHATYPE()) -> $[map]
    where not(is-mk-type)
  
  ds2java-type-to-java(is-mk-type, box):
    MapType(kty, vty) -> $[map_[kty-str]_[vty-str]]
    where
      not(is-mk-type);
      <not(?ALPHATYPE())> kty;
      <not(?ALPHATYPE())> vty
    where
     kty-str := <ds2java-type-to-identifier> kty;
     vty-str := <ds2java-type-to-identifier> vty
  
  ds2java-type-to-java(is-mk-type, box):
    StringType() -> "String"

  ds2java-type-to-java(is-mk-type, box) = is-string

  ds2java-box-type:
    "int" -> "Integer"
  
  ds2java-box-type:
    "long" -> "Long"
  
  ds2java-box-type:
    "float" -> "Float" 

  ds2java-box-type:
    "double" -> "Double"
  
  ds2java-box-type:
    "boolean" -> "Boolean"

rules /* name generation */

  pp-type-java =
    ?ListType(e); !$[List_[<pp-type-java> e]_]
    <+
    ?MapType(k, v); !$[Map_[<pp-type-java> k]_[<pp-type-java> v]_]
    <+
    pp-type

  ds2java-methodname:
    (a-def, bu-type) -> $[exec_[name]]
    where
      Arrows() := <def-get-namespace> a-def;
      name := <def-get-name; escape-javaid> a-def

  ds2java-returnclassname:
    (a-def, bu-type) -> $[R_[name]_[bu-type-str]]
    where
      Arrows() := <def-get-namespace> a-def;
      name := <def-get-name; escape-javaid> a-def;
      bu-type-str := <pp-type-java; escape-javaid> bu-type

  ds2java-consdef-classname:
    c-def -> $[[<escape-javaid> cname]_[arity]]
    where
      <def-get-name> c-def => (cname, arity)

  ds2java-type-is-primitive =
  	?IntType()
  	+ ?RealType()
  	+ ?BoolType()
  
  mkidx:
  	idx -> $[_[idx]]

  escape-javaid = is-string; debug(!1); string-replace(|"'", "_"); debug(!2); string-replace(|"-", "$"); debug(!3); escape; debug(!4)




 