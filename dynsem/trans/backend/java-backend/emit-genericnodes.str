module backend/java-backend/emit-genericnodes

imports
  include/ds
  libjava-front
  
imports
  analysis/constructors
  analysis/lib-analysis

imports
  backend/java-backend/utils
  backend/java-backend/analysis-extra
  backend/java-backend/lib-ds2java
  backend/java-backend/emit-arrows
  backend/java-backend/emit-maputils

rules
  
  ds2java-genericnodes:
    Module(_, _) -> <map(def-get-name; ds2java-genericnode)> def-ty* 
    where
      def-ty* := <lookup-def-all(|Types()); filter(where(lookup-prop(|SortKind()) => LanguageSort()))>

  ds2java-genericnode:
    ty -> 
      compilation-unit |[ 
        package ~x:<AutoPackageName>;
        
        import org.metaborg.meta.interpreter.framework.*;
        import org.spoofax.interpreter.terms.*;
        import org.spoofax.jsglr.client.imploder.ImploderAttachment;
        import org.spoofax.interpreter.core.Tools;
        
        @SuppressWarnings("unused")
        public class ~x:gennodename extends ~x:sortname implements IGenericNode {
          
          public IStrategoTerm aterm;
          
          public ~x:gennodename(INodeSource source, IStrategoTerm term) {
            this.setSourceInfo(source);
            this.aterm = term;
          }
          
          @Override
          public <T> T match(Class<T> clazz) {
            return specialize(1).match(clazz);
          }
          
          @Override
          public void specializeChildren(int depth){
            throw new InterpreterException("Operation not supported", "aterm specializer", this);
          }
          
          @Override
          public ~x:sortname specialize(int depth) {
            if(replaced()) {
              return (~x:sortname) replacement();
            }
            if (aterm instanceof IStrategoAppl) {
              final IStrategoAppl term = (IStrategoAppl) aterm;
              final String name = term.getName();
              final INodeSource source = NodeSource.fromStrategoTerm(term);

              ~bstm*:<mapconcat(ds2java-consdecl-specializer)> c-def*
            }
            IGenericNode replacement = null;
            
            ~bstm*:<foldr(![], ds2java-implcons-specializer)> impl-c-def*
            
            throw new RewritingException(aterm.toString());
            
          }
          
          @Override
          public IStrategoTerm toStrategoTerm(ITermFactory factory) {
            return aterm;
          }

          ~exec*

        }
      ]|
    where
      sortname := <ds2java-sort-classname> ty;
      gennodename := $[Generic_[sortname]];
      c-def* := <lookup-def-all(|Constructors()); filter(where(lookup-prop(|Type()) => ConstructorType(_, ty)); where(lookup-prop(|ConsKind()) => LanguageCons()))>;
      impl-c-def* := <lookup-def-all(|Constructors()); filter(where(lookup-prop(|Type()) => ConstructorType(_, ty)); where(lookup-prop(|ConsKind()) => ImplicitCons()))>;
      exec* := <lookup-applicable-arrow-def; map(ds2java-arrow-specializedispatch)> ty

  ds2java-consdecl-specializer:
  	c-def ->
			bstm* |[
			  if(name.equals(~e:Lit(String([Chars(<escape> c-name)]))) && term.getSubtermCount() == ~i:<length; int-to-string> c-c-ty*) {
			    ~x:sortname replacement = replace(new ~x:consname(source, e*));
			    if (depth > 0) {
			      replacement.specializeChildren(depth - 1);
			    }
			    return replacement;
		    }
			]|
    where
      c-name := <def-get-name> c-def;
      ConstructorType(c-c-ty*, c-ty) := <lookup-prop(|Type())> c-def;
      sortname := <ds2java-sort-classname> c-ty;
      consname := <ds2java-constr-classname> c-name;
      e* := <map-with-index((\ idx -> e |[ term.getSubterm(~i:<dec; int-to-string> idx)]| \, id); ds2java-gennode-instantiation)> c-c-ty*
  
  subterm-at-index:
    idx -> e |[ term.getSubterm(~i:<int-to-string> idx) ]|

  ds2java-gennode-instantiation:
    (e_trm, ty) -> e |[ new ~x:gennodename(NodeSource.fromStrategoTerm(e_trm), e_trm) ]|
    where
      not(!ty => ListType(_));
      ty-def := <lookup-def(|Types())> ty;
      <not(lookup-prop(|SortKind()) => SystemSort())> ty-def;
      <not(lookup-prop(|SortKind()) => SemanticCompSort())> ty-def;
      <not(lookup-prop(|SortKind()) => NativeSort())> ty-def;
      gennodename := $[Generic_[<ds2java-sort-classname> ty]]

  ds2java-gennode-instantiation:
    (e_trm, lty@ListType(e-ty)) -> e |[ new x_listname(NodeSource.fromStrategoTerm(e_trm)).fromStrategoTerm(e_trm) ]|
    where
      x_listname := <ds2java-sort-classname> lty
  
  ds2java-gennode-instantiation:
    (e_trm, ty) -> e |[ AutoMapUtils.x_tosemcomp(e_trm) ]|
    where
      ty-def := <lookup-def(|Types())> ty;
      <lookup-prop(|SortKind())> ty-def => SemanticCompSort();
      ty-name := <def-get-name> ty-def;
      x_tosemcomp := <ds2java-aterm2map-name> ty-name
 
  ds2java-gennode-instantiation:
  	(e_trm, ty) -> e |[ null ]|
  	where
  		ty-def := <lookup-def(|Types())> ty;
  		<lookup-prop(|SortKind())> ty-def => NativeSort()
 
  ds2java-gennode-instantiation:
    (e_trm, StringType()) -> e |[ Tools.asJavaString(e_trm) ]|

  ds2java-gennode-instantiation:
    (e_trm, IntType()) -> e |[ Tools.asJavaInt(e_trm) ]|

  ds2java-gennode-instantiation:
    (e_trm, RealType()) -> e |[ Tools.asJavaDouble(e_trm) ]|
  
  ds2java-gennode-instantiation:
    (e_trm, BoolType()) -> e |[ TermUtils.boolFromTerm(e_trm) ]|

  ds2java-implcons-specializer:
  	(impl-c-def, bstm*) ->
			bstm* |[
				try {
					if(replacement != null) {
						replacement.replace(this);
					}
					replacement = new ~x:gennodename(getSourceInfo(), aterm);
					return replace(new x_implnodename(getSourceInfo(), (x_sortname) replacement.specialize(1)));
				} catch(RewritingException ~x:<newname>) {
					bstm*
				}
			]|
		where
			ConstructorType([c-ty], ty) := <lookup-prop(|Type())> impl-c-def;
			x_sortname := <ds2java-sort-classname> c-ty;
			x_implnodename := <def-get-name; ds2java-constr-classname> impl-c-def;
			gennodename := $[Generic_[x_sortname]]

  ds2java-arrow-specializedispatch:
    (arrow-def, ArrowType(_, bu-ty)) ->
      class-body-dec |[
        public ~x:<ds2java-returnclassname> (arrow-def, bu-ty) ~x:execname(param*){
        	return specialize(1).~x:execname(e*);
        }
      ]|
    where
      execname := <ds2java-methodname> (arrow-def, bu-ty);
      param* := <lookup-arrow-inputs; map-with-index(ds2java-method-paramdecl)> arrow-def;
      e* := <lookup-arrow-inputs; map-with-index(\ (idx, _) -> e |[ ~x:$[_[idx]] ]| \)> arrow-def


