module backend/java-backend/emit-specializercode

imports
  ds

imports
  analysis/constructors

imports
  backend/java-backend/lib-ds2java
  backend/java-backend/analysis-extra
  
rules
  
  ds2java-specializer-method:
    field-ty* ->
	    class-body-dec* |[
	      private boolean hasSpecialized;
	          
	      @Override
	      public void specializeChildren(int depth) {
	        if (!hasSpecialized) {
	          bstm2*
	          hasSpecialized = true;
	        }
	      }
	    ]|
    where
      bstm2* := <map-with-index(ds2java-field-specializer)> field-ty*
  
    // no specializer code for a non-adoptable child
  ds2java-field-specializer:
    (_, ty) -> []
    where
      <not(type-is-adoptable + type-is-adoptable-list)> ty

  // specializer code for an adoptable non-list child
  ds2java-field-specializer:
    (idx, ty) ->
      stm |[
        if (x_idx instanceof IGenericNode) {
          ((IGenericNode) x_idx).specialize(depth);
        }
      ]|
    where
      <type-is-adoptable> ty;
      <not(type-is-adoptable-list)> ty;
      x_idx := <mkidx> idx

  // specializer code for adoptable children
  ds2java-field-specializer:
    (idx, ty) ->
      stm |[
        {
          x_listty x_idxlist = x_idx;
          while(!x_idxlist.isEmpty()) {
            x_ty x_idxelem = x_idxlist.head();
            if (x_idxelem instanceof IGenericNode) {
              ((IGenericNode) x_idxelem).specialize(depth);
            }
            x_idxlist = x_idxlist.tail();
          }
        }
      ]|
    where
      <type-is-adoptable-list> ty;
      x_ty := <?ListType(<id>); ds2java-sort-to-classname> ty;
      x_idx := <mkidx> idx;
      x_idxelem := $[[x_idx]_elem];
      x_idxlist := $[[x_idx]_list];
      x_listty := <ds2java-sort-to-classname> ty


