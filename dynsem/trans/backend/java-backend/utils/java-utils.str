module java-utils

imports
  libstratego-lib
  libjava-front
  libstratego-sglr
  backend/java-backend/utils/mkdir

rules
  
  emit-java-classes(merge-strategy, createdir|outputpkg, basedir) =
    map(emit-java-class(merge-strategy, createdir|outputpkg, basedir))
  
  emit-java-class(merge-strategy, createdir|outputpkg, basedir) =
    ?ast;
    filename := <java-extractname; guarantee-extension(|"java")> ast;
    if createdir then
      outputdir := <concat-strings> [basedir, "/", <string-replace(|".", "/")> outputpkg];
      (<file-exists <+ mkdir(id)> outputdir)
    else
      outputdir := basedir
    end;
    filepath := <concat-strings> [outputdir, "/", filename];
    /* FIXME: temporary disable of merging due to http://yellowgrass.org/issue/SpoofaxWithCore/74 */
//    
//    (
//      <file-exists> filepath;
//      ast' := <parse-java-file> filepath;
//      ast'' := <merge-strategy> (ast', ast)
//      <+
//      ast'' := ast
//    );
    ast'' := ast;
    pp-java := <debugged-java-pp> ast'';
    fout     := <fopen> (filepath, "w");
    <fputs> (pp-java, fout);
    <fclose> fout
  
  java-extractname:
    compilation-unit -> name
    with
      <collect-one(?InterfaceDecHead(_, Id(name), _, _) + ?ClassDecHead(_, Id(name), _, _, _))> compilation-unit

  parse-java-file = parse-file(
        strsglr-perror, strsglr-report-parse-error
    | <import-term(lib/JavaCompilationUnit-15.tbl)>
    )

rules /* merging of two Java ASTs */
  
  java-methoddec-annos = ?MethodDec(MethodDecHead(<filter(java-is-annotation)>, _, _, _, _, _), _) + ?AbstractMethodDec(<filter(java-is-annotation)>, _, _, _, _, _)
  java-packagedec-annos = ?CompilationUnit(Some(PackageDec(<filter(java-is-annotation)>, _)), _, _)
  java-classdec-annos = 
    ?ClassDec(ClassDecHead(<filter(java-is-annotation)>, _, _, _, _), _)
    + ?InterfaceDec(InterfaceDecHead(<filter(java-is-annotation)>, _, _, _), _)

  java-is-annotation = ?MarkerAnno(_) + ?Anno(_, _)
  java-is-packagedec = ?PackageDec(_, _)
  java-is-methoddec = ?MethodDec(_, _) + ?AbstractMethodDec(_, _, _, _, _, _)
  java-is-classdec = ?ClassDec(_, _) + ?InterfaceDec(_, _)
  
  java-packagedec-getname = ?PackageDec(_, PackageName(<java-implode-id>))
  java-classdec-getname = ?ClassDec(ClassDecHead(_, <java-implode-id>, _, _, _), _) + ?InterfaceDec(InterfaceDecHead(_, <java-implode-id>, _, _), _)
  java-methoddec-getname = ?MethodDec(MethodDecHead(_, _, _, <java-implode-id>, _, _), _) + ?AbstractMethodDec(_, _, _, <java-implode-id>, _, _)
  java-annotation-getname = ?Anno(TypeName(<java-implode-id>), _) <+ ?MarkerAnno(TypeName(<java-implode-id>))
  
  java-methoddec-getreturn = ?MethodDec(MethodDecHead(_, _, <id>, _, _, _), _) + ?AbstractMethodDec(_, _, <id>, _, _, _)
  java-methoddec-getparams = ?MethodDec(MethodDecHead(_, _, _, _, <id>, _), _) + ?AbstractMethodDec(_, _, _, _, <id>, _)
  java-methoddec-getparam-types = java-methoddec-getparams; map(?Param(_, <id>, _))
  
  java-classdec-addmethods(|additions):
    ClassDec(t1, ClassBody(t2)) -> ClassDec(t1, ClassBody(<conc> (t2, additions)))
  
  java-classdec-addmethods(|additions):
    InterfaceDec(t1, t2) -> InterfaceDec(t1, <conc> (t2, additions))
  
  java-implode-id =
    is-list; map(?Id(<id>)); separate-by(|"."); concat-strings; !Id(<id>) <+ ?Id(_)
  
  java-is-genprotect-anno =
    java-is-annotation
    ; java-annotation-getname
    ; ?Id("GeneratorProtected")
  
  java-has-annotation(anno-match):
    term -> term
    where
      (
        java-packagedec-annos
        <+ java-classdec-annos
        <+ java-methoddec-annos
      )
      ; fetch(anno-match)
  
  java-methoddec-overridden-in(|methoddec*):
    methoddec -> methoddec
    where
	    <fetch(java-method-overrides(|methoddec))> methoddec*
  
  java-method-overrides(|overriden):
    overriding -> overriding
    where
      methodname := <java-methoddec-getname> overriding
      // ; methodreturn := <java-methoddec-getreturn> overriding
      ; methodparams := <java-methoddec-getparam-types> overriding
      ; <java-methoddec-getname> overriden => methodname
      // ; <java-methoddec-getreturn> overriden => methodreturn
      ; <java-methoddec-getparam-types> overriden => methodparams
  
  java-replacement(replace) = alltd(replace)
  
  overwrite-merge-strategy:
    (old-java-ast, new-java-ast) -> new-java-ast

  preserve-genprotected-merge-strategy:
    (old-java-ast, new-java-ast) -> merged-ast
    with
      old-package := <collect-one(java-is-packagedec)> old-java-ast
      ; new-package := <collect-one(java-is-packagedec)> new-java-ast
      ; old-class := <collect-one(java-is-classdec)> old-java-ast
      ; new-class := <collect-one(java-is-classdec)> new-java-ast
    with
      old-class-name := <java-classdec-getname> old-class
      ; new-class-name := <java-classdec-getname> new-class
      ; old-package-name := <java-packagedec-getname> old-package
      ; new-package-name := <java-packagedec-getname> new-package
      ; !old-package-name => new-package-name
      ; !old-class-name => new-class-name
    with
        if <java-has-annotation(java-is-genprotect-anno)> old-class then
          merged-ast := <java-replacement(?new-class; !old-class)> new-java-ast
          ; <debug(!"Protected class: ")> old-class-name
        else
          // all methods annotated with @GeneratorProtected are preserved
          if <collect-one(java-is-genprotect-anno)> old-class then
	          protected-method* := <collect-all(java-is-methoddec; java-has-annotation(java-is-genprotect-anno))> old-class
	          ; new-method* := <collect-all(java-is-methoddec)> new-class
	          ; redeclared-method* := <filter(java-is-methoddec; java-methoddec-overridden-in(|new-method*))> protected-method*
	          ; <debug(!"Protected redeclared methods: ")> <map(java-methoddec-getname)> redeclared-method*
	          ; additional-methods*:= <diff> (protected-method*, redeclared-method*)
	          ; <debug(!"Protected additional methods: ")> <map(java-methoddec-getname)> additional-methods*
	          ; merged-ast' := <java-replacement(java-is-methoddec; \ mdec -> <fetch(java-method-overrides(|mdec))> redeclared-method* \)> new-java-ast
	          ; merged-ast'' := <java-replacement(java-is-classdec; java-classdec-addmethods(|additional-methods*))> merged-ast'
	          ; merged-ast := merged-ast''
	        else
	          merged-ast := new-java-ast
	        end
      end 

rules /* id escaping */

  escape-java-id = string-replace(|"'", "_")
  
rules /* Java pp with crash details */
  
  debugged-java-pp =
    pp-java-string <+
    bottomup(try(not(is-string) ; not(is-list) ; not(pp-java-string) ; debug(!"ERROR: cannot pp "))) ; fail
  
