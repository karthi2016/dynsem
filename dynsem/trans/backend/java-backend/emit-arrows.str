module backend/java-backend/emit-arrows

imports
  include/ds
  libjava-front
  
imports
  analysis/constructors
  analysis/lib-analysis

imports
  backend/java-backend/lib-ds2java
  backend/java-backend/analysis-extra
  backend/java-backend/utils
  backend/java-backend/emit-atermconversion
  
rules
  
  // generate indexed method parameter declaration
  ds2java-method-paramdecl:
    (idx, ty) -> param |[ ~x:<ds2java-type-to-unboxed-type> ty ~x:$[_[idx]] ]|
  
  // generate indexed field declaration
  ds2java-fielddecl:
    (x, ty) -> class-body-dec |[ private ~x:<ds2java-type-to-unboxed-type> ty x; ]|
    where
      <not(type-is-adoptable + type-is-adoptable-list)> ty

  // generate indexed field declaration
  ds2java-fielddecl:
    (x, ty) -> class-body-dec |[ @Child private ~x:<ds2java-type-to-unboxed-type> ty x; ]|
    where
      <type-is-adoptable> ty
      <+
      <type-is-adoptable-list> ty
  
  // generate setter for indexed child adoption
  ds2java-fieldinit:
    (x, ty) -> stm |[ this.x = x; ]|

  // generate setter for indexed child adoption
  ds2java-fieldinit:
    (x, ty) -> stm |[ this.x = adoptChildren(x); ]|
    where
      <type-is-adoptable-list> ty

  // generate setter for indexed non-adoptable child
  ds2java-fieldinit:
    (x, ty) -> stm |[ this.x = x; ]|
    where
      <not(type-is-adoptable + type-is-adoptable-list)> ty
  
  // generate setter for indexed field
  ds2java-getter:
    (x, ty) ->
      class-body-dec |[
        public ~x:<ds2java-type-to-unboxed-type> ty ~x:$[get[x]]() {
          return this.x;
        }
      ]|
  
  // generate result classes from arrows
  ds2java-arrowresults =
    lookup-def-all(|Arrows());
    mapconcat(\ a-def -> <lookup-props(|Type()); map(\ ty -> (a-def, ty) \)> a-def \);
    map(ds2java-arrowresult)
  
  // generate result class from arrow
  ds2java-arrowresult:
    (arrow-def, ArrowType(_, bu-ty)) -> 
			compilation-unit |[
			  package ~x:<AutoPackageName>;
			  
			  import com.oracle.truffle.api.nodes.Node.Child;
			  import org.metaborg.meta.interpreter.framework.*;
			  import org.metaborg.meta.interpreter.framework.IConvertibleToStrategoTerm;
			  import org.spoofax.interpreter.terms.IStrategoTerm;
			  import org.spoofax.interpreter.terms.ITermFactory;
        import com.oracle.truffle.api.interop.ForeignAccess;
        import com.oracle.truffle.api.interop.TruffleObject;
        import ds.manual.interpreter.*;
        
			  public class x_classname implements IConvertibleToStrategoTerm, TruffleObject {
			    public final x_valueclass value;

			    ~fdec*

			    public x_classname(x_valueclass value, param*) {
			      this.value = value;
			      bstm*
			    }

	        @Override
	        public IStrategoTerm toStrategoTerm(ITermFactory factory) {
	          return factory.makeAppl(
	                   factory.makeConstructor(~e:Lit(String([Chars(<escape> x_classname)])), ~i:<length; inc; int-to-string> changeable*),
	                   e_val,
	                   e_child*
	                 );
	        }

					@Override
					public ForeignAccess getForeignAccess() {
					  return Natives.getForeignAccess();
					}

			    ~fget*
			  }
			]|
   where
     x_classname := <ds2java-returnclassname> (arrow-def, bu-ty);
     x_valueclass := <ds2java-type-to-unboxed-type> bu-ty;
     changeable* := <lookup-arrow-changeables> arrow-def;
     param* := <map-with-index(ds2java-method-paramdecl)> changeable*;
     fdec* := <map-with-jindex(ds2java-fielddecl)> changeable*;
     bstm* := <map-with-jindex(ds2java-fieldinit)> changeable*;
     fget* := <map-with-jindex(ds2java-getter)> changeable*
	 where
	   e_val := <ds2java-atermconversion-name(| e |[ value ]|)> bu-ty;
	   e_child* := <map-with-index(ds2java-atermconversion-field)> changeable*


