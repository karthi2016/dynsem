module backend/java-backend/emit-atermconversion

imports
  signatures/ds-sig
  libjava-front
  
imports
  analysis/constructors
  analysis/analysis-signatures
  analysis/lib-analysis

imports
  backend/java-backend/lib-ds2java
  backend/java-backend/emit-maputils

rules

  ds2java-atermconversion-constructor:
    c-def ->
	    class-body-dec |[
	      @Override
	      public IStrategoTerm toStrategoTerm(ITermFactory factory) {
	        IStrategoAppl term = factory.makeAppl(
	            factory.makeConstructor(~e:Lit(String([Chars(<escape> c-name)])), ~i:<int-to-string> c-arity), 
	            e_child*
	        );
	        if ( getSourceInfo() != null ) {
	          getSourceInfo().apply(term);
	        }
	        return term;
	      }
	    ]|
    where
      x_consname := <ds2java-consdef-classname> c-def;
      ConstructorType(c-c-ty*, c-ty) := <lookup-prop(|Type())> c-def
    where
      c-name := <consdef-get-name> c-def;
      c-arity := <consdef-get-arity> c-def;
      e_child* := <map-with-index(ds2java-atermconversion-field)> c-c-ty*

  ds2java-atermconversion-field:
    (idx, f-ty) -> <ds2java-atermconversion-name(| e |[ ~x:<mkidx> idx ]|)> f-ty

  ds2java-atermconversion-name(|e):
  	f-ty -> e |[ e.toStrategoTerm(factory) ]|
  	where
  		f-ty-def := <lookup-def(|Types())> f-ty;
  		f-ty-knd := <lookup-prop(|SortKind())> f-ty-def;
  		<not(?SystemSort())> f-ty-knd;
  		<not(?NativeSort())> f-ty-knd

  ds2java-atermconversion-name(|e):
    f-ty -> e |[
    	 (e instanceof IConvertibleToStrategoTerm) ? 
    	   ((IConvertibleToStrategoTerm) e).toStrategoTerm(factory) 
    	 : factory.makeString(e.toString())
    ]|
    where
      f-ty-def := <lookup-def(|Types())> f-ty;
      f-ty-knd := <lookup-prop(|SortKind())> f-ty-def;
      <?NativeSort()> f-ty-knd

  ds2java-atermconversion-name(|e):
    m-ty@MapType(_, _) -> e |[ AutoMapUtils.x_map2aterm(e, factory) ]|
    where
      x_map2aterm := <ds2java-map2aterm-name> m-ty

  ds2java-atermconversion-name(|e):
    ListType(_) -> e |[ e.toStrategoTerm(factory) ]|
  
  ds2java-atermconversion-name(|e):
  	IntType() -> e |[ TermUtils.termFromInt(e, factory) ]|

  ds2java-atermconversion-name(|e):
  	LongType() -> e |[ TermUtils.termFromInt(e, factory) ]|

  ds2java-atermconversion-name(|e):
  	FloatType() -> e |[ TermUtils.termFromDouble(e, factory) ]|

  ds2java-atermconversion-name(|e):
  	RealType() -> e |[ TermUtils.termFromDouble(e, factory) ]|

  ds2java-atermconversion-name(|e):
    BoolType() -> e |[ TermUtils.termFromBool(e, factory) ]|
  
  ds2java-atermconversion-name(|e):
  	StringType() -> e |[ TermUtils.termFromString(e, factory) ]|




