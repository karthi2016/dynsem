module backend/java-backend/emit-atermconversion

imports
  include/ds
  libjava-front
  
imports
  analysis/constructors
  analysis/lib-analysis

imports
  backend/java-backend/lib-ds2java

rules

  ds2java-atermconversion-constructor:
    c ->
	    class-body-dec |[
	      @Override
	      public IStrategoTerm toStrategoTerm(ITermFactory factory) {
	      	return factory.makeAppl(
	      		       factory.makeConstructor(~e:Lit(String([Chars(<escape> c-name)])), ~i:<length; int-to-string> c-c-ty*), 
	      		       e_child*
	      		     );
	      }
	    ]|
    where
      x_consname := <ds2java-constr-classname> c;
      c-def := <lookup-def(|Constructors())> c;
      ConstructorType(c-c-ty*, c-ty) := <lookup-prop(|Type())> c-def
    where
      c-name := <def-get-name> c-def;
      e_child* := <map-with-index(ds2java-atermconversion-field)> c-c-ty*

  ds2java-atermconversion-field:
  	(idx, f-ty) -> e |[ x_idx.toStrategoTerm(factory) ]|
  	where
  		f-ty-def := <lookup-def(|Types())> f-ty;
  		f-ty-knd := <lookup-prop(|SortKind())> f-ty-def;
  		<not(?SystemSort())> f-ty-knd;
  		<not(?SemanticCompSort())> f-ty-knd
    where
    	x_idx := <mkidx> idx

  ds2java-atermconversion-field:
  	(idx, f-ty) -> e |[ factory.makeString(x_idx.toString()) ]|
  	where
      <lookup-def(|Types()); lookup-prop(|SortKind())> f-ty => SemanticCompSort()
  	where
  		x_idx := <mkidx> idx
  
  ds2java-atermconversion-field:
  	(idx, IntType()) -> e |[ factory.makeInt(x_idx) ]|
    where
    	x_idx := <mkidx> idx

  ds2java-atermconversion-field:
  	(idx, RealType()) -> e |[ factory.makeReal(x_idx) ]|
    where
    	x_idx := <mkidx> idx

  ds2java-atermconversion-field:
  	(idx, BoolType()) -> e |[ factory.makeAppl(factory.makeConstructor(x_idx ? "True" : "False", 0)) ]|
    where
    	x_idx := <mkidx> idx
  
  ds2java-atermconversion-field:
  	(idx, StringType()) -> e |[ factory.makeString(x_idx) ]|
  	where
  		x_idx := <mkidx> idx


