module analysis/query

imports
  ds
  ds-main

imports
  analysis/constructors
  analysis/lib-analysis
  analysis/analysis-rules

rules
  
  type-of:
    Wld() -> ALPHATYPE()

  type-of:
    As(v, _) -> <type-of> v
  
  type-of:
    Cast(_, ty) -> <rw-type> ty
  
  type-of:
    MatchedVar(v) -> <type-of> VarRef(v)
  
  type-of:
    Var(v) -> <type-of> VarRef(v)

  type-of:
    ListTail([h], _) -> ListType(<type-of> h)
  
  type-of:
    Con(name, c*) -> c-ty
    where
      ConstructorType(_, c-ty) := <lookup-def(|Constructors()); lookup-prop(|Type())> (name, <length> c*) 

  type-of =
    type-check-build-helper

  type-of-applicable-arrow(coerce-s):
    (arrow-type*, term-ty) -> <fetch-elem(where(\ ArrowType(ex-ty, _) -> <coerce-s> (ex-ty, term-ty) \))> arrow-type*

  get-arrow-source-type:
    ArrowType(src-ty, _) -> src-ty
  
  get-arrow-target-type:
    ArrowType(_, tgt-ty) -> tgt-ty

rules /* variable scheme queries */

  get-unique-matching-varscheme =
    get-matching-varschemes;
    ?[<id>]

  get-matching-varschemes =
    not(is-string);
    (?Var(<id>) + ?VarRef(<id>));
    get-matching-varschemes

  get-matching-varschemes:
    used-word -> <lookup-def-all(|VarSchemes()); filter(is-name-matches-varscheme(|used-word))>
    where is-string
  
  is-name-matches-varscheme(|used-word):
    scheme-def -> scheme-def
    where
      scheme-name := <def-get-name> scheme-def
    where
      used-word-chars := <explode-string> used-word;
      scheme-word-chars := <explode-string> scheme-name;
      used-word-suffix-chars := <left-match> (used-word-chars, scheme-word-chars);
      if not(!used-word-suffix-chars => [])
      then
	      if not(<Hd> used-word-suffix-chars => '_')
	      then
	        <filter(not(?'\''); not(MkSingleton; dec-chars-to-int))> used-word-suffix-chars => []
	      end
	    end












