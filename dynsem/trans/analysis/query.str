module analysis/query

imports
  signatures/ds-sig
  ds

imports
  analysis/constructors
  analysis/lib-analysis
  analysis/analysis-rules

rules
  
  type-of:
    Wld() -> ALPHATYPE()

  type-of:
    As(v, _) -> <type-of> v
  
  type-of:
    Cast(_, ty) -> <rw-type> ty
  
  type-of:
    Var(v) -> <type-of> VarRef(v)

  type-of:
    ListTail(elems, tl) -> l-ty
    where
      l-ty := ListType(<fetch-elem(not(?Wld()); type-of)> elems)
      <+
      l-ty := <type-of> tl
  
  type-of:
    List(elems) -> ListType(<fetch-elem(not(?Wld()); type-of)> elems)
  
  type-of:
    Con(name, c*) -> c-ty
    where
      ConstructorType(_, c-ty) := <lookup-def(|Constructors()); lookup-prop(|Type())> (name, <length> c*) 

  type-of:
    Tuple(t*) -> TupleType(<map(type-of)> t*)
  
  type-of:
    Concat(t1, _) -> <type-of> t1

  type-of =
    type-check-build-helper

  lookup-applicable-arrowdef(coerce-s):
    (arrow-name, lhs-ty) -> <get-applicable-arrowdef(coerce-s)> (arrow-def*, lhs-ty)
    where
      arrow-def* := <lookup-defs(|Arrows())> arrow-name

  get-applicable-arrowdef(coerce-s):
    (arrow-def*, term-ty) -> <fetch-elem(where(lookup-prop(|Type()); \ ArrowType(ex-ty, _) -> <coerce-s> (ex-ty, term-ty) \))> arrow-def*

rules // projections
  
  get-arrow-source-type:
    ArrowType(src-ty, _) -> src-ty
  
  get-arrow-target-type:
    ArrowType(_, tgt-ty) -> tgt-ty

rules // type properties
  
  is-systemsort:
    sort -> sort
    where
      SystemSort() := <lookup-def(|Types()); lookup-prop(|SortKind())> sort

rules /* variable scheme queries */

  get-var-name:
    Var(x) -> x
  
  get-var-name:
    VarRef(x) -> x

  get-label-name:
    Label(x) -> x

  get-all-varschemes =
    <concat> [<get-all-component-defs>, <get-all-varscheme-defs>]

  get-all-component-defs = lookup-def-all(|Components())
  
  get-all-varscheme-defs = lookup-def-all(|VarSchemes())

  get-reverse-matching-varschemes(get-definitions) =
    ?type;
    get-definitions; filter(is-type-matches-varscheme(|type))

  is-type-matches-varscheme(|type) =
    where(
      lookup-prop(|Type());
      ?type    
    )

  get-unique-matching-varscheme(get-definitions) =
    get-matching-varschemes(get-definitions);
    Hd

  get-matching-varschemes(get-definitions) =
    not(is-string);
    (get-var-name <+ get-label-name);
    get-matching-varschemes(get-definitions)

  get-matching-varschemes(get-definitions):
    used-word -> <get-definitions; filter(is-name-matches-varscheme(|used-word))>
    where is-string
  
  is-name-matches-varscheme(|used-word):
    scheme-def -> scheme-def
    where
      scheme-name := <def-get-name> scheme-def
    where
      <native-name-matches-varscheme(|scheme-name)> used-word

  external native-name-matches-varscheme(|scheme-name)










