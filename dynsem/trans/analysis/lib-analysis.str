module analysis/lib-analysis

imports
  include/ds
  analysis/constructors

rules
	
	new-analysis-scope(s) = {| Renames, Declared, Properties, Messages: s |}

rules // renaming
  
  new-scope-renames(s|namespace) = {| Renames: s |}
  
  rename(|namespace):
    name -> name'
    where
      <Renames> (namespace, name) => name'
  
  rename(|namespace):
    name -> name'
    where
      <not(Renames)> (namespace, name)
    with
      name' := <newname> name;
      rules(Renames:+ (namespace, name) -> name')

rules // storing and looking up
  
  store-def(|namespace):
    name -> (namespace, name)
    where
      if <not(Declared)> (namespace, name)
      then
        rules(Declared:+ (namespace, name) -> (namespace, name))
      end
  
  lookup-def(|namespace):
    name -> <Declared> (namespace, name)
   
  store-prop(|proptype, definition):
    propval -> propval
    where
      rules(Properties:+ (proptype, definition) -> propval)
   
  lookup-prop(|proptype):
    definition -> <Properties> (proptype, definition)

  // lookup-def-nss(|xxx) = ![()]
  
rules
  
  add-msg(|level, message):
    term -> term
    with
      rules(Messages:+ term -> Message(level, message))

rules // type rewriting
  
  rw-type:
    SimpleSort(s) -> <id-to-type> s
  
  rw-type:
    ListSort(s) -> ListType(<rw-type> s)
  
  rw-type:
    MapSort(key-sort, val-sort) -> MapType(<rw-type> key-sort, <rw-type> val-sort)
  
  rw-type = is-list; map(rw-type)
  
  id-to-type = id-to-builtin-type <+ is-string

  id-to-builtin-type:
    "Term" -> TermType()

  id-to-builtin-type:
    "Any" -> AnyType()

  id-to-builtin-type:
    "Int" -> IntType()
    
  id-to-builtin-type:
    "Real" -> RealType()

  id-to-builtin-type:
    "Bool" -> BoolType()
    
  id-to-builtin-type:
    "String" -> StringType()
  