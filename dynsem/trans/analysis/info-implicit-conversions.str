module analysis/info-implicit-conversions

imports
  signatures/ds-sig
  signatures/dynsem/Module-sig
  analysis/lib-analysis
  analysis/constructors
  analysis/analysis-rules
  analysis/query
  analysis/analysis-signatures
  lib-ds

rules
  
  rules /* information providers for implicit conversions */
  
  gen-implicit-info-top = where(gen-implicit-info)

  gen-implicit-info = 
    try(
      Module(id, filter(gen-implicit-info)); fail
      + Rules(filter(gen-implicit-info)); fail
      + Rule(
          filter(gen-implicit-info),
          id,
          Relation(
            Reads(filter(gen-implicit-info(id))),
            Source(gen-implicit-info(id), filter(gen-implicit-info(id))),
            id,
            Target(gen-implicit-info(fail), filter(gen-implicit-info(fail)))
          )
        ); fail
      + gen-implicit-info-conclusion; fail
      + CaseMatch(gen-implicit-info(fail), filter(gen-implicit-info)); fail
      + CasePattern(id, filter(gen-implicit-info)); fail
      + CaseOtherwise(filter(gen-implicit-info)); fail
      + Formula(gen-implicit-info); fail
      + Relation(
          Reads(gen-implicit-info(fail)),
          Source(gen-implicit-info(fail), filter(gen-implicit-info(fail))),
          id,
          Target(gen-implicit-info(id), filter(gen-implicit-info(id)))
        ); fail
      + Match(gen-implicit-info(fail), gen-implicit-info(id)); fail
      + NMatch(gen-implicit-info(fail), gen-implicit-info(id)); fail
      + TermEq(gen-implicit-info(fail), gen-implicit-info(fail)); fail
      + TermNeq(gen-implicit-info(fail), gen-implicit-info(fail)); fail
      + gen-implicit-info-premise; fail
    )
  
  gen-implicit-info-conclusion:
    Rule(_, _, Relation(_, Source(lhs, _), arr, _)) -> <fail>
    where
      arrow-name := <get-arrow-name> arr;
      lhs-ty := <gen-implicit-info-type-of(id)> lhs;
      ArrowType(dec-lhs-ty, _) := <resolve-applicable-arrow-defsite; lookup-prop(|Type())> (arrow-name, lhs-ty);
      <gen-implicit-info-fact(id|lhs)> (lhs-ty, dec-lhs-ty)

  gen-implicit-info-conclusion:
    Rule(_, _, Relation(_, Source(lhs, _), arr, Target(rhs, _))) -> <fail>
    where
      arrow-name := <get-arrow-name> arr;
      lhs-ty := <rulelhs-get-type> lhs;
      ArrowType(_, dec-rhs-ty) := <resolve-applicable-arrow-callsite; lookup-prop(|Type())> (arrow-name, lhs-ty);
      <gen-implicit-info-fact(fail)> (rhs, dec-rhs-ty)
  
  gen-implicit-info-premise:
    _ -> <fail>
    where
      ?p@Match(lt, rt) + ?p@NMatch(lt, rt)
    where
      l-ty := <gen-implicit-info-type-of(fail)> lt;
      r-ty := <gen-implicit-info-type-of(id)> rt;
      <try(gen-implicit-info-fact(id|p))> (r-ty, l-ty)
  
  gen-implicit-info-premise:
    Formula(Relation(_, Source(lhs, _), arr, _)) -> <fail>
    where
      arrow-name := <get-arrow-name> arr;
      lhs-ty := <gen-implicit-info-type-of(id)> lhs;
      ArrowType(dec-lhs-ty, _) := <resolve-applicable-arrow-callsite; lookup-prop(|Type())> (arrow-name, lhs-ty);
      <gen-implicit-info-fact(fail|lhs)> (lhs-ty, dec-lhs-ty)
  
  gen-implicit-info-premise:
    GuardedBind(rhs, guarded-value*) -> <fail>
    where
      rhs-ty := <gen-implicit-info-type-of(fail)> rhs;
      <filter(gen-implicit-info-guardedvalue(|rhs, rhs-ty))> guarded-value*
  
  gen-implicit-info-guardedvalue(|rhs, rhs-ty):
    guarded-value -> <fail>
    where
      ?GValue(_, ct) + ?NegGValue(_, ct)
    where
    <gen-implicit-info(fail)> ct;
      ct-ty := <gen-implicit-info-type-of(fail); get-alias-base> ct;
      <gen-implicit-info-fact(fail|ct)> (ct-ty, BoolType())
  
  gen-implicit-info-guardedvalue(|rhs, rhs-ty):
    guarded-value -> <fail>
    where
      ?GValue(t, _) + ?NegGValue(t, _) + ?UValue(t)
    where
      <gen-implicit-info(fail)> t;
      t-ty := <gen-implicit-info-type-of(fail); get-alias-base> t;
      <gen-implicit-info-fact(fail|rhs)> (t-ty, rhs-ty)
  
  gen-implicit-info(is-matching) = alltd(gen-implicit-info-term(is-matching))

  gen-implicit-info-term(is-matching):
    Cast(t, s) -> <fail>
    where
      s-ty := <rw-type> s;
      t-ty := <gen-implicit-info-type-of(is-matching)> t;
      <gen-implicit-info-fact(is-matching|t)> (t-ty, s-ty)

  gen-implicit-info-term(is-matching):
    LabelComp(Label(l), t) -> <fail>
    where
      ty := <lookup-def(|Components()); lookup-prop(|Type())> l;
      t-ty := <gen-implicit-info-type-of(is-matching)> t;
      <gen-implicit-info-fact(is-matching|t)> (t-ty, ty)

  gen-implicit-info-term(is-matching):
    Con(c-name, c*) -> <fail>
    where
      c-arity := <length> c*;
      ConstructorType(fc-ty*, cons-ty) := <lookup-def(|Constructors()); lookup-prop(|Type())> (c-name, c-arity);
      <zip(try(gen-implicit-info-fact(is-matching)))> (c*, fc-ty*)

  gen-implicit-info-term(is-matching):
    ListTail([h], t) -> <fail>
    where
      h-ty := <gen-implicit-info-type-of(is-matching)> h;
      ListType(e-ty) := <gen-implicit-info-type-of(is-matching)> t;
      <gen-implicit-info-fact(is-matching|h)> (h-ty, e-ty)

  // map select
  gen-implicit-info-term(is-matching):
    DeAssoc(l-t, _) -> <fail>
    where
      ListType(f-l-ty) := <gen-implicit-info-type-of(is-matching); get-alias-base> l-t;
      a-l-ty := <gen-implicit-info-type-of(is-matching)> l-t;
      <gen-implicit-info-fact(is-matching|l-t)> (a-l-ty, f-l-ty)

  // list index access
  gen-implicit-info-term(is-matching):
    deassoc-like -> <fail>
    where
      ?DeAssoc(map-t, key-t) + ?MapHas(map-t, key-t)
    where
      MapType(f-key-ty, _) := <gen-implicit-info-type-of(is-matching); get-alias-base> map-t;
      a-key-ty := <gen-implicit-info-type-of(is-matching)> key-t;
      <gen-implicit-info-fact(is-matching|key-t)> (a-key-ty, f-key-ty)
  
  gen-implicit-info-term(is-matching):
    MapUnbind(map, key) -> <fail>
    where not(is-matching)
    where
      MapType(f-key-ty, _) := <gen-implicit-info-type-of(is-matching); get-alias-base> map;
      a-key-ty := <gen-implicit-info-type-of(is-matching)> key;
      <gen-implicit-info-fact(is-matching|key)> (a-key-ty, f-key-ty)

  gen-implicit-info-fact(is-matching|on-term) =
    (is-matching < Swap + id);
    ?(actual-ty, expected-ty);
    not(type-coerce-direct(is-matching));
    type-coerce-implicit(is-matching, type-coerce-full(is-matching));
    type-path-to-string(is-matching);
    ?path-string;
    add-msg(|Note(), on-term, $[Term of type [<pp-type> actual-ty] conforms to type [<pp-type> expected-ty] by implicit conversions: [path-string]])
  
  gen-implicit-info-fact(is-matching):
    (t, ex-ty) -> <gen-implicit-info-fact(is-matching|t)> (actual-ty, ex-ty)
    where
      actual-ty := <gen-implicit-info-type-of(is-matching)> t

  gen-implicit-info-type-of(is-matching) = type-of








