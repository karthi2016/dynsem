module analysis/store-rules

imports
  include/ds
  analysis/lib-analysis
  analysis/constructors
	pp
  ds

rules /* store variables */
  
  store-rules = map(store-rule)
  
  store-rule:
    r@Rule(p*, _, Relation(Reads(r*), Source(lhs, sc*), NamedDynamicEmitted(_, arrow-name), Target(rhs, tc*))) -> r
    where
      ArrowType(ma-ty, bu-ty) := <lookup-def(|Arrows()); lookup-prop(|Type())> arrow-name;
      <type-of-top> (ma-ty, lhs);
      <map(\ LabelComp(ty, v) -> (<rw-type> ty, v) \; type-of-top)> [r*, sc*];
      <map(type-check-premise-top)> p*;
      <type-of-top> (bu-ty, rhs);
      <map(\ LabelComp(ty, v) -> (<rw-type> ty, v) \; type-of-top)> tc*
  
  type-of-top = 
  	type-of
    <+
    where(
    	?(ty, t);
    	ty-str := <pp-type> ty;
      <add-msg(|Error(), t, $[Type check failed: term is incompatible with type [ty-str]])> t;
      <debug(!"Type check failed: ")> t
    )
  
  type-of:
    (ty, dec) -> ty
    where
      <?Var(v) + ?MatchedVar(v)> dec
    where
      <store-def(|Vars())> v => v-def;
      <store-prop(|Type(), v-def)> ty
  
  type-of:
    (ty, Int(_)) -> IntType()
    where
      <type-coerce> (IntType(), ty)

  type-of:
    (ty, bool) -> BoolType()
    where
      <?True() + ?False()> bool;
      <type-coerce> (IntType(), ty)
  
  type-of:
    (ty, VarRef(v)) -> ty'
    where
      <lookup-def(|Vars()); lookup-prop(|Type())> v => v-ty;
      <type-coerce> (v-ty, ty) => ty'
  
  type-of:
    (ty, Con(c, child*)) -> ty-con
    where
      ConstructorType(child-ty*, ty-con) := <lookup-def(|Constructors()); lookup-prop(|Type())> c;
      <zip; map(type-of-top)> (child-ty*, child*)

  type-of:
  	(ty, List([])) -> ty'
  	where
  		<type-coerce> (ListType(AnyType()), ty) => ty'
  
  type-of:
    (ty, ListTail([h], t)) -> ty'
    where
      <type-of-top> (ty, t) => l-ty@ListType(elem-ty);
      <type-of-top> (elem-ty, h) => head-ty;
      <type-coerce> (ty, ListType(head-ty)) => ty'

  // SortFunCall("makeList",VarRef("tf249"),[VarRef("ts171")])
  type-of:
    (ty, SortFunCall(fun-name, par, arg*)) -> ty'
    where
      <type-of> (AnyType(), par) => parent-ty;
      <lookup-def(|NativeType())> parent-ty => parent-def;
      <lookup-native-fun-def(|fun-name)> parent-def => fun-def;
      <lookup-prop(|Type())> fun-def => FunctionType(farg*, ty');
      <zip; map(type-of-top)> (farg*, arg*)
  
  lookup-native-fun-def(|fun-name):
    parent-def -> <lookup-def(|NativeDTFun(parent-def))> fun-name
  
  lookup-native-fun-def(|fun-name):
    parent-def -> <lookup-native-fun-def(|fun-name)> sup-def
    where
      <not(lookup-def(|NativeDTFun(parent-def)))> fun-name
    where
      <lookup-prop(|SuperType()); lookup-def(|NativeType())> parent-def => sup-def
    
  type-check-premise-top =
  	type-check-premise
    <+
  	where(
  		?p;
  		p-str := <pp-dynsem-Premise-string> p;
    	add-msg(|Error(), p, $[Premise type check failed: [p-str]]);
    	<debug(!"Premise check failed: ")> p
  	)

  type-check-premise:
  	f@Formula(TermEq(lhs, rhs)) -> f
  	where
  		<type-of-top> (AnyType(), lhs);
  		<type-of-top> (AnyType(), rhs)
  
  type-check-premise:
    f@Formula(TermNeq(lhs, rhs)) -> f
    where
      <type-of-top> (AnyType(), lhs);
      <type-of-top> (AnyType(), rhs)

  type-check-premise:
    f@Formula(Match(lhs, rhs)) -> f
    where
      <type-of-top> (AnyType(), lhs) => lhs-ty;
      <type-of-top> (lhs-ty, rhs) => rhs-ty
  
  type-check-premise:
  	f@Formula(Relation(Reads(r*), Source(lhs, sc*), NamedDynamicEmitted(_, arrow-name), Target(rhs, tc*))) -> f
    where
    	ArrowType(bu-ty, ma-ty) := <lookup-def(|Arrows()); lookup-prop(|Type())> arrow-name;
    	<type-of-top> (bu-ty, lhs);
    	<type-of-top> (ma-ty, rhs);
    	<map(\ LabelComp(l, r) -> (<rw-type> l, r) \; type-of-top)> [r*, sc*, tc*]
      
  type-check-premise:
  	f@Formula(NMatch(lhs, rhs)) -> f
  	where
  		<type-of-top> (AnyType(), lhs);
  		<type-of-top> (AnyType(), rhs)

  type-check-premise:
  	f@TryOr(PremiseBlock(l*), PremiseBlock(r*)) -> f
    with
      <map(type-check-premise-top)> l*;
      <map(type-check-premise-top)> r*

  type-check-premise:
    f@MergePoint(cond, PremiseBlock(l*), PremiseBlock(r*)) -> f
    with
    	<type-check-premise-top> cond;
      <map(type-check-premise-top)> l*;
      <map(type-check-premise-top)> r*

rules
  
  // type-coerce-or-err = type-coerce <+ ?(ty1, ty2)
  /**
  * We have a type ty-from that needs to conform to 
  * ty-to
  */
  type-coerce = eq
    
  type-coerce:
  	(ty-from, AnyType()) -> ty-from
  
  type-coerce:
    (ListType(ty-from), ListType(ty-to)) -> <type-coerce> (ty-from, ty-to)
  
  type-coerce:
    (ty-from, ty-to) -> <type-coerce> (sup-ty, ty-to)
    where
      <not(eq)> (ty-from, ty-to);
      <lookup-def(|Types()); lookup-prop(|SuperType())> ty-from => sup-ty

  type-coerce:
    (ty-from, ty-to) -> <type-coerce> (sup-ty, ty-to)
    where
      <not(eq)> (ty-from, ty-to);
      <lookup-def(|NativeType()); lookup-prop(|SuperType())> ty-from => sup-ty

  
