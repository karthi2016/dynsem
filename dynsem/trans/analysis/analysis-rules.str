module analysis/analysis-rules

imports
  include/ds
  analysis/lib-analysis
  analysis/constructors
  analysis/rename
	pp
  ds
  lib-ds

rules /* syntactic checks */

  post-analysis-checks = alltd(post-analysis-check)
  
  post-analysis-check:
    r@Rule(_, _, Relation(_, Source(lhs, _), _, _)) -> r
    where
      <not(?Con(_, _) + ?As(_, Con(_, _)))> lhs;
      add-msg(|Warning(), lhs, $[Left hand side of reduction must be a constructor pattern])
  
  post-analysis-check:
    dec -> dec
    where
      <?Var(v) + ?MatchedVar(v)> dec
    where
      <lookup-def(|Vars()); not(lookup-prop(|Use()))> v;
      add-msg(|Warning(), dec, $[Variable [<unrename-var> v] is never read])

rules /* store variables */
  
  store-rules = Rules(map(store-rule))

  store-rule:
    r@Rule(_, _, Relation(_, Source(lhs, _), arr@NamedDynamicEmitted(_, arrow-name), _)) -> r
    where
      As(_, con@Con(c, _)) := lhs
      <+
      con@Con(c, _) := lhs
    where
      con-def := <lookup-def(|Constructors())> c;
      ConstructorType(_, con-ty) := <lookup-prop(|Type())> con-def;
      if arrow-def := <lookup-def(|Arrows())> arrow-name
      then
	      arrow-ty* := <lookup-props(|Type())> arrow-def;
	      if <select-arrow> (arrow-ty*, con-ty) => arrow-ty
	      then
	        {| InArrow:
	          rules(InArrow: _ -> arrow-def);
	          <store-rule> (arrow-ty, r)
	        |}
	      else
	        arrow-ma-ty* := <map(?ArrowType(<id>, _))> arrow-ty*;
	        add-msg(|Error(), con, $[Expected one of: [<pp-type> arrow-ma-ty*] but found [<pp-type> con-ty]])
	      end
	    else
        add-msg(|Error(), arr, $[Arrow [arrow-name] is not declared])
      end

  store-rule:
    (ArrowType(ma-ty, bu-ty), r@Rule(p*, _, Relation(Reads(r*), Source(lhs, sc*), _, Target(rhs, tc*)))) -> r
    where
      <type-of-top> (ma-ty, lhs);
      <map(\ LabelComp(ty, v) -> (<rw-type> ty, v) \; type-of-top)> [r*, sc*];
      <map(type-check-premise-top)> p*;
      <type-of-top> (bu-ty, rhs);
      <map(\ LabelComp(ty, v) -> (<rw-type> ty, v) \; type-of-top)> tc*

  select-arrow:
    (arrow-type*, con-ty) -> <fetch-elem(where(\ ArrowType(ma-ty, _) -> <type-coerce> (con-ty, ma-ty) \))> arrow-type*

  type-of-top =
  	type-of
    <+
    type-of-failure

  type-of-failure:
    (ty, t) -> ty
    where
      ty-str := <ensure(pp-type)> ty;
      add-msg(|Error(), t, $[Type check failed: term is incompatible with type [ty-str]]);
      <debug(!"Type check failed, msg created: ")> t

  type-of:
    (ty, Wld()) -> ty
  
  type-of:
    (ty, dec) -> ty
    where
      <?Var(v) + ?MatchedVar(v)> dec
    where
      <store-def(|Vars())> v => v-def;
      <store-prop(|Type(), v-def)> ty

  type-of:
    (ty, r@VarRef(v)) -> ty'
    where
      <lookup-def(|Vars())> v => v-def;
      <store-prop(|Use(), v-def)> r;
      <lookup-prop(|Type())> v-def => v-ty;
      <type-coerce> (v-ty, ty) => ty'

  type-of:
    (ty, r@VarRef(v)) -> ty'
    where
      <lookup-def(|Vars())> v => v-def;
      <lookup-prop(|Type())> v-def => v-ty;
      <not(type-coerce)> (v-ty, ty);
      <type-reduce> (v-ty, ty) => ty'

  type-of:
    (ty, Int(_)) -> IntType()
    where
      <type-coerce> (IntType(), ty)

  type-of:
    (ty, bool) -> BoolType()
    where
      <?True() + ?False()> bool;
      <type-coerce> (BoolType(), ty)

  type-of:
    (ty, String(_)) -> StringType()
    where
      <type-coerce> (StringType(), ty)

  type-of:
    (ty, Fresh()) -> IntType()
    where
      <type-coerce> (IntType(), ty)
  
  type-of:
    (ty, ref@VarRef(v)) -> ty
    where
      <not(lookup-def(|Vars()))> v => v-ty;
      add-msg(|Error(), ref, $[Variable [<unrename-var> v] cannot be resolved])
  
  type-of:
    (ty, Con(c, child*)) -> ty-con
    where
      ConstructorType(fchild-ty*, ty-con) := <lookup-def(|Constructors()); lookup-prop(|Type())> c;
      <type-coerce> (ty-con, ty);
      <zip; map(type-of-top)> (fchild-ty*, child*)
  
  type-of:
    (ty, Con(c, child*)) -> ty-con
    where
      ConstructorType(fchild-ty*, ty-con) := <lookup-def(|Constructors()); lookup-prop(|Type())> c;
      <not(type-coerce)> (ty-con, ty);
      <type-reduce <+ swap; type-reduce> (ty, ty-con);
      <zip; map(type-of-top)> (fchild-ty*, child*)

  type-of:
    (ty, Cast(ref, ty-trm)) -> ty'
    where
      <rw-type> ty-trm => ty-cast;
      <type-of-top> (NONETYPE(), ref);
      <type-coerce> (ty-cast, ty) => ty'

  type-of:
  	(ty, As(v, pat)) -> ty'
  	where
  	  <type-of-top> (ty, pat) => ty';
  	  <type-of-top> (ty', v)

  type-of:
  	(ty, List([])) -> ty'
  	where
  		<type-coerce> (ListType(ALPHATYPE()), ty) => ty'
  
  type-of:
    (ty, ListTail([h], t)) -> ty'
    where
      <type-of-top> (ty, t) => l-ty@ListType(ALPHATYPE());
      <type-of-top> (NONETYPE(), h) => head-ty;
      <type-coerce> (ListType(head-ty), ty) => ty'
      
  type-of:
    (ty, ListTail([h], t)) -> ty'
    where
      <type-of-top> (ty, t) => l-ty@ListType(elem-ty);
      <not(?ALPHATYPE())> elem-ty;
      <type-of-top> (elem-ty, h) => head-ty;
      <type-coerce> (ListType(head-ty), ty) => ty'

  type-of:
    (ty, SortFunCall(fun-name, par, arg*)) -> ty'
    where
      <type-of-top> (NONETYPE(), par) => parent-ty;
      <lookup-def(|Types())> parent-ty => parent-def;
      <lookup-prop(|SortKind())> parent-def => NativeSort();
      <lookup-native-fun-def(|fun-name)> parent-def => fun-def;
      <lookup-prop(|Type())> fun-def => FunctionType(farg*, ty');
      <zip; map(type-of-top)> (farg*, arg*)

  type-of:
    (ty, Map([])) -> ty'
    where
      <type-coerce> (MapType(ALPHATYPE(), ALPHATYPE()), ty) => ty'

  type-of:
    (ty, MapSelect(map-trm, key-trm)) -> val-ty'
    where
      <type-of-top> (NONETYPE(), map-trm) => maybe-map-ty;
      if <?MapType(key-ty, val-ty)> maybe-map-ty
      then
        id
      else
        <lookup-def(|Types()); lookup-prop(|SuperType())> maybe-map-ty => MapType(key-ty, val-ty)
      end;
      <type-of-top> (key-ty, key-trm) => key-ty;
      <type-coerce> (val-ty, ty) => val-ty'
  
  type-of:
    (ty, Map([Bind(key-val, val-val)])) -> ty'
    where
      <type-of-top> (NONETYPE(), key-val) => key-ty;
      <type-of-top> (NONETYPE(), val-val) => val-ty;
      map-ty := MapType(key-ty, val-ty);
      <type-coerce> (map-ty, ty) => ty'

  type-of:
    (ty, mx@MapExtend(map1, map2)) -> maps-ty
    where
      <type-of-top> (NONETYPE(), map1) => map1-ty;
      <type-of-top> (NONETYPE(), map2) => map2-ty;
      (
        <type-coerce-sym> (map1-ty, map2-ty) => maps-ty
        <+
        add-msg(|Error(), mx, $[Type [<ensure(pp-type)> map1-ty] is not coercible to type [<ensure(pp-type)> map2-ty]])
      );
      <type-coerce> (maps-ty, ty)

  lookup-native-fun-def(|fun-name):
    parent-def -> <lookup-def(|NativeDTFun(parent-def))> fun-name
  
  lookup-native-fun-def(|fun-name):
    parent-def -> <lookup-native-fun-def(|fun-name)> sup-def
    where
      <not(lookup-def(|NativeDTFun(parent-def)))> fun-name
    where
      <lookup-prop(|SuperType()); lookup-def(|Types())> parent-def => sup-def;
      <lookup-prop(|SortKind())> sup-def => NativeSort()
    
  type-check-premise-top =
  	type-check-premise
    <+
  	where(
  		?p;
  		p-str := <ensure(pp-dynsem-Premise-string)> p;
    	add-msg(|Error(), p, $[Premise type check failed: [p-str]]);
    	<debug(!"Premise check failed: ")> p
  	)

  type-check-premise:
  	f@Formula(TermEq(lhs, rhs)) -> f
  	where
  		<type-of-top> (NONETYPE(), lhs);
  		<type-of-top> (NONETYPE(), rhs)
  
  type-check-premise:
    f@Formula(TermNeq(lhs, rhs)) -> f
    where
      <type-of-top> (NONETYPE(), lhs);
      <type-of-top> (NONETYPE(), rhs)

  type-check-premise:
    f@Formula(Match(lhs, rhs)) -> f
    where
      <type-of-top> (NONETYPE(), lhs) => lhs-ty;
      <type-of-top> (lhs-ty, rhs) => rhs-ty
  
  type-check-premise:
  	f@Formula(Relation(Reads(r*), Source(lhs, sc*), NamedDynamicEmitted(_, arrow-name), Target(rhs, tc*))) -> f
    where
    	<type-of-top> (NONETYPE(), lhs) => lhs-ty;
    	if arrow-def := <lookup-def(|Arrows())> arrow-name
    	then
	      arrow-ty* := <lookup-props(|Type())> arrow-def;
	      if <select-arrow> (arrow-ty*, lhs-ty) => ArrowType(bu-ty, ma-ty)
	      then
	        <type-of-top> (bu-ty, lhs);
	        <type-of-top> (ma-ty, rhs);
	        <map(\ LabelComp(l, r) -> (<rw-type> l, r) \; type-of-top)> [r*, sc*, tc*]
	      else
	        arrow-ma-ty* := <map(?ArrowType(<id>, _))> arrow-ty*;
	        add-msg(|Error(), lhs, $[Expected one of: [<pp-type> arrow-ma-ty*] but found [<pp-type> lhs-ty]])
	      end
	    else
	      add-msg(|Error(), arrow-name, $[Arrow [arrow-name] is not declared])
	    end
      
  type-check-premise:
  	f@Formula(NMatch(lhs, rhs)) -> f
  	where
  		<type-of-top> (NONETYPE(), lhs);
  		<type-of-top> (NONETYPE(), rhs)

  type-check-premise:
    f@Formula(TypeCast(r@VarRef(v-name), ty-term)) -> f
    where
      <rw-type> ty-term => ty;
      <lookup-def(|Vars())> v-name => v-def;
      <store-prop(|Use(), v-def)> r; 
      <lookup-prop(|Type())> v-def => v-ty;
      <store-prop(|Type(), v-def)> ty;
      if <not(type-coerce)> (ty, v-ty)
      then
        add-msg(|Warning(), f, $[Term might be uncoerceable to [<pp-type> ty]])
      end

  type-check-premise:
    f@Formula(TypeCheck(r@VarRef(v-name), ty-term)) -> f
    where
      <rw-type> ty-term => ty;
      <lookup-def(|Vars())> v-name => v-def;
      <store-prop(|Use(), v-def)> r; 
      <lookup-prop(|Type())> v-def => v-ty;
      if <not(type-coerce)> (ty, v-ty)
      then
        add-msg(|Warning(), f, $[Term might be uncoerceable to [<pp-type> ty]])
      end

  type-check-premise:
  	f@TryOr(PremiseBlock(l*), PremiseBlock(r*)) -> f
    with
      <map(type-check-premise-top)> l*;
      <map(type-check-premise-top)> r*

  type-check-premise:
    f@MergePoint(cond, PremiseBlock(l*), PremiseBlock(r*)) -> f
    with
    	<type-check-premise-top> cond;
      <map(type-check-premise-top)> l*;
      <map(type-check-premise-top)> r*
  
  type-check-premise = ?AllFail()

rules
  
  type-coerce:
    (ty-from, ty-to) -> <fail>
  
  type-coerce = (eq <+ ?(_, NONETYPE())); Fst
  
  type-coerce:
  	(IntType(), RealType()) -> RealType()

  type-coerce:
    (ListType(ALPHATYPE()), to-ty@ListType(_)) -> to-ty

  type-coerce:
    (ListType(ty-from), ListType(ty-to)) -> <type-coerce> (ty-from, ty-to)
  
  type-coerce:
    (ty-from, ty-to) -> <type-coerce> (sup-ty, ty-to)
    where
      <lookup-def(|Types()); lookup-prop(|SuperType())> ty-from => sup-ty

  type-coerce:
    (ALPHATYPE(), ty) -> ty

  type-coerce:
    (MapType(a-k-ty, a-v-ty), to-ty) -> to-ty
    where
      <lookup-def(|Types())> to-ty => to-ty-def;
      <lookup-prop(|SortKind())> to-ty-def => SemanticCompSort();
      <lookup-prop(|SuperType())> to-ty-def => MapType(e-k-ty, e-v-ty);
      <type-coerce> (a-k-ty, e-k-ty);
      <type-coerce> (a-v-ty, e-v-ty)

  type-reduce:
    (ty-reduce-from, ty-reduce-to) -> ty-to'
    where
      arrow-ty* := <lookup-props(|Type())> <InArrow>;
      ArrowType(_, bu-ty) := <select-arrow> (arrow-ty*, ty-reduce-from);
      ty-to' := <type-coerce> (bu-ty, ty-reduce-to)

  type-coerce-sym =
    type-coerce
    <+ swap; type-coerce

