module ds

imports
	signatures/ds-sig

imports
	stratego/metaborg
	pp
	outline
	ds2ds/refocus
	ds2ds/strict

imports
  lib-ds
	ds2ds/sugar
	ds2ds/factorize
	ds2ds/explicate
	analysis/resolve-includes
	ds2ds/fuse-sections
	ds2ds/copy-propagation
	ds2ds/constant-propagation
	ds2ds/expand-implicits
	ds2ds/desugar-varschemes
	ds2ds/extra-typeannos
	ds2ds/desugar-aliases
	ds2ds/meta-functions
	analysis/main
	analysis/lib-analysis
	analysis/constructors
//	backend/java-backend/main
	backend/java-backend/utils
	backend/interpreter/main
	
signature
  constructors
    Var : LID -> Term
    Var : ID -> Term
    MatchedVar : ID -> Term

rules // Analysis
	
  editor-analyze:
    (ast, path, project-path) -> (analyzed-ast, error*, warning*, note*)
		with {| MyCurrentFile:
		  f-path := $[[project-path]/[path]];
		  rules(MyCurrentFile: _ -> f-path);
		  editor-init;
		  f := <origin-file> ast;
			<in-project-path(m-in-analysis(
				where(
		  		get-msgs(msg-isin-file(|f); msg-mk-editor-msg| Error()) => error*;
		  		get-msgs(msg-isin-file(|f); msg-mk-editor-msg| Warning()) => warning*;
		  		get-msgs(msg-isin-file(|f); msg-mk-editor-msg| Note()) => note*
		  	)
			)|project-path)> ast => analyzed-ast
		|}
	
	editor-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, analyzed-ast)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			(analyzed-ast, _, _, _) := <editor-analyze> (ast, path, project-path)
			
rules
  
  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
    ?(filename, string);
    if <dirname; readdir> filename then
      with(
        handle := <fopen> (filename, "w");
        <fputs> (string, handle);
        <fclose> handle;
        <refresh-workspace-file> filename
      )
    end
    
rules // Editor services
	editor-resolve:
	  (node, position, ast, path, project-path) -> <fail>
  
  editor-hover:
    (target, position, ast, path, project-path) -> <fail>


	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	// editor-resolve:
	// 	(node, position, ast, path, project-path) -> definition
	// 	where
	// 		definition := <analysis-resolve(|<language>, project-path)> node

	 // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  // editor-hover:
  //   (target, position, ast, path, project-path) ->
  //     <get-editor-properties(pp-ds-string |<language>, project-path);properties-to-html> target

  // Gathers the properties for the properties view.
  // editor-properties:
  //   (target, position, ast, path, project-path) ->
  //     <get-all-editor-properties(pp-ds-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	// editor-complete:
	// 	(node, position, ast, path, project-path) -> proposals
	// 	where
	// 		proposals := <analysis-propose-completions(|<language>, project-path)> ast

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
  debug-show-desugared:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.aterm")> path;
      result   := <desugar-top> ast
			
rules // Builders
  
  refocus-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"refocused.ds")> path;
      result   := <refocus-module; pp-debug> selected

  flatten-imports-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"imported.ds")> path;
      in-project-path(
        result := <include-imports; sugar-all; pp-debug> ast
      |project-path)

  add-extra-typeannos-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"typeannos.ds")> path;
      in-project-path(
        result := <include-imports; desugar-top; fuse-sections; add-extra-typeannos-module; sugar-all; pp-debug> ast
      |project-path)
  
  rewrite-metafunctions-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"metafuncs.ds")> path;
      in-project-path(
        result := <include-imports; desugar-top; fuse-sections; unmetafunc-module; sugar-all; pp-debug> ast
      |project-path)

  desugar-aliases-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"noaliases.ds")> path;
      in-project-path(
        result := <include-imports; desugar-top; fuse-sections; desugar-aliases-module; sugar-all; pp-debug> ast
      |project-path)

  expand-implicits-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explimpls.ds")> path;
      in-project-path(
        result := <include-imports; desugar-top; fuse-sections; expand-implicits-module; sugar-all; pp-debug> ast
      |project-path)

  desugar-varschemes-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"varschemes.ds")> path;
      in-project-path(
        result := <include-imports; desugar-top; fuse-sections; desugar-varschemes-module; sugar-all; pp-debug> ast
      |project-path)

  explicate-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explicated.ds")> path;
      in-project-path(
        result   := <include-imports; desugar-top; fuse-sections; explicate-module; sugar-all; pp-debug> ast
      |project-path)

  factorize-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"factorized.ds")> path;
      in-project-path(
        result := <include-imports; desugar-top; fuse-sections; factorize-module; sugar-all; pp-debug> ast
      |project-path)

  copy-propagation-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"copyprop.ds")> path;
      in-project-path(
        result   := <include-imports; desugar-top; copy-propagation-module; sugar-all; pp-debug> ast
      |project-path)

  constant-propagation-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"constprop.ds")> path;
      in-project-path(
        result   := <include-imports; desugar-top; constant-propagation-module; sugar-all; pp-debug> ast
      |project-path)

//  all-to-java-editor:
//    (_, _, ast, path, project-path) -> None()
//    with
//      in-project-path(
//        init-options(|path, project-path);
//	      <log-timed(
//	        log-timed(
//	          include-imports | "Import flattening"
//	        );
//	        log-timed(
//	          desugar-top; fuse-sections | "Desugaring"
//	        );
//	        log-timed(
//	          desugar-varschemes-module | "Desugaring variable schemes"
//	        );
//	        log-timed(
//	          add-extra-typeannos-module | "Adding extra typeannos"
//	        );
//	        log-timed(
//            desugar-aliases-module | "Desugaring aliases"
//          );
//	        log-timed(
//	          factorize-module | "Factorization 1/2"
//	        );
//	        log-timed(
//	          expand-implicits-module | "Implicits expansion"
//	        );
//	        log-timed(
//	          factorize-module | "Factorization 2/2"
//	        );
//	        log-timed(
//	          explicate-module | "Explication"
//	        );
//	        log-timed(
//            copy-propagation-module | "Copy propagation"
//          );
//          log-timed(
//            constant-propagation-module | "Constant propagation"
//          );
//	        log-timed(
//	          ds2java | "Interpreter generation"
//	        )
//	      | "Total")> ast
//	    |project-path)
      
  all-to-core-editor:
    (_, position, ast, path, project-path) -> (filename, result)
    with
      result := <in-project-path(
  	      init-options(|path, project-path);
          include-imports;
          desugar-top;
          fuse-sections;
          desugar-varschemes-module;
          add-extra-typeannos-module;
          desugar-aliases-module;
          factorize-module;
          expand-implicits-module;
          factorize-module;
          explicate-module;
          copy-propagation-module;
          constant-propagation-module;
          defactorize-module;
          sugar-all;
          pp-debug
        |project-path)> ast;
      filename := <guarantee-extension(|"core.ds")> path
      
  // format rules
  format-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"pp.ds")> path;
      result   := <pp-debug> ast

  unstrict-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"unstrict.ds")> path;
      result   := <unstrict-rules; pp-debug> selected
