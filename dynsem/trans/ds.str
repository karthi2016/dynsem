module ds

imports
	include/ds

imports
	lib/editor-common.generated
	pp
	outline
	ds2ds/refocus
	ds2ds/strict

imports
  lib-ds
	ds2ds/sugar
	ds2ds/factorize
	ds2ds/explicate
	analysis/resolve-includes
	ds2ds/merge-rules
	ds2ds/fuse-sections
	ds2ds/copy-propagation
	ds2ds/constant-propagation
	ds2ds/expand-implicits
	ds2ds/desugar-varschemes
	ds2ds/extra-typeannos
	analysis/main
	analysis/lib-analysis
	analysis/constructors
	backend/java-backend/main
	backend/java-backend/utils
	
signature
  constructors
    Var : LID -> Term
    Var : ID -> Term
    MatchedVar : ID -> Term

rules // Analysis
	
  editor-analyze:
    (ast, path, project-path) -> (analyzed-ast, error*, warning*, note*)
		with
		  editor-init;
			<in-project-path(m-in-analysis(
				where(
		  		get-msgs(mkmsg|Error()) => error*;
		  		get-msgs(mkmsg|Warning()) => warning*;
		  		get-msgs(mkmsg|Note()) => note*
		  	)
			)|project-path)> ast => analyzed-ast
	
	editor-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, analyzed-ast)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			(analyzed-ast, _, _, _) := <editor-analyze> (ast, path, project-path)
			
  mkmsg: Message(_, t, s) -> (t, s)
	
rules
  
  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
    ?(filename, string);
    if <dirname; readdir> filename then
      with(
        handle := <fopen> (filename, "w");
        <fputs> (string, handle);
        <fclose> handle;
        <refresh-workspace-file> filename
      )
    end
    
rules // Editor services
	editor-resolve:
	  (node, position, ast, path, project-path) -> <fail>
  
  editor-hover:
    (target, position, ast, path, project-path) -> <fail>


	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	// editor-resolve:
	// 	(node, position, ast, path, project-path) -> definition
	// 	where
	// 		definition := <analysis-resolve(|<language>, project-path)> node

	 // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  // editor-hover:
  //   (target, position, ast, path, project-path) ->
  //     <get-editor-properties(pp-ds-string |<language>, project-path);properties-to-html> target

  // Gathers the properties for the properties view.
  // editor-properties:
  //   (target, position, ast, path, project-path) ->
  //     <get-all-editor-properties(pp-ds-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	// editor-complete:
	// 	(node, position, ast, path, project-path) -> proposals
	// 	where
	// 		proposals := <analysis-propose-completions(|<language>, project-path)> ast

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
  debug-show-desugared:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.aterm")> path;
      result   := <desugar-top> ast
			
rules // Builders
  
  refocus-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"refocused.ds")> path;
      result   := <refocus-module; pp-debug> selected

  add-extra-typeannos-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"typeannos.ds")> path;
      in-project-path(
        result := <resolve-includes(fatal-err-missing-import); desugar-top; fuse-sections; add-extra-typeannos-module; sugar-all; pp-debug> ast
      |project-path)

  expand-implicits-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explimpls.ds")> path;
      in-project-path(
        result := <resolve-includes(fatal-err-missing-import); desugar-top; fuse-sections; expand-implicits-module; sugar-all; pp-debug> ast
      |project-path)

  desugar-varschemes-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"varschemes.ds")> path;
      in-project-path(
        result := <resolve-includes(fatal-err-missing-import); desugar-top; fuse-sections; desugar-varschemes-module; sugar-all; pp-debug> ast
      |project-path)

  explicate-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explicated.ds")> path;
      in-project-path(
        result   := <resolve-includes(fatal-err-missing-import); desugar-top; fuse-sections; explicate-module; sugar-all; pp-debug> ast
      |project-path)

  factorize-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"factorized.ds")> path;
      in-project-path(
        result := <resolve-includes(fatal-err-missing-import); desugar-top; fuse-sections; factorize-module; sugar-all; pp-debug> ast
      |project-path)

  merge-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"merged.ds")> path;
      in-project-path(
        result   := <resolve-includes(fatal-err-missing-import); desugar-top; fuse-sections; merge-rules-in-module-top; sugar-all; pp-debug> ast
      |project-path)

  copy-propagation-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"copyprop.ds")> path;
      in-project-path(
        result   := <resolve-includes(fatal-err-missing-import); desugar-top; copy-propagation-module; sugar-all; pp-debug> ast
      |project-path)

  constant-propagation-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"constprop.ds")> path;
      in-project-path(
        result   := <resolve-includes(fatal-err-missing-import); desugar-top; constant-propagation-module; sugar-all; pp-debug> ast
      |project-path)

  all-to-java-editor:
    (_, position, ast, path, project-path) -> None()
    with
      in-project-path(
        init-options(|path, project-path);
	      <log-timed(
	        log-timed(
	          resolve-includes(fatal-err-missing-import) | "Import resolutions"
	        );
	        log-timed(
	          desugar-top; fuse-sections | "Desugaring"
	        );
	        log-timed(
	          desugar-varschemes-module | "Desugaring variable schemes"
	        );
	        log-timed(
	          add-extra-typeannos-module | "Adding extra typeannos"
	        );
	        log-timed(
	          factorize-module | "Factorization 1/2"
	        );
	        log-timed(
	          expand-implicits-module | "Implicits expansion"
	        );
	        log-timed(
	          factorize-module | "Factorization 2/2"
	        );
	        log-timed(
	          explicate-module | "Explication"
	        );
	        log-timed(
	          merge-rules-in-module-top  | "Rule merging"
	        );
	        log-timed(
	          copy-propagation-module | "Copy propagation"
	        );
	        log-timed(
	          constant-propagation-module | "Constant propagation"
	        );
	        log-timed(
	          ds2java | "Interpreter generation"
	        )
	      | "Total")> ast
	    |project-path)
      
  all-to-core-editor:
    (_, position, ast, path, project-path) -> (filename, result)
    with
      in-project-path(
	      init-options(|path, project-path);
	      <log-timed(
	        log-timed(
	          resolve-includes(fatal-err-missing-import) | "Processing imports"
	        );
	        log-timed(
	          desugar-top; fuse-sections | "Desugaring"
	        );
	        log-timed(
	          desugar-varschemes-module | "Desugaring variable schemes"
	        );
	        log-timed(
	          add-extra-typeannos-module | "Adding extra typeannos"
	        );
	        log-timed(
	          factorize-module | "Factorization 1/2"
	        );
	        log-timed(
	          expand-implicits-module | "Implicits expansion"
	        );
	        log-timed(
	          factorize-module | "Factorization 2/2"
	        );
	        log-timed(
	          explicate-module | "Explication"
	        );
	        log-timed(
	          merge-rules-in-module-top  | "Rule merging"
	        );
	        log-timed(
	          copy-propagation-module | "Copy propagation"
	        );
	        log-timed(
	          constant-propagation-module | "Constant propagation"
	        );
	        log-timed(
	          sugar-all; pp-debug | "Pretty Printing"
	        )
	      | "Total")> ast => result
      |project-path);
      filename := <guarantee-extension(|"core.ds")> path
      
  // format rules
  format-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"pp.ds")> path;
      result   := <pp-debug> ast

  unstrict-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"unstrict.ds")> path;
      result   := <unstrict-rules; pp-debug> selected
