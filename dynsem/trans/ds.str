module ds

imports
	include/ds

imports
	lib/editor-common.generated
	lib/runtime-libraries/org.spoofax.meta.runtime.libraries/analysis/-
	lib/runtime-libraries/org.spoofax.meta.runtime.libraries/nabl/-
	lib/runtime-libraries/org.spoofax.meta.runtime.libraries/task/-
	lib/runtime-libraries/org.spoofax.meta.runtime.libraries/index/-
	lib/runtime-libraries/org.spoofax.meta.runtime.libraries/editor/properties
	pp
	outline
	ds2ds/refocus
	ds2ds/strict

imports
  lib-ds
	ds2ds/sugar
	ds2ds/factorize
	ds2ds/explicate
	ds2ds/resolve-includes
	ds2ds/merge-rules
	ds2ds/fuse-sections
	ds2ds/copy-propagation
	ds2ds/constant-propagation
	analysis/main
	analysis/lib-analysis
	analysis/constructors
	backend/java-backend/main
	backend/java-backend/utils
	
signature
  constructors
    Var : LID -> Term
    Var : ID -> Term
    MatchedVar : ID -> Term

rules // Analysis
	
  editor-analyze:
    (ast, path, project-path) -> (analyzed-ast, error*, warning*, note*)
		with
		  ast' := <resolve-includes(|path, project-path); desugar-top> ast;
			<m-in-analysis(
				where(
		  		get-msgs(mkmsg|Error()) => error*;
		  		get-msgs(mkmsg|Warning()) => warning*;
		  		get-msgs(mkmsg|Note()) => note*
		  	)
			)> ast' => analyzed-ast
	
	editor-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, analyzed-ast)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			(analyzed-ast, _, _, _) := <editor-analyze> (ast, path, project-path)
			
  mkmsg: Message(_, t, s) -> (t, s)
	
rules
  
  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
    ?(filename, string);
    if <dirname; readdir> filename then
      with(
        handle := <fopen> (filename, "w");
        <fputs> (string, handle);
        <fclose> handle;
        <refresh-workspace-file> filename
      )
    end
    
rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	 // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) ->
      <get-editor-properties(pp-ds-string |<language>, project-path);properties-to-html> target

  // Gathers the properties for the properties view.
  // editor-properties:
  //   (target, position, ast, path, project-path) ->
  //     <get-all-editor-properties(pp-ds-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
  debug-show-desugared:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.aterm")> path;
      result   := <desugar-top> ast
			
	debug-show-index-current =
		analysis-debug-show-current-partition(|<language>)
		 
	debug-show-index-all =
		analysis-debug-show-all-partitions(|<language>)

	debug-show-tasks-selection =
		analysis-debug-show-tasks-selection(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)

  debug-reanalyze = analysis-debug-reanalyze(|<language>)
  
  debug-project = analysis-debug-project(|<language>)
  debug-partition = analysis-debug-partition(|<language>)
  
  debug-index-project = analysis-debug-index-project(|<language>)
  debug-index-partition = analysis-debug-index-partition(|<language>)
  
  debug-task-project = analysis-debug-task-project(|<language>)
  debug-task-partition = analysis-debug-task-partition(|<language>)
  debug-task-selection = analysis-debug-task-selection(|<language>)

rules // Builders
  
  refocus-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"refocused.ds")> path;
      result   := <refocus-module; pp-debug> selected

  explicate-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explicated.ds")> path;
      result   := <resolve-includes(|path, project-path); desugar-top; fuse-sections; explicate-module; sugar-all; pp-debug> ast

  factorize-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"factorized.ds")> path;
      result := <resolve-includes(|path, project-path); desugar-top; fuse-sections; factorize-module; sugar-all; pp-debug> ast

  merge-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"merged.ds")> path;
      result   := <resolve-includes(|path, project-path); desugar-top; fuse-sections; merge-rules-in-module; sugar-all; pp-debug> ast

  copy-propagation-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"copyprop.ds")> path;
      result   := <resolve-includes(|path, project-path); desugar-top; copy-propagation-module; sugar-all; pp-debug> ast

  constant-propagation-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"constprop.ds")> path;
      result   := <resolve-includes(|path, project-path); desugar-top; constant-propagation-module; sugar-all; pp-debug> ast

  all-to-java-editor:
    (_, position, ast, path, project-path) -> None()
    with
      init-options(|path, project-path);
      <log-timed(
        log-timed(
          resolve-includes(|path, project-path) | "Import resolutions"
        );
        log-timed(
          desugar-top; fuse-sections | "Desugaring"
        );
        log-timed(
          explicate-module | "Explication"
        );
        log-timed(
          factorize-module | "Factorization"
        );
        log-timed(
          merge-rules-in-module | "Rule merging"
        );
        log-timed(
          copy-propagation-module | "Copy propagation"
        );
        log-timed(
          constant-propagation-module | "Constant propagation"
        );
        log-timed(
          ds2java | "Interpreter generation"
        )
      | "Total")> ast
      
  // format rules
  format-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"pp.ds")> path;
      result   := <pp-debug> ast

  unstrict-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"unstrict.ds")> path;
      result   := <unstrict-rules; pp-debug> selected
