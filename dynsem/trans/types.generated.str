module trans/types.generated


imports

  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/types/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/relations/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/task/-
  names
  include/ds
  ds
  
signature constructors
  
  
  
rules // functions 
  

rules // relations
  
  relation-is-transitive = ?"<:"
  
  relation-match-custom(|ctx) : 
    ("<:", Var(x), VarRef(y)) -> <task-create-id(|ctx, [eq36])> VarRef(y)
    where 
      eq36 := <type-match(|ctx, y)> x
  
  relation-match-custom(|ctx) : 
    ("<compat:", s-ty, l-ty) -> <task-create-id(|ctx, [or56])> l-ty
    where 
      eq37 := <type-match(|ctx, l-ty)> s-ty;
      relmatch132 := <relation-create-match(|ctx)> ("<:", s-ty, l-ty);
      or56 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq37, relmatch132]
  

rules // rules
  
  create-type-task(|ctx) :
    Fresh() -> <task-create-id(|ctx,[x3172])> x3172
    where 
      x3172 := <type-is(|ctx)> SimpleSort("Int")
  
  create-type-task(|ctx) :
    Var(x) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> x
  
  create-type-task(|ctx) :
    VarRef(x) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> x
  
  create-type-task(|ctx) :
    MatchedVar(x) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> x
  
  create-type-task(|ctx) :
    As(x, t) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> x
  
  create-type-task(|ctx) :
    Con(c, t_) -> <task-create-id(|ctx,[relmatch126])> ty
    where 
      x3173 := <type-lookup(|ctx)> c;
      ty_ := <new-task(|ctx)> Rewrite("proj188", x3173); task-create-id(|ctx, [x3173]);
      ty := <new-task(|ctx)> Rewrite("proj189", x3173); task-create-id(|ctx, [ty_]);
      ty_t_ := <type-task(|ctx); task-create-id(|ctx, [ty])> t_;
      relmatch126 := <relation-create-match(|ctx); task-create-id(|ctx, [ty_t_])> ("<compat:", ty_t_, ty_);
      <task-create-error-on-failure(|ctx, relmatch126, "types of sub-terms do not match constructor definition")> c
  
  create-type-task(|ctx) :
    l@List([]) -> <task-create-id(|ctx,[l-ty])> l-ty
    where 
      l-ty4 := <expected-type-task(|ctx)> l;
      l-ty5 := <type-is(|ctx)> ListSort(SimpleSort("Term"));
      or54 := <type-is(|ctx)> <task-create-choice(|ctx)> [l-ty4, l-ty5];
      l-ty := <type-is(|ctx); task-create-id(|ctx, [or54])> <task-create-choice(|ctx)> [l-ty4, l-ty5]
  
  create-type-task(|ctx) :
    lt@ListTail([x], _) -> <task-create-id(|ctx,[lt-ty])> lt-ty
    where 
      lt-ty4 := <expected-type-task(|ctx)> lt;
      x-ty := <type-task(|ctx)> x;
      lt-ty5 := <type-is(|ctx); task-create-id(|ctx, [x-ty])> ListSort(x-ty);
      or55 := <type-is(|ctx)> <task-create-choice(|ctx)> [lt-ty4, lt-ty5];
      lt-ty := <type-is(|ctx); task-create-id(|ctx, [or55])> <task-create-choice(|ctx)> [lt-ty4, lt-ty5]
  
  nabl-constraint(|ctx) :
    LabelComp(lc, e) -> <fail>
    where 
      lc-ty := <type-lookup(|ctx)> lc;
      e-ty := <type-task(|ctx); task-create-id(|ctx, [lc-ty])> e;
      relmatch127 := <relation-create-match(|ctx); task-create-id(|ctx, [e-ty])> ("<compat:", e-ty, lc-ty);
      <task-create-error-on-failure(|ctx, relmatch127, "expression type is incompatible with component type")> e
  
  create-type-task(|ctx) :
    SortFunCall(f, parent-ref, aparam_) -> <task-create-id(|ctx,[relmatch128])> ty
    where 
      x3174 := <type-lookup(|ctx)> f;
      fparam_ty_ := <new-task(|ctx)> Rewrite("proj186", x3174); task-create-id(|ctx, [x3174]);
      ty := <new-task(|ctx)> Rewrite("proj187", x3174); task-create-id(|ctx, [fparam_ty_]);
      aparam_ty_ := <type-task(|ctx); task-create-id(|ctx, [ty])> aparam_;
      relmatch128 := <relation-create-match(|ctx); task-create-id(|ctx, [aparam_ty_])> ("<compat:", aparam_ty_, fparam_ty_);
      <task-create-error-on-failure(|ctx, relmatch128, "actual parameter types are incompatible with formal parameter types")> f
  
  nabl-constraint(|ctx) :
    rel@Relation(_, Source(s, _), NamedDynamicEmitted(_, arrow), Target(t, _)) -> <fail>
    where 
      x3175 := <type-lookup(|ctx)> arrow;
      l-ty := <new-task(|ctx)> Rewrite("proj184", x3175); task-create-id(|ctx, [x3175]);
      r-ty := <new-task(|ctx)> Rewrite("proj185", x3175); task-create-id(|ctx, [l-ty]);
      s-ty := <type-task(|ctx); task-create-id(|ctx, [r-ty])> s;
      t-ty := <type-task(|ctx); task-create-id(|ctx, [s-ty])> t;
      relmatch129 := <relation-create-match(|ctx); task-create-id(|ctx, [t-ty])> ("<compat:", s-ty, l-ty);
      relmatch130 := <relation-create-match(|ctx); task-create-id(|ctx, [relmatch129])> ("<compat:", t-ty, r-ty);
      <task-create-error-on-failure(|ctx, relmatch130, "source and target types are incompatible with arrow definition types")> rel
  
  create-type-task(|ctx) :
    w@Wld() -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <expected-type-task(|ctx)> w
  
  create-type-task(|ctx) :
    Map([]) -> <task-create-id(|ctx,[x3176])> x3176
    where 
      x3176 := <type-is(|ctx)> MapSort(SimpleSort("Term"), SimpleSort("Term"))
  
  create-type-task(|ctx) :
    Map([Bind(key, val)]) -> <task-create-id(|ctx,[x3177])> x3177
    where 
      key-ty := <type-task(|ctx)> key;
      val-ty := <type-task(|ctx); task-create-id(|ctx, [key-ty])> val;
      x3177 := <type-is(|ctx); task-create-id(|ctx, [val-ty])> MapSort(key-ty, val-ty)
  
  create-type-task(|ctx) :
    Map([Binds(key, val)]) -> <task-create-id(|ctx,[x3178])> x3178
    where 
      keys-ty := <type-task(|ctx)> key;
      vals-ty := <type-task(|ctx); task-create-id(|ctx, [keys-ty])> val;
      key-ty := <new-task(|ctx)> Rewrite("proj182", keys-ty); task-create-id(|ctx, [vals-ty]);
      val-ty := <new-task(|ctx)> Rewrite("proj183", vals-ty); task-create-id(|ctx, [key-ty]);
      x3178 := <type-is(|ctx); task-create-id(|ctx, [val-ty])> MapSort(key-ty, val-ty)
  
  create-type-task(|ctx) :
    MapUnbind(map1, map2) -> <task-create-id(|ctx,[map2-ty])> map2-ty
    where 
      map1-ty := <type-task(|ctx)> map1;
      map2-ty := <type-task(|ctx); task-create-id(|ctx, [map1-ty])> map2
  
  create-type-task(|ctx) :
    MapExtend(map1, map2) -> <task-create-id(|ctx,[map2-ty])> map2-ty
    where 
      map1-ty := <type-task(|ctx)> map1;
      map2-ty := <type-task(|ctx); task-create-id(|ctx, [map1-ty])> map2
  
  create-type-task(|ctx) :
    ms@MapSelect(map, key) -> <task-create-id(|ctx,[relmatch131])> def-val-ty
    where 
      map-ty := <type-lookup(|ctx)> map;
      key-val-tys := <stored-tys-lookup(|ctx); task-create-id(|ctx, [map-ty])> map-ty;
      def-key-ty := <new-task(|ctx)> Rewrite("proj180", key-val-tys); task-create-id(|ctx, [key-val-tys]);
      def-val-ty := <new-task(|ctx)> Rewrite("proj181", key-val-tys); task-create-id(|ctx, [def-key-ty]);
      use-key-ty := <type-task(|ctx); task-create-id(|ctx, [def-val-ty])> key;
      relmatch131 := <relation-create-match(|ctx); task-create-id(|ctx, [use-key-ty])> ("<compat:", use-key-ty, def-key-ty);
      <task-create-error-on-failure(|ctx, relmatch131, "incompatible map access")> ms
  
  nabl-constraint(|ctx) :
    InjDecl(ty, p-ty) -> <fail>
    where 
      relstore36 := <new-rel-tuple(|ctx, "<:", p-ty)> ty
  
  nabl-constraint(|ctx) :
    NativeSubTypeDecl(_, ty, sup-ty, _) -> <fail>
    where 
      relstore37 := <new-rel-tuple(|ctx, "<:", sup-ty)> ty
  
  create-type-task(|ctx) :
    Int(i) -> <task-create-id(|ctx,[x3179])> x3179
    where 
      x3179 := <type-is(|ctx)> SimpleSort("Int")
  
  create-type-task(|ctx) :
    Real(r) -> <task-create-id(|ctx,[x3180])> x3180
    where 
      x3180 := <type-is(|ctx)> SimpleSort("Real")
  
  create-type-task(|ctx) :
    String(s) -> <task-create-id(|ctx,[x3181])> x3181
    where 
      x3181 := <type-is(|ctx)> SimpleSort("String")
  
  create-type-task(|ctx) :
    True() -> <task-create-id(|ctx,[x3182])> x3182
    where 
      x3182 := <type-is(|ctx)> SimpleSort("Bool")
  
  create-type-task(|ctx) :
    False() -> <task-create-id(|ctx,[x3183])> x3183
    where 
      x3183 := <type-is(|ctx)> SimpleSort("Bool")
  

rules // projections
  
  task-rewrite :
    ("proj189", (_, ty)) -> ty
  
  task-rewrite :
    ("proj188", (ty_, _)) -> ty_
  
  task-rewrite :
    ("proj187", (_, ty)) -> ty
  
  task-rewrite :
    ("proj186", (fparam_ty_, _)) -> fparam_ty_
  
  task-rewrite :
    ("proj185", (_, r-ty)) -> r-ty
  
  task-rewrite :
    ("proj184", (l-ty, _)) -> l-ty
  
  task-rewrite :
    ("proj183", ListSort(val-ty)) -> val-ty
  
  task-rewrite :
    ("proj182", ListSort(key-ty)) -> key-ty
  
  task-rewrite :
    ("proj181", (_, def-val-ty)) -> def-val-ty
  
  task-rewrite :
    ("proj180", (def-key-ty, _)) -> def-key-ty
  
