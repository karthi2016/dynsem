module sugar

imports
	include/ds
	mark-references
	ds
	
signature
  constructors
    MapExtend : Map * Map -> Map
    MapEntry : Map -> Bind
	
rules // desugaring
	
  desugar-top = innermost(desugar); alltd(rules-concat)
  
  // desugar :
  //   SortDecl(ty) -> InjDecl(ty, "Term")
  
  // desugar :
  //   InternalSortDecl(ty) -> InternalInjDecl(ty, "Term")
    
  desugar :
    NativeNoArgFunctionDecl(name, type) -> NativeFunctionDecl(name, [], type)
  
  desugar :
    RuleW(form, prem*) -> Rule(prem*, "---", form)
  
  desugar :
    DefaultArrowDecl(l-ty, r-ty) -> ArrowDecl(l-ty, "default", r-ty)
  
  desugar :
    Dynamic() -> NamedDynamic("default")
  
  desugar :
    DynamicEmitted(e) -> NamedDynamicEmitted(e, "default")
  
  desugar :
    NamedDynamic(n) -> NamedDynamicEmitted([], n)
  
  desugar :
    List(x*) -> ListTail(x*, List([]))
    where <not(?[])> x* 

  desugar :
    ListTail([x | xs*], xxs) -> ListTail([x], ListTail(xs*, xxs))
    where
      <not(?[])> xs*

  desugar :
    NoReads() -> Reads([])

  desugar :
    Source(lhs) -> Source(lhs, [])

  desugar :
    Target(rhs) -> Target(rhs, [])

  desugar :
    Axiom(form) -> Rule([], "---------", form)
    
  desugar :
    IsValue(term) -> TermEq(Con("IsValue",[term]),Con("True",[]))

  desugar :
    Map([b | b*@[_|_]]) -> MapExtend(Map([b]), Map(b*))
    
  desugar :
    Map([MapEntry(x)]) -> x

  desugar :
    Strict(con,params1,params2) -> list
     where Cons(_,Cons(_,_)) := params1;
           list := <map( \ param -> Strict(con,[param],params2) \)> params1

  desugar :
    Seqstrict(con,params1,params2) -> list
     where Cons(_,Cons(_,_)) := params1;
           list := <map( \ param -> Seqstrict(con,[param],params2) \)> params1
     // this converts a Rule into a list of Rules
     // so they must later be concatenated, post-desugaring:
  
  rules-concat :
  	 Rules(list) -> Rules(list1)
  	 where list1 := <map(?Cons(_,_) <+ ( \ n -> Cons(n,Nil()) \)); concat> list

rules // sugaring
  
  sugar-all = innermost(sugar)
  
  sugar :
    NativeFunctionDecl(name, [], type) -> NativeNoArgFunctionDecl(name, type)
  
  sugar :
  	Rule([],infer,conc) -> Axiom(conc)

  sugar :
  	Reads([]) -> NoReads()

  sugar :
  	NamedDynamicEmitted([], name) -> NamedDynamic(name)

  sugar :
  	Target(term,[]) -> Target(term)

  sugar :
  	Source(term,[]) -> Source(term)

  sugar :
    TermEq(Con("IsValue",[term]),Con("True",[])) -> IsValue(term)
    
  sugar :
    Rule(prem*, _, form) -> RuleW(form, prem*)

  sugar :
  	MatchedVar(v) -> Var(v)
  
