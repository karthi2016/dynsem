module expand-constructors

imports
  include/ds
  ds
  analysis/main
  analysis/mark-references
  analysis/query
  analysis/analysis-rules
  analysis/lib-analysis
  analysis/constructors
  
rules

  expand-constructors-module:
    mod@Module(_, _) -> Module($[[name]_expcons], section*)
    where
      <m-in-analysis(expand-constructors); unmark-vars> mod => Module(name, section*)
  
  expand-constructors = alltd(?Rule(_, _, _); alltd(expand-constructor))
  
  expand-constructor:
    Match(tl@VarRef(_), tr@Con(c, child*)) ->
      <try(expand-constructor)> Match(tl, Con(impl-con, [tr]))
    where
      l-ty := <type-of> tl;
      r-ty := <type-of> tr;
      <not(type-coerce-simple)> (l-ty, r-ty);
      impl-con := <get-first-impl-constructor-def; def-get-name> (r-ty, l-ty)

  expand-constructor:
    Relation(r, s@Source(lhs, _), arr@NamedDynamicEmitted(_, arrow-name), Target(t, tc*)) ->
      <try(expand-constructor)> Relation(r, s, arr, Target(Con(impl-con, [t]), tc*))
    where
      arrow-ty* := <lookup-def(|Arrows()); lookup-props(|Type())> arrow-name;
      ArrowType(_, bu-ty) := <type-of-applicable-arrow> (arrow-ty*, <type-of> lhs);
      t-ty := <type-of> t;
      (
        <not(type-coerce-simple)> (t-ty, bu-ty);
        impl-con := <get-first-impl-constructor-def; def-get-name> (t-ty, bu-ty)
        <+
        <not(type-coerce-simple)> (bu-ty, t-ty);
        impl-con := <get-first-impl-constructor-def; def-get-name> (bu-ty, t-ty)
      )

  expand-constructor:
    Con(c, child*) -> Con(c, child'*)
    where
      ConstructorType(c-ty*, _) := <lookup-def(|Constructors()); lookup-prop(|Type())> c;
      child'* := <zip(expand-constructor <+ Snd)> (c-ty*, child*)
  
  expand-constructor:
    (ex-ty, t) -> Con(impl-con, [t])
    where
      t-ty := <type-of> t;
      (
        <not(type-coerce-simple)> (ex-ty, t-ty);
        impl-con := <get-first-impl-constructor-def; def-get-name> (t-ty, ex-ty)
        <+
        <not(type-coerce-simple)> (t-ty, ex-ty);
        impl-con := <get-first-impl-constructor-def; def-get-name> (ex-ty, t-ty)
      )

  get-first-impl-constructor-def:
    (ty-from, ty-to) -> con-def
    where {|AConsDefs:
      if not(AConsDefs)
      then
        cons-def* := <get-matching-impl-constructors> ty-from;
        rules(AConsDefs: _ -> cons-def*)
      else
        cons-def* := <AConsDefs>
      end;
      con-def := <fetch-elem({|AConsDefs:
          \ c-def -> c-def
            where rules(AConsDefs: _ -> <filter(not(?c-def))> cons-def*)
          \;
          where(
            lookup-prop(|Type());
            ?ConstructorType(_, <id>);
            \ ty -> <type-coerce-direct> (ty, ty-to) \
          )
        |}
      )> cons-def*
    |}
  





