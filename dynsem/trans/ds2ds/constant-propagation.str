module ds2ds/constant-propagation

imports
  include/ds
  ds
  lib-ds
  analysis/mark-references

rules
  
  constant-propagation-module = Module(!$[[<id>]_constantprop], alltd(constant-propagation-rule); alltd(variable-elimination-rule))
  
  constant-propagation-rule:
    Rule(prem*, infer, Relation(reads, source, arrow, Target(rhs, tc*))) ->
      Rule(prem'*, infer, Relation(reads, source, arrow, Target(rhs', tc'*)))
    where {| PropagateConstant:
      prem'* := <filter(constant-propagation)> prem*;
      rhs' := <constant-propagation-prop> rhs;
      tc'* := <constant-propagation-prop> tc*
    |}
  
  constant-propagation-premises = is-list;  {| PropagateConstant: filter(constant-propagation) |}
  
  constant-propagation =
    not(constant-propagation-prop; constant-propagation-rec);
    constant-propagation-prop
  
  constant-propagation-prop = alltd(PropagateConstant)
  
  constant-propagation-rec:
    f@Formula(Match(const@<is-constant>, v@VarRef(_))) -> f
    where
      v' := <strip-annos> v;
      rules(PropagateConstant:+ v' -> const)
  
  is-constant =
    ?Int(_)
    + ?Real(_)
    + ?True()
    + ?False()
    + ?List([])

  variable-elimination-rule:
  	Rule(prem*, infer, Relation(reads, source, arrow, target)) ->
      Rule(prem''*, infer, Relation(reads, source, arrow, target))
    where {| PropagateExpr:
      read* := <collect-all(?VarRef(_); strip-annos, conc)> prem*;
      exclude* := <collect-all(?VarRef(_); strip-annos)> target;
      candidate* := <filter(not(\ v -> <fetch-elem(?v)> exclude* \))> read*;
      read-freq* := <frequency-list> candidate*;
      prem'* := <filter(not(variable-elimination-rec(|read-freq*)))> prem*;
      prem''* := <variable-elimination-prop> prem'*
  	|}
  	
  variable-elimination-rec(|read-freq*):
    f@Formula(Match(t, v@VarRef(_))) -> f
    where
      v' := <strip-annos> v;
      <fetch-elem(?(v', _); Snd)> read-freq* => 2;
      rules(PropagateExpr:+ v' -> <variable-elimination-prop> t)
  
  variable-elimination-prop = alltd(PropagateExpr)
  




