module ds2ds/constant-propagation

imports
  signatures/ds-sig
  ds
  lib-ds
  

rules
  
  constant-propagation-module = Module(!$[[<id>]_constantprop], alltd(constant-propagation-rule))
  
  constant-propagation-rule =
    {| ConstantValue:
      Rule(foldl(![], constant-propagation), id, Relation(id, id, id, Target(alltd(ConstantValue), alltd(ConstantValue))))
    |}
  
  constant-propagation:
    (Formula(Match(const, VarRef(v))), prem*) -> prem*
    where
      const' := <alltd(constant-propagation); is-constant> const;
      rules(ConstantValue:+ VarRef(v) -> const')
  
  constant-propagation:
    (TryOr(PremiseBlock(p1*), PremiseBlock(p2*)), prem*) -> [prem*, TryOr(PremiseBlock(p1'*), PremiseBlock(p2'*))]
    where
      {| ConstantValue:
        p1'* := <foldl(![], constant-propagation)> p1*
      |};
      {| ConstantValue:
        p2'* := <foldl(![], constant-propagation)> p2*
      |}

  constant-propagation:
    (MergePoint(pc, PremiseBlock(p1*), PremiseBlock(p2*)), prem*) -> [prem*, MergePoint(pc', PremiseBlock(p1'*), PremiseBlock(p2'*))]
    where
      pc' := <alltd(ConstantValue)> pc;
      {| ConstantValue:
        p1'* := <foldl(![], constant-propagation)> p1*
      |};
      {| ConstantValue:
        p2'* := <foldl(![], constant-propagation)> p2*
      |}
  
  constant-propagation:
    (p, prem*) -> [prem*, <alltd(ConstantValue)> p]
    where
      <not(?TryOr(_, _) + ?MergePoint(_, _, _) + ?Formula(Match(const, VarRef(_))); <alltd(constant-propagation); is-constant> const)> p
  
  is-constant =
    ?Int(_)
    + ?Real(_)
    + ?True()
    + ?False()
    + ?List([])
    + ?ListTail([h], t); <is-constant> h; <is-constant> t





