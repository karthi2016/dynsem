module ds2ds/sugar

imports
	signatures/-
	ds
	
signature
  constructors
    MapExtend : Map * Map -> Map
    MapEntry : Map -> Bind
	
rules // desugaring  
	
	desugar-meta-functions-top = alltd(desugar-functions)
	
	desugar-functions :
		Signatures(sigs1) -> 
		Signatures([Sorts(ss), Constructors(cs) | sigs2])
		where
		  <collect(extract-fun-sorts-constructors); unzip> sigs1 => (ss@[_|_], cs@[_|_]);
		  <alltd(desugar-fundecl)> sigs1 => sigs2
  
  extract-fun-sorts-constructors:
    MetaFunDecl(_, x, lhs-s*, _, _, _) -> (SortDecl(t_name), ConsDecl(x, lhs-s*, t_source, Annos([MetafunAnno()])))
    where
      t_name := $[[x]__Meta];
      t_source := SimpleSort(t_name)
  
  desugar-fundecl:
    MetaFunDecl(ro*, x, lhs-s*, rw1*, rhs-s, rw2*) -> DefaultArrowDecl(ro*, t_source, rw1*, rhs-s, rw2*)
    where
      t_name := $[[x]__Meta];
      t_source := SimpleSort(t_name)

  desugar-top = 
  	innermost(desugar); 
  	alltd(rules-concat)
  
  desugar :
    NativeNoArgFunctionDecl(name, type) -> NativeFunctionDecl(name, [], type)
  
  desugar :
    NullaryConsDecl(c, s, annos) -> ConsDecl(c, [], s, annos)
  
  desugar :
    NoAnnos() -> Annos([])
  
  desugar :
    NullaryNativeConsDecl(c, s) -> NativeConsDecl(c, [], s)

  desugar :
    NullaryNativeOpDecl(c, s) -> NativeOpDecl(c, [], s)
  
  desugar :
    RuleW(form, prem*) -> Rule(prem*, "---", form)
  
  desugar :
    DefaultArrowDecl(ros, l-ty, rwsin, r-ty, rwsout) -> ArrowDecl(ros, l-ty, rwsin, "default", r-ty, rwsout)
  
  desugar :
    Dynamic() -> NamedDynamic("default")
  
  desugar :
    DynamicEmitted(e) -> NamedDynamicEmitted(e, "default")
  
  desugar :
    NamedDynamic(n) -> NamedDynamicEmitted([], n)
  
  desugar :
    List(x*) -> ListTail(x*, List([]))
    where <not(?[])> x*

  desugar :
    ListTail([x | xs*], xxs) -> ListTail([x], ListTail(xs*, xxs))
    where
      <not(?[])> xs*

  desugar :
    NoReads() -> Reads([])

  desugar :
    NoArrowROs() -> ArrowROs([]) 

  desugar :
    NoArrowRWs() -> ArrowRWs([])

  desugar :
    Source(lhs) -> Source(lhs, [])

  desugar :
    Target(rhs) -> Target(rhs, [])

  desugar :
    Axiom(form) -> Rule([], "---------", form)
    
  desugar :
    IsValue(term) -> TermEq(Con("IsValue",[term]),Con("True",[]))

  desugar :
    Map([b | b*@[_|_]]) -> MapExtend(Map([b]), Map(b*))
    
  desugar :
    Map([MapEntry(x)]) -> x

  desugar :
    Strict(con,params1,params2) -> list
     where Cons(_,Cons(_,_)) := params1;
           list := <map( \ param -> Strict(con,[param],params2) \)> params1

  desugar :
    Seqstrict(con,params1,params2) -> list
     where Cons(_,Cons(_,_)) := params1;
           list := <map( \ param -> Seqstrict(con,[param],params2) \)> params1
     // this converts a Rule into a list of Rules
     // so they must later be concatenated, post-desugaring:
  
  rules-concat :
  	 Rules(list) -> Rules(list1)
  	 where list1 := <map(?Cons(_,_) <+ ( \ n -> Cons(n,Nil()) \)); concat> list

rules // sugaring
  
  sugar-all = innermost(sugar)
  
  sugar :
    NativeFunctionDecl(name, [], type) -> NativeNoArgFunctionDecl(name, type)
  
  sugar :
    ConsDecl(c, [], s, annos) -> NullaryConsDecl(c, s, annos)
  
  sugar :
    Annos([]) -> NoAnnos()
  
  sugar :
    NativeConsDecl(c, [], s) -> NullaryNativeConsDecl(c, s)

  sugar :
    NativeOpDecl(c, [], s) -> NullaryNativeOpDecl(c, s)
  
  sugar :
  	Rule([],infer,conc) -> Axiom(conc)

  sugar :
  	Reads([]) -> NoReads()

  sugar :
    ArrowROs([]) -> NoArrowROs() 

  sugar :
    ArrowRWs([]) -> NoArrowRWs()

  sugar :
  	NamedDynamicEmitted([], name) -> NamedDynamic(name)

  sugar :
  	Target(term,[]) -> Target(term)

  sugar :
  	Source(term,[]) -> Source(term)

  sugar :
    TermEq(Con("IsValue",[term]),Con("True",[])) -> IsValue(term)
    
  sugar :
    Rule(prem*, _, form) -> RuleW(form, prem*)

