module extra-typeannos

imports
  signatures/-
  ds
  analysis/-

rules

  add-extra-typeannos-module:
    m@Module(_, _) -> Module($[[name]_typeannos], section*)
    where
      <m-in-analysis(add-extra-typeannos; unrename-all); unmark-vars> m => Module(name, section*)
  
  add-extra-typeannos = alltd(add-extra-typeannos-rule); alltd(add-extra-typeannos-premise); alltd(add-extra-typeannos-term)
  
  add-extra-typeannos-rule:
    Rule(p*, infer, Relation(Reads(r*), Source(lhs, sc*), arr@NamedDynamicEmitted(_, arrow-name), Target(t, tc*))) -> 
      Rule(p*, infer, Relation(Reads(r*), Source(lhs, sc*), arr, Target(Cast(t, bu-ty-str), tc*)))
    where
      <?List([]) + ?Map([])> t
    where
      arrow-def* := <lookup-defs(|Arrows())> arrow-name;
      ArrowType(ma-ty, bu-ty) := <get-applicable-arrowdef(type-coerce-full(id)); lookup-prop(|Type())> (arrow-def*, <type-of> lhs);
      bu-ty-str := <derw-type> bu-ty

  add-extra-typeannos-premise:
    Formula(Match(lhs, rhs)) -> Formula(Match(lhs, rhs'))
    where
      lhs-ty := <type-of> lhs;
      rhs' := <add-extra-typeannos-term <+ Snd> (lhs-ty, rhs)

  add-extra-typeannos-term:
    Con(name, c*) -> Con(name, c'*)
    where
      c-def := <lookup-def(|Constructors())> (name, <length> c*);
      ConstructorType(c-ty*, ty) := <lookup-prop(|Type())> c-def;
      c'* := <zip(add-extra-typeannos-term <+ Snd)> (c-ty*, c*)
  
  add-extra-typeannos-term:
    x@(_, c@Con(_, _)) -> <try(add-extra-typeannos-term)> c
    where
    	<TupleToList> x // FIXME: This works around a bug in the Stratego interpreter where terms of arity 2 are matched as if they were tuples
  
  add-extra-typeannos-term:
    (lty@ListType(ty), ListTail(h, t)) -> ListTail(h', t')
    where
      h' := <add-extra-typeannos-term <+ Snd> (ty, h);
      t' := <add-extra-typeannos-term <+ Snd> (lty, t)
  
  add-extra-typeannos-term:
    (ty, m@Map([])) -> Cast(m, <derw-type> ty)
  
  add-extra-typeannos-term:
    (ty, l@List([])) -> Cast(l, <derw-type> ty)
  
  add-extra-typeannos-term:
    (ty, t@Tuple(_)) -> Cast(t, <derw-type> ty)
