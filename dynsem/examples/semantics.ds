module semantics

imports include/FJ
 
rules // library

  value(y)
  -------------
  Exec(y) --> y 

  y --> w , Exec(w) --> z, A --> B
  -----------------------
  Exec(y) --> z
  
rules // funcons

  e1 --> e1'
  ---------------------------- 
  Seq(e1, e2) --> Seq(e1', e2)
  
  Seq(Skip(), e) = e  
   
  Env MapOver(env,env1) |- e --> e'
  -------------------------------------------
  Env env1 |- Scope(env, e) --> Scope(env,e')
   
  // [x/v](e1 + e2) -> ([x/v]e1) + ([x/v]e2) 
  // [x/v]Var(x) -> v
  
  value(v) 
  -------------------
  Scope(env,v) = v 
   
rules // values

  value(Ref(x))
  value(Skip())
  
  IsValueList([]) = True()
  IsValueList(Cons(e, es)) = And(IsValue(e), IsValueList(es))
  
  And(True(), x) = x
  And(False(), x) = False()
  
  MapOver(e1, e2) = MapExtend(e1, e2)

rules // class declarations to environment

  Classes2Env(cs) = Env(env)
  ----------------------------------------------
  Program(Classes(cs), e) = Program(Env(env), e)
  
  Classes2Env(Nil()) = Env({})
    
  class = Class(name, super, fields, constr, meths), Classes2Env(cs') = Env(env)
  -----------------------------------------------------------------------------------
  Classes2Env(Cons(class, cs')) = Env({ name |--> Class2Env(class), env})
  
  Class2Env(Class(name, super, fields, constr, meths)) = 
    { Super() |--> super, 
      Constructor() |--> constr,
      Fields2Env(fields), 
      Methods2Env(meths) }
               
  Fields2Env([]) = {}
  Fields2Env(Cons(Field(t, name), fields)) = 
    {Field(name) |--> t, Fields2Env(fields)}
    
  Methods2Env([]) = {}
  Methods2Env(Cons(Method(t, name, params, e), methods)) =
    {Method(name) |--> Method(t, name, params, e), Methods2Env(methods)}

  value(val)
  ------------------------
  Program(env, val) = val

rules // expression list

  BindParams([], [], env) = env

  BindParams(Cons(Param(t, name), params), Cons(e, es), env) =
    {name |--> e, params |*-> es, env}
    
  ExpList(es) --> ExpList(es')
  --------------------------------
  New(name, es) --> New(name, es')
  
  e --> e'
  ---------------------------------------------
  ExpList(Cons(e, es)) --> ExpList(Cons(e', es))
  
  IsValue(e) = True(), ExpList(es) --> ExpList(es')
  -------------------------------------------------
  ExpList(Cons(e, es)) --> ExpList(Cons(e, es'))

rules // object creation
 
  IsValueList(es) = True(),
  env[name] = class, 
  Fresh() = o, 
  {o |--> {Class() |--> name}, s} = s',
  class[Constructor()] = Constructor(c, params, scall, inits),
  {"this" |--> Ref(o), params |*-> es, env} = env1
  ---------------------------------------------------------------------------------------------
  Env env |- (New(name, es), State s) --> (Seq(Scope(env1, FieldInits(inits)), Ref(o)), State s')
    
  FieldInits([]) --> Skip()
  
  env["this"] = Ref(o), { o |--> { fld |--> env[x] } + s[o], s} = s'
  --------------------------------------------------------------------------------------------------
  Env env |- (FieldInits(Cons(FieldInit(fld, x), inits)), State s) --> (FieldInits(inits), State s')
  
rules // congruence
 
  Env env |- e --> e' 
  ----------------------------------------------------------
  Env env' |- Program(Env(env), e) --> Program(Env(env), e')
  
rules // method call

  value(e), ExpList(es) --> ExpList(es') 
  ------------------------------------------------
  MethCall(e, name, es) --> MethCall(e, name, es') 
  
  e --> e'
  -----------------------------------------------
  MethCall(e, name, es) --> MethCall(e', name, es) 
  
  IsValueList(vs) = True(),
  env[s[o][Class()]][Method(name)] = Method(t, name', params, e),
  { "this" |--> Ref(o), params |*-> vs, env } = env1
  -------------------------------------------------------------------
  Env env |- (MethCall(Ref(o), name, vs), State s) --> Scope(env1, e)
  
rules // field reference
  
  s[o][name] = v 
  ---------------------------------------
  (FieldRef(Ref(o), name), State s) --> v 
  
  e --> e'
  ----------------------------------------
  FieldRef(e, name) --> FieldRef(e', name)

rules // variable
  
  Env env |- Var(x) --> env[x]
    
  