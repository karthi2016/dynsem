module pp/extensions/Module-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  trans/pp
  coq-signatures/extensions/Module-sig


imports
  coq-signatures/Vernacular-sig
  coq-signatures/Gallina-sig
  coq-signatures/Lexical-sig
  coq-signatures/Options-sig
  coq-signatures/Qid-sig
  coq-signatures/extensions/Section-sig


imports
  pp/Vernacular-pp
  pp/Gallina-pp
  pp/Lexical-pp
  pp/Options-pp
  pp/Qid-pp
  pp/extensions/Section-pp


strategies
  prettyprint-example =
    prettyprint-Coq


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Coq-start-symbols


strategies
  prettyprint-Reserved =
    ![S(<is-string>)]

  prettyprint-Coq =
    prettyprint-Reserved

  prettyprint-Reserved :
    amb([h|hs]) -> <prettyprint-Reserved> h


strategies
  prettyprint-Coq =
    prettyprint-Module

  prettyprint-Module :
    InteractiveModule(t1__, t2__, t3__, t4__, t5__, t6__) -> [ H(
                                                                 [SOpt(HS(), "0")]
                                                               , [ S("Module ")
                                                                 , t1__'
                                                                 , t2__'
                                                                 , t3__'
                                                                 , t4__'
                                                                 , S(".")
                                                                 ]
                                                               )
                                                             , t5__'
                                                             , H(
                                                                 [SOpt(HS(), "0")]
                                                               , [ S("End ")
                                                                 , t6__'
                                                                 , S(".")
                                                                 ]
                                                               )
                                                             ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptModuleBindingKeywordPrefix)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptModuleBindings)> t3__
    with t4__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptModuleTypes)> t4__
    with t5__' := <pp-indent(|"2")> [ <is-string ; pp-one-Z(prettyprint-origin-term)
                                       <+ pp-V-list(prettyprint-ModContent|"1")> t5__
                                    ]
    with t6__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t6__

  is-Module =
    ?InteractiveModule(_, _, _, _, _, _)

  get-indent :
    ( InteractiveModule(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           case ?5 :
             indent := "  "
           case ?6 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    ( InteractiveModule(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           case ?5 :
             separator := "\n\n"
           case ?6 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    ( InteractiveModule(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           case ?3 :
             ws := ""
           case ?4 :
             ws := ""
           case ?5 :
             ws := "\n  "
           case ?6 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Module =
    fail

  prettyprint-Module :
    amb([h|hs]) -> <prettyprint-Module> h

  prettyprint-Module :
    Module-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[Module]]")]
                        )
                      ]

  is-Module =
    ?Module-Plhdr()

  is-SDF-placeholder =
    ?Module-Plhdr()

  prettyprint-OptModuleBindingKeywordPrefix :
    OptModuleBindingKeywordPrefix-Plhdr() -> [ H(
                                                 [SOpt(HS(), "0")]
                                               , [S("[[OptModuleBindingKeywordPrefix]]")]
                                               )
                                             ]

  is-OptModuleBindingKeywordPrefix =
    ?OptModuleBindingKeywordPrefix-Plhdr()

  is-SDF-placeholder =
    ?OptModuleBindingKeywordPrefix-Plhdr()

  prettyprint-OptModuleBindings :
    OptModuleBindings-Plhdr() -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("[[OptModuleBindings]]")]
                                   )
                                 ]

  is-OptModuleBindings =
    ?OptModuleBindings-Plhdr()

  is-SDF-placeholder =
    ?OptModuleBindings-Plhdr()

  prettyprint-OptModuleTypes :
    OptModuleTypes-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("[[OptModuleTypes]]")]
                                )
                              ]

  is-OptModuleTypes =
    ?OptModuleTypes-Plhdr()

  is-SDF-placeholder =
    ?OptModuleTypes-Plhdr()

  prettyprint-ModContent :
    ModContent-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ModContent]]")]
                            )
                          ]

  is-ModContent =
    ?ModContent-Plhdr()

  is-SDF-placeholder =
    ?ModContent-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-ModuleBindingKeyword

  prettyprint-Coq =
    prettyprint-OptModuleBindingKeywordPrefix

  prettyprint-ModuleBindingKeyword :
    Import() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("Import")]
                  )
                ]

  is-ModuleBindingKeyword =
    ?Import()

  get-indent :
    (Import(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Import(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Import(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-ModuleBindingKeyword :
    Export() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("Export")]
                  )
                ]

  is-ModuleBindingKeyword =
    ?Export()

  get-indent :
    (Export(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Export(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Export(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptModuleBindingKeywordPrefix :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptModuleBindingKeywordPrefix =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptModuleBindingKeywordPrefix :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__', S(" ")]
              )
            ]
    where not(is-OptModuleBindingKeywordPrefix)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-ModuleBindingKeyword)> t1__

  is-ModuleBindingKeyword =
    fail

  is-OptModuleBindingKeywordPrefix =
    fail

  prettyprint-ModuleBindingKeyword :
    amb([h|hs]) -> <prettyprint-ModuleBindingKeyword> h

  prettyprint-OptModuleBindingKeywordPrefix :
    amb([h|hs]) -> <prettyprint-OptModuleBindingKeywordPrefix> h

  prettyprint-OptModuleBindingKeywordPrefix :
    OptModuleBindingKeywordPrefix-Plhdr() -> [ H(
                                                 [SOpt(HS(), "0")]
                                               , [S("[[OptModuleBindingKeywordPrefix]]")]
                                               )
                                             ]

  is-OptModuleBindingKeywordPrefix =
    ?OptModuleBindingKeywordPrefix-Plhdr()

  is-SDF-placeholder =
    ?OptModuleBindingKeywordPrefix-Plhdr()

  prettyprint-ModuleBindingKeyword :
    ModuleBindingKeyword-Plhdr() -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("[[ModuleBindingKeyword]]")]
                                      )
                                    ]

  is-ModuleBindingKeyword =
    ?ModuleBindingKeyword-Plhdr()

  is-SDF-placeholder =
    ?ModuleBindingKeyword-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-ModuleType

  prettyprint-Coq =
    prettyprint-OptModuleTypes

  prettyprint-ModuleType :
    QualifiedModule(t1__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__']
                               )
                             ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__

  is-ModuleType =
    ?QualifiedModule(_)

  get-indent :
    (QualifiedModule(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (QualifiedModule(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (QualifiedModule(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-ModuleType :
    ModuleWithDefinition(t1__, t2__, t3__) -> [ H(
                                                  [SOpt(HS(), "0")]
                                                , [ t1__'
                                                  , S(" with Definition ")
                                                  , t2__'
                                                  , S(" := ")
                                                  , t3__'
                                                  ]
                                                )
                                              ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-ModuleType)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t3__

  is-ModuleType =
    ?ModuleWithDefinition(_, _, _)

  get-indent :
    (ModuleWithDefinition(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModuleWithDefinition(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModuleWithDefinition(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-ModuleType :
    ModuleWithModule(t1__, t2__, t3__) -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [ t1__'
                                              , S(" with Module ")
                                              , t2__'
                                              , S(" := ")
                                              , t3__'
                                              ]
                                            )
                                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-ModuleType)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t3__

  is-ModuleType =
    ?ModuleWithModule(_, _, _)

  get-indent :
    (ModuleWithModule(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModuleWithModule(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModuleWithModule(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-ModuleType :
    QualifiedModuleSeq(t1__, t2__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [t1__', S(" "), t2__']
                                        )
                                      ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-QualId)> t2__

  is-ModuleType =
    ?QualifiedModuleSeq(_, _)

  get-indent :
    (QualifiedModuleSeq(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (QualifiedModuleSeq(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (QualifiedModuleSeq(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-ModuleType :
    QualifiedModuleBangSeq(t1__, t2__) -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [ S("!")
                                              , t1__'
                                              , S(" ")
                                              , t2__'
                                              ]
                                            )
                                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-QualId)> t2__

  is-ModuleType =
    ?QualifiedModuleBangSeq(_, _)

  get-indent :
    (QualifiedModuleBangSeq(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (QualifiedModuleBangSeq(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (QualifiedModuleBangSeq(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-ModuleType :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("(")
                               , t1__'
                               , S(")")
                               ]
                             )
                           ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-ModuleType)> t1__

  prettyprint-OptModuleTypes :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptModuleTypes =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptModuleTypes :
    ModType(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S(" : "), t1__']
                       )
                     ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-ModuleType)> t1__

  is-OptModuleTypes =
    ?ModType(_)

  get-indent :
    (ModType(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModType(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModType(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-OptModuleTypes :
    ModSubtypes(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S(" <: "), t1__']
                           )
                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-ModuleType|" <:")> t1__

  is-OptModuleTypes =
    ?ModSubtypes(_)

  get-indent :
    (ModSubtypes(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModSubtypes(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := " <:"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModSubtypes(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-ModuleType =
    fail

  is-OptModuleTypes =
    fail

  prettyprint-ModuleType :
    amb([h|hs]) -> <prettyprint-ModuleType> h

  prettyprint-OptModuleTypes :
    amb([h|hs]) -> <prettyprint-OptModuleTypes> h

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()

  prettyprint-QualId :
    QualId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[QualId]]")]
                        )
                      ]

  is-QualId =
    ?QualId-Plhdr()

  is-SDF-placeholder =
    ?QualId-Plhdr()

  prettyprint-OptModuleTypes :
    OptModuleTypes-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("[[OptModuleTypes]]")]
                                )
                              ]

  is-OptModuleTypes =
    ?OptModuleTypes-Plhdr()

  is-SDF-placeholder =
    ?OptModuleTypes-Plhdr()

  prettyprint-ModuleType :
    ModuleType-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ModuleType]]")]
                            )
                          ]

  is-ModuleType =
    ?ModuleType-Plhdr()

  is-SDF-placeholder =
    ?ModuleType-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-ModuleBinding

  prettyprint-Coq =
    prettyprint-OptModuleBindings

  prettyprint-ModuleBinding :
    ModuleBinding(t1__, t2__, t3__) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [ S("(")
                                           , t1__'
                                           , t2__'
                                           , S(" ")
                                           , t3__'
                                           , S(")")
                                           ]
                                         )
                                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptModuleBindingKeywordPrefix)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Ident)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-ModuleType)> t3__

  is-ModuleBinding =
    ?ModuleBinding(_, _, _)

  get-indent :
    (ModuleBinding(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModuleBinding(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModuleBinding(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-OptModuleBindings :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptModuleBindings =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptModuleBindings :
    ModBindings(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S(" "), t1__']
                           )
                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-ModuleBinding|" ")> t1__

  is-OptModuleBindings =
    ?ModBindings(_)

  get-indent :
    (ModBindings(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModBindings(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := " "
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModBindings(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-ModuleBinding =
    fail

  is-OptModuleBindings =
    fail

  prettyprint-ModuleBinding :
    amb([h|hs]) -> <prettyprint-ModuleBinding> h

  prettyprint-OptModuleBindings :
    amb([h|hs]) -> <prettyprint-OptModuleBindings> h

  prettyprint-OptModuleBindingKeywordPrefix :
    OptModuleBindingKeywordPrefix-Plhdr() -> [ H(
                                                 [SOpt(HS(), "0")]
                                               , [S("[[OptModuleBindingKeywordPrefix]]")]
                                               )
                                             ]

  is-OptModuleBindingKeywordPrefix =
    ?OptModuleBindingKeywordPrefix-Plhdr()

  is-SDF-placeholder =
    ?OptModuleBindingKeywordPrefix-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-ModuleType :
    ModuleType-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ModuleType]]")]
                            )
                          ]

  is-ModuleType =
    ?ModuleType-Plhdr()

  is-SDF-placeholder =
    ?ModuleType-Plhdr()

  prettyprint-OptModuleBindings :
    OptModuleBindings-Plhdr() -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("[[OptModuleBindings]]")]
                                   )
                                 ]

  is-OptModuleBindings =
    ?OptModuleBindings-Plhdr()

  is-SDF-placeholder =
    ?OptModuleBindings-Plhdr()

  prettyprint-ModuleBinding :
    ModuleBinding-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("[[ModuleBinding]]")]
                               )
                             ]

  is-ModuleBinding =
    ?ModuleBinding-Plhdr()

  is-SDF-placeholder =
    ?ModuleBinding-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-ModContent

  prettyprint-ModContent :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-ModContent)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Sentence)> t1__

  prettyprint-ModContent :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-ModContent)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Module)> t1__

  prettyprint-ModContent :
    Include(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("Include "), t1__']
                       )
                     ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Ident|"<+")> t1__

  is-ModContent =
    ?Include(_)

  get-indent :
    (Include(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Include(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := "<+"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Include(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-ModContent =
    fail

  prettyprint-ModContent :
    amb([h|hs]) -> <prettyprint-ModContent> h

  prettyprint-Sentence :
    Sentence-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[Sentence]]")]
                          )
                        ]

  is-Sentence =
    ?Sentence-Plhdr()

  is-SDF-placeholder =
    ?Sentence-Plhdr()

  prettyprint-Module :
    Module-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[Module]]")]
                        )
                      ]

  is-Module =
    ?Module-Plhdr()

  is-SDF-placeholder =
    ?Module-Plhdr()

  prettyprint-ModContent :
    ModContent-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ModContent]]")]
                            )
                          ]

  is-ModContent =
    ?ModContent-Plhdr()

  is-SDF-placeholder =
    ?ModContent-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Module

  prettyprint-Module :
    ModuleDef(t1__, t2__, t3__, t4__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [ S("Module ")
                                             , t1__'
                                             , t2__'
                                             , t3__'
                                             , S(" := ")
                                             , t4__'
                                             , S(".")
                                             ]
                                           )
                                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptModuleBindings)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptModuleTypes)> t3__
    with t4__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-ModuleExpression)> t4__

  is-Module =
    ?ModuleDef(_, _, _, _)

  get-indent :
    (ModuleDef(t1__, t2__, t3__, t4__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModuleDef(t1__, t2__, t3__, t4__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModuleDef(t1__, t2__, t3__, t4__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           case ?3 :
             ws := ""
           case ?4 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Module :
    ModuleDefs(t1__, t2__, t3__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [ S("Module ")
                                        , t1__'
                                        , t2__'
                                        , S(" := ")
                                        , t3__'
                                        ]
                                      )
                                    ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptModuleBindings)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-ModuleExpression|"<+")> t3__

  is-Module =
    ?ModuleDefs(_, _, _)

  get-indent :
    (ModuleDefs(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModuleDefs(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := "<+"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModuleDefs(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Module =
    fail

  prettyprint-Module :
    amb([h|hs]) -> <prettyprint-Module> h

  prettyprint-OptModuleTypes :
    OptModuleTypes-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("[[OptModuleTypes]]")]
                                )
                              ]

  is-OptModuleTypes =
    ?OptModuleTypes-Plhdr()

  is-SDF-placeholder =
    ?OptModuleTypes-Plhdr()

  prettyprint-Module :
    Module-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[Module]]")]
                        )
                      ]

  is-Module =
    ?Module-Plhdr()

  is-SDF-placeholder =
    ?Module-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-OptModuleBindings :
    OptModuleBindings-Plhdr() -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("[[OptModuleBindings]]")]
                                   )
                                 ]

  is-OptModuleBindings =
    ?OptModuleBindings-Plhdr()

  is-SDF-placeholder =
    ?OptModuleBindings-Plhdr()

  prettyprint-ModuleExpression :
    ModuleExpression-Plhdr() -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("[[ModuleExpression]]")]
                                  )
                                ]

  is-ModuleExpression =
    ?ModuleExpression-Plhdr()

  is-SDF-placeholder =
    ?ModuleExpression-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-ModuleExpression

  prettyprint-ModuleExpression :
    ModuleExpression(t1__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__']
                                )
                              ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-QualId)> t1__

  is-ModuleExpression =
    ?ModuleExpression(_)

  get-indent :
    (ModuleExpression(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModuleExpression(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModuleExpression(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-ModuleExpression :
    ModuleBangExpression(t1__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("!"), t1__']
                                    )
                                  ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-QualId)> t1__

  is-ModuleExpression =
    ?ModuleBangExpression(_)

  get-indent :
    (ModuleBangExpression(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModuleBangExpression(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModuleBangExpression(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  is-ModuleExpression =
    fail

  prettyprint-ModuleExpression :
    amb([h|hs]) -> <prettyprint-ModuleExpression> h

  prettyprint-ModuleExpression :
    ModuleExpression-Plhdr() -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("[[ModuleExpression]]")]
                                  )
                                ]

  is-ModuleExpression =
    ?ModuleExpression-Plhdr()

  is-SDF-placeholder =
    ?ModuleExpression-Plhdr()

  prettyprint-QualId :
    QualId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[QualId]]")]
                        )
                      ]

  is-QualId =
    ?QualId-Plhdr()

  is-SDF-placeholder =
    ?QualId-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Module

  prettyprint-Module :
    ModuleType(t1__, t2__, t3__, t4__) -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [ S("Module Type ")
                                              , t1__'
                                              , t2__'
                                              , S(".")
                                              ]
                                            )
                                          , t3__'
                                          , H(
                                              [SOpt(HS(), "0")]
                                            , [ S("End ")
                                              , t4__'
                                              , S(".")
                                              ]
                                            )
                                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptModuleBindings)> t2__
    with t3__' := <pp-indent(|"2")> [ <is-string ; pp-one-Z(prettyprint-origin-term)
                                       <+ pp-H-list(prettyprint-ModTypeContent)> t3__
                                    ]
    with t4__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t4__

  is-Module =
    ?ModuleType(_, _, _, _)

  get-indent :
    (ModuleType(t1__, t2__, t3__, t4__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := "  "
           case ?4 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModuleType(t1__, t2__, t3__, t4__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModuleType(t1__, t2__, t3__, t4__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           case ?3 :
             ws := "\n  "
           case ?4 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Module =
    fail

  prettyprint-Module :
    amb([h|hs]) -> <prettyprint-Module> h

  prettyprint-Module :
    Module-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[Module]]")]
                        )
                      ]

  is-Module =
    ?Module-Plhdr()

  is-SDF-placeholder =
    ?Module-Plhdr()

  prettyprint-OptModuleBindings :
    OptModuleBindings-Plhdr() -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("[[OptModuleBindings]]")]
                                   )
                                 ]

  is-OptModuleBindings =
    ?OptModuleBindings-Plhdr()

  is-SDF-placeholder =
    ?OptModuleBindings-Plhdr()

  prettyprint-ModTypeContent :
    ModTypeContent-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("[[ModTypeContent]]")]
                                )
                              ]

  is-ModTypeContent =
    ?ModTypeContent-Plhdr()

  is-SDF-placeholder =
    ?ModTypeContent-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-ModTypeContent

  prettyprint-ModTypeContent :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-ModTypeContent)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-ModContent)> t1__

  prettyprint-ModTypeContent :
    InlineAssumption(t1__, t2__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [t1__', S(" Inline "), t2__']
                                      )
                                    ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-AssumptionKeyword)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Assums)> t2__

  is-ModTypeContent =
    ?InlineAssumption(_, _)

  get-indent :
    (InlineAssumption(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (InlineAssumption(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (InlineAssumption(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-ModTypeContent =
    fail

  prettyprint-ModTypeContent :
    amb([h|hs]) -> <prettyprint-ModTypeContent> h

  prettyprint-ModContent :
    ModContent-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ModContent]]")]
                            )
                          ]

  is-ModContent =
    ?ModContent-Plhdr()

  is-SDF-placeholder =
    ?ModContent-Plhdr()

  prettyprint-ModTypeContent :
    ModTypeContent-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("[[ModTypeContent]]")]
                                )
                              ]

  is-ModTypeContent =
    ?ModTypeContent-Plhdr()

  is-SDF-placeholder =
    ?ModTypeContent-Plhdr()

  prettyprint-AssumptionKeyword :
    AssumptionKeyword-Plhdr() -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("[[AssumptionKeyword]]")]
                                   )
                                 ]

  is-AssumptionKeyword =
    ?AssumptionKeyword-Plhdr()

  is-SDF-placeholder =
    ?AssumptionKeyword-Plhdr()

  prettyprint-Assums :
    Assums-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[Assums]]")]
                        )
                      ]

  is-Assums =
    ?Assums-Plhdr()

  is-SDF-placeholder =
    ?Assums-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Module

  prettyprint-Module :
    ModuleTypeDef(t1__, t2__, t3__) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [ S("Module Type ")
                                           , t1__'
                                           , t2__'
                                           , S(" := ")
                                           , t3__'
                                           ]
                                         )
                                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptModuleBindings)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-ModuleType|" <+")> t3__

  is-Module =
    ?ModuleTypeDef(_, _, _)

  get-indent :
    (ModuleTypeDef(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ModuleTypeDef(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := " <+"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ModuleTypeDef(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Module =
    fail

  prettyprint-Module :
    amb([h|hs]) -> <prettyprint-Module> h

  prettyprint-Module :
    Module-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[Module]]")]
                        )
                      ]

  is-Module =
    ?Module-Plhdr()

  is-SDF-placeholder =
    ?Module-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-OptModuleBindings :
    OptModuleBindings-Plhdr() -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("[[OptModuleBindings]]")]
                                   )
                                 ]

  is-OptModuleBindings =
    ?OptModuleBindings-Plhdr()

  is-SDF-placeholder =
    ?OptModuleBindings-Plhdr()

  prettyprint-ModuleType :
    ModuleType-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ModuleType]]")]
                            )
                          ]

  is-ModuleType =
    ?ModuleType-Plhdr()

  is-SDF-placeholder =
    ?ModuleType-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Sentence

  prettyprint-Sentence :
    Import(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ t1__'
                              , S("Import ")
                              , t2__'
                              , S(".")
                              ]
                            )
                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptRequirePrefix)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t2__

  is-Sentence =
    ?Import(_, _)

  get-indent :
    (Import(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Import(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Import(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Sentence :
    Export(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ t1__'
                              , S("Export ")
                              , t2__'
                              , S(".")
                              ]
                            )
                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptRequirePrefix)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t2__

  is-Sentence =
    ?Export(_, _)

  get-indent :
    (Export(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Export(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Export(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Sentence =
    fail

  prettyprint-Sentence :
    amb([h|hs]) -> <prettyprint-Sentence> h

  prettyprint-Sentence :
    Sentence-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[Sentence]]")]
                          )
                        ]

  is-Sentence =
    ?Sentence-Plhdr()

  is-SDF-placeholder =
    ?Sentence-Plhdr()

  prettyprint-OptRequirePrefix :
    OptRequirePrefix-Plhdr() -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("[[OptRequirePrefix]]")]
                                  )
                                ]

  is-OptRequirePrefix =
    ?OptRequirePrefix-Plhdr()

  is-SDF-placeholder =
    ?OptRequirePrefix-Plhdr()

  prettyprint-QualId :
    QualId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[QualId]]")]
                        )
                      ]

  is-QualId =
    ?QualId-Plhdr()

  is-SDF-placeholder =
    ?QualId-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-OptRequirePrefix

  prettyprint-OptRequirePrefix :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptRequirePrefix =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptRequirePrefix :
    Require() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("Require ")]
                   )
                 ]

  is-OptRequirePrefix =
    ?Require()

  get-indent :
    (Require(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Require(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Require(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  is-OptRequirePrefix =
    fail

  prettyprint-OptRequirePrefix :
    amb([h|hs]) -> <prettyprint-OptRequirePrefix> h

  prettyprint-OptRequirePrefix :
    OptRequirePrefix-Plhdr() -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("[[OptRequirePrefix]]")]
                                  )
                                ]

  is-OptRequirePrefix =
    ?OptRequirePrefix-Plhdr()

  is-SDF-placeholder =
    ?OptRequirePrefix-Plhdr()