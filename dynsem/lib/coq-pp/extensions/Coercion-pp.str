module pp/extensions/Coercion-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  trans/pp
  coq-signatures/extensions/Coercion-sig


imports
  coq-signatures/Qid-sig
  coq-signatures/Gallina-sig


imports
  pp/Qid-pp
  pp/Gallina-pp


strategies
  prettyprint-example =
    prettyprint-Coq


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Coq-start-symbols


strategies
  prettyprint-Coq =
    prettyprint-Sentence

  prettyprint-Sentence :
    Coercion(t1__, t2__, t3__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [ S("Coercion ")
                                      , t1__'
                                      , S(" : ")
                                      , t2__'
                                      , S(" >-> ")
                                      , t3__'
                                      , S(".")
                                      ]
                                    )
                                  ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Class)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Class)> t3__

  is-Sentence =
    ?Coercion(_, _, _)

  get-indent :
    (Coercion(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Coercion(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Coercion(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Sentence =
    fail

  prettyprint-Sentence :
    amb([h|hs]) -> <prettyprint-Sentence> h

  prettyprint-Sentence :
    Sentence-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[Sentence]]")]
                          )
                        ]

  is-Sentence =
    ?Sentence-Plhdr()

  is-SDF-placeholder =
    ?Sentence-Plhdr()

  prettyprint-QualId :
    QualId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[QualId]]")]
                        )
                      ]

  is-QualId =
    ?QualId-Plhdr()

  is-SDF-placeholder =
    ?QualId-Plhdr()

  prettyprint-Class :
    Class-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Class]]")]
                       )
                     ]

  is-Class =
    ?Class-Plhdr()

  is-SDF-placeholder =
    ?Class-Plhdr()


strategies
  prettyprint-Reserved =
    ![S(<is-string>)]

  prettyprint-Coq =
    prettyprint-Reserved

  prettyprint-Reserved :
    amb([h|hs]) -> <prettyprint-Reserved> h


strategies
  prettyprint-Coq =
    prettyprint-Class

  prettyprint-Class :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Class)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Term)> t1__

  is-Class =
    fail

  prettyprint-Class :
    amb([h|hs]) -> <prettyprint-Class> h

  prettyprint-Class :
    Class-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Class]]")]
                       )
                     ]

  is-Class =
    ?Class-Plhdr()

  is-SDF-placeholder =
    ?Class-Plhdr()

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()