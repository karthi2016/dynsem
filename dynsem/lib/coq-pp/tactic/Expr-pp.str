module coq-pp/tactic/Expr-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  trans/pp
  coq-signatures/tactic/Expr-sig


imports
  coq-signatures/Lexical-sig
  coq-signatures/Gallina-sig
  coq-signatures/Qid-sig
  coq-signatures/Options-sig
  coq-signatures/tactic/AtomicTactic-sig


imports
  coq-pp/Lexical-pp
  coq-pp/Gallina-pp
  coq-pp/Qid-pp
  coq-pp/Options-pp
  coq-pp/tactic/AtomicTactic-pp


strategies
  prettyprint-example =
    prettyprint-Coq


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Coq-start-symbols


strategies
  prettyprint-Coq =
    prettyprint-TExpr

  prettyprint-TExpr :
    ExprSeq(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S("; "), t2__']
                             )
                           ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t2__

  is-TExpr =
    ?ExprSeq(_, _)

  get-indent :
    (ExprSeq(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ExprSeq(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ExprSeq(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TExpr :
    ExprSeqAlts(t1__, t2__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ t1__'
                                   , S("; [")
                                   , t2__'
                                   , S("]")
                                   ]
                                 )
                               ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-TExpr|" | ")> t2__

  is-TExpr =
    ?ExprSeqAlts(_, _)

  get-indent :
    (ExprSeqAlts(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ExprSeqAlts(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := " | "
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ExprSeqAlts(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-TExpr :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-TExpr)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-TacExpr3)> t1__

  is-TExpr =
    fail

  prettyprint-TExpr :
    amb([h|hs]) -> <prettyprint-TExpr> h

  prettyprint-TExpr :
    TExpr-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[TExpr]]")]
                       )
                     ]

  is-TExpr =
    ?TExpr-Plhdr()

  is-SDF-placeholder =
    ?TExpr-Plhdr()

  prettyprint-TacExpr3 :
    TacExpr3-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[TacExpr3]]")]
                          )
                        ]

  is-TacExpr3 =
    ?TacExpr3-Plhdr()

  is-SDF-placeholder =
    ?TacExpr3-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-TacExpr3

  prettyprint-TacExpr3 :
    DoTac(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ S("do")
                             , t1__'
                             , S(" ")
                             , t2__'
                             ]
                           )
                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptTime)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TacExpr3)> t2__

  is-TacExpr3 =
    ?DoTac(_, _)

  get-indent :
    (DoTac(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (DoTac(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (DoTac(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr3 :
    Progress(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("progress "), t1__']
                        )
                      ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TacExpr3)> t1__

  is-TacExpr3 =
    ?Progress(_)

  get-indent :
    (Progress(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Progress(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Progress(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr3 :
    Repeat(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("repeat "), t1__']
                      )
                    ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TacExpr3)> t1__

  is-TacExpr3 =
    ?Repeat(_)

  get-indent :
    (Repeat(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Repeat(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Repeat(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr3 :
    Try(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("try "), t1__']
                   )
                 ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TacExpr3)> t1__

  is-TacExpr3 =
    ?Try(_)

  get-indent :
    (Try(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Try(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Try(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr3 :
    Timeout(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("timeout")
                               , t1__'
                               , S(" ")
                               , t2__'
                               ]
                             )
                           ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptTime)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TacExpr3)> t2__

  is-TacExpr3 =
    ?Timeout(_, _)

  get-indent :
    (Timeout(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Timeout(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Timeout(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr3 :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-TacExpr3)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-TacExpr2)> t1__

  is-TacExpr3 =
    fail

  prettyprint-TacExpr3 :
    amb([h|hs]) -> <prettyprint-TacExpr3> h

  prettyprint-OptTime :
    OptTime-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[OptTime]]")]
                         )
                       ]

  is-OptTime =
    ?OptTime-Plhdr()

  is-SDF-placeholder =
    ?OptTime-Plhdr()

  prettyprint-TacExpr3 :
    TacExpr3-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[TacExpr3]]")]
                          )
                        ]

  is-TacExpr3 =
    ?TacExpr3-Plhdr()

  is-SDF-placeholder =
    ?TacExpr3-Plhdr()

  prettyprint-TacExpr2 :
    TacExpr2-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[TacExpr2]]")]
                          )
                        ]

  is-TacExpr2 =
    ?TacExpr2-Plhdr()

  is-SDF-placeholder =
    ?TacExpr2-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-OptTime

  prettyprint-OptTime :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptTime =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptTime :
    Natural(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [t1__', S(" ")]
                       )
                     ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Num)> t1__

  is-OptTime =
    ?Natural(_)

  get-indent :
    (Natural(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Natural(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Natural(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-OptTime :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__', S(" ")]
              )
            ]
    where not(is-OptTime)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Ident)> t1__

  is-OptTime =
    fail

  prettyprint-OptTime :
    amb([h|hs]) -> <prettyprint-OptTime> h

  prettyprint-Num :
    Num-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[Num]]")]
                     )
                   ]

  is-Num =
    ?Num-Plhdr()

  is-SDF-placeholder =
    ?Num-Plhdr()

  prettyprint-OptTime :
    OptTime-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[OptTime]]")]
                         )
                       ]

  is-OptTime =
    ?OptTime-Plhdr()

  is-SDF-placeholder =
    ?OptTime-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-TacExpr2

  prettyprint-TacExpr2 :
    Alts(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__', S(" || "), t2__']
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TacExpr1)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TacExpr3)> t2__

  is-TacExpr2 =
    ?Alts(_, _)

  get-indent :
    (Alts(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Alts(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Alts(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr2 :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-TacExpr2)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-TacExpr1)> t1__

  is-TacExpr2 =
    fail

  prettyprint-TacExpr2 :
    amb([h|hs]) -> <prettyprint-TacExpr2> h

  prettyprint-TacExpr3 :
    TacExpr3-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[TacExpr3]]")]
                          )
                        ]

  is-TacExpr3 =
    ?TacExpr3-Plhdr()

  is-SDF-placeholder =
    ?TacExpr3-Plhdr()

  prettyprint-TacExpr2 :
    TacExpr2-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[TacExpr2]]")]
                          )
                        ]

  is-TacExpr2 =
    ?TacExpr2-Plhdr()

  is-SDF-placeholder =
    ?TacExpr2-Plhdr()

  prettyprint-TacExpr1 :
    TacExpr1-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[TacExpr1]]")]
                          )
                        ]

  is-TacExpr1 =
    ?TacExpr1-Plhdr()

  is-SDF-placeholder =
    ?TacExpr1-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-TacExpr1

  prettyprint-TacExpr1 :
    Fun(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("fun ")
                           , t1__'
                           , S(" => ")
                           , t2__'
                           ]
                         )
                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TAtom)> t2__

  is-TacExpr1 =
    ?Fun(_, _)

  get-indent :
    (Fun(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Fun(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Fun(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    LetTac(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("let")
                                    , t1__'
                                    , S(" ")
                                    , t2__'
                                    , S(" in ")
                                    , t3__'
                                    ]
                                  )
                                ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptRec)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-LetClause|" with")> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TAtom)> t3__

  is-TacExpr1 =
    ?LetTac(_, _, _)

  get-indent :
    (LetTac(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (LetTac(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := " with"
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (LetTac(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    MatchGoal(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("match goal with ")
                           , t1__'
                           , S(" end")
                           ]
                         )
                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-ContextRule|" |")> t1__

  is-TacExpr1 =
    ?MatchGoal(_)

  get-indent :
    (MatchGoal(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (MatchGoal(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := " |"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (MatchGoal(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    MatchRevGoal(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("match reverse goal with ")
                              , t1__'
                              , S(" end")
                              ]
                            )
                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-ContextRule|" |")> t1__

  is-TacExpr1 =
    ?MatchRevGoal(_)

  get-indent :
    (MatchRevGoal(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (MatchRevGoal(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := " |"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (MatchRevGoal(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    MatchExpr(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ S("match ")
                                 , t1__'
                                 , S(" with ")
                                 , t2__'
                                 , S(" end")
                                 ]
                               )
                             ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-MatchRule|" |")> t2__

  is-TacExpr1 =
    ?MatchExpr(_, _)

  get-indent :
    (MatchExpr(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (MatchExpr(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := " |"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (MatchExpr(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    LMatchGoal(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ S("lazymatch goal with ")
                            , t1__'
                            , S(" end")
                            ]
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-ContextRule|" |")> t1__

  is-TacExpr1 =
    ?LMatchGoal(_)

  get-indent :
    (LMatchGoal(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (LMatchGoal(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := " |"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (LMatchGoal(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    LMatchRevGoal(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("lazymatch reverse goal with ")
                               , t1__'
                               , S(" end")
                               ]
                             )
                           ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-ContextRule|" |")> t1__

  is-TacExpr1 =
    ?LMatchRevGoal(_)

  get-indent :
    (LMatchRevGoal(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (LMatchRevGoal(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := " |"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (LMatchRevGoal(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    LMatchExpr(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ S("lazymatch ")
                                  , t1__'
                                  , S(" with ")
                                  , t2__'
                                  , S(" end")
                                  ]
                                )
                              ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-MatchRule|" |")> t2__

  is-TacExpr1 =
    ?LMatchExpr(_, _)

  get-indent :
    (LMatchExpr(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (LMatchExpr(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := " |"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (LMatchExpr(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    Abstract(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("abstract "), t1__']
                        )
                      ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TAtom)> t1__

  is-TacExpr1 =
    ?Abstract(_)

  get-indent :
    (Abstract(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Abstract(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Abstract(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    AbstractUsing(t1__, t2__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [ S("abstract ")
                                     , t1__'
                                     , S(" using ")
                                     , t2__'
                                     ]
                                   )
                                 ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TAtom)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t2__

  is-TacExpr1 =
    ?AbstractUsing(_, _)

  get-indent :
    (AbstractUsing(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (AbstractUsing(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (AbstractUsing(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    First(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [ S("first [ ")
                       , t1__'
                       , S(" ]")
                       ]
                     )
                   ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-TExpr|" |")> t1__

  is-TacExpr1 =
    ?First(_)

  get-indent :
    (First(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (First(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := " |"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (First(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    Solve(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [ S("solve [ ")
                       , t1__'
                       , S(" ]")
                       ]
                     )
                   ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-TExpr|" |")> t1__

  is-TacExpr1 =
    ?Solve(_)

  get-indent :
    (Solve(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Solve(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := " |"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Solve(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    IdTac(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("idtac "), t1__']
                     )
                   ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-MsgToken)> t1__

  is-TacExpr1 =
    ?IdTac(_)

  get-indent :
    (IdTac(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (IdTac(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (IdTac(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    Fail(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("fail"), t1__', t2__']
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptNatural)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptMsgTokens)> t2__

  is-TacExpr1 =
    ?Fail(_, _)

  get-indent :
    (Fail(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Fail(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Fail(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    Fresh(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("fresh"), t1__']
                     )
                   ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptString)> t1__

  is-TacExpr1 =
    ?Fresh(_)

  get-indent :
    (Fresh(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Fresh(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Fresh(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    Context(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("context "), t1__', t2__']
                             )
                           ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptTerm)> t2__

  is-TacExpr1 =
    ?Context(_, _)

  get-indent :
    (Context(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Context(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Context(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    Eval(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ S("eval ")
                            , t1__'
                            , S(" in ")
                            , t2__'
                            ]
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-RedExpr)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-TacExpr1 =
    ?Eval(_, _)

  get-indent :
    (Eval(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Eval(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Eval(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    TypeOf(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("type of "), t1__']
                      )
                    ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__

  is-TacExpr1 =
    ?TypeOf(_)

  get-indent :
    (TypeOf(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (TypeOf(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (TypeOf(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    External(t1__, t2__, t3__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [ S("external ")
                                      , t1__'
                                      , S(" ")
                                      , t2__'
                                      , S(" ")
                                      , t3__'
                                      ]
                                    )
                                  ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-String)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-String)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-TacArg)> t3__

  is-TacExpr1 =
    ?External(_, _, _)

  get-indent :
    (External(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (External(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (External(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    ConstrTerm(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("constr : "), t1__']
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__

  is-TacExpr1 =
    ?ConstrTerm(_)

  get-indent :
    (ConstrTerm(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ConstrTerm(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ConstrTerm(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-TacExpr1)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-AtomicTactic)> t1__

  prettyprint-TacExpr1 :
    QualTactic(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', S(" "), t2__']
                                )
                              ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-TacArg)> t2__

  is-TacExpr1 =
    ?QualTactic(_, _)

  get-indent :
    (QualTactic(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (QualTactic(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (QualTactic(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacExpr1 :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-TacExpr1)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-TAtom)> t1__

  prettyprint-TacExpr1 :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("(")
                               , t1__'
                               , S(")")
                               ]
                             )
                           ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t1__

  is-TacExpr1 =
    fail

  prettyprint-TacExpr1 :
    amb([h|hs]) -> <prettyprint-TacExpr1> h

  prettyprint-OptRec :
    OptRec-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[OptRec]]")]
                        )
                      ]

  is-OptRec =
    ?OptRec-Plhdr()

  is-SDF-placeholder =
    ?OptRec-Plhdr()

  prettyprint-LetClause :
    LetClause-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[LetClause]]")]
                           )
                         ]

  is-LetClause =
    ?LetClause-Plhdr()

  is-SDF-placeholder =
    ?LetClause-Plhdr()

  prettyprint-ContextRule :
    ContextRule-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[ContextRule]]")]
                             )
                           ]

  is-ContextRule =
    ?ContextRule-Plhdr()

  is-SDF-placeholder =
    ?ContextRule-Plhdr()

  prettyprint-MatchRule :
    MatchRule-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[MatchRule]]")]
                           )
                         ]

  is-MatchRule =
    ?MatchRule-Plhdr()

  is-SDF-placeholder =
    ?MatchRule-Plhdr()

  prettyprint-MsgToken :
    MsgToken-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[MsgToken]]")]
                          )
                        ]

  is-MsgToken =
    ?MsgToken-Plhdr()

  is-SDF-placeholder =
    ?MsgToken-Plhdr()

  prettyprint-OptNatural :
    OptNatural-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[OptNatural]]")]
                            )
                          ]

  is-OptNatural =
    ?OptNatural-Plhdr()

  is-SDF-placeholder =
    ?OptNatural-Plhdr()

  prettyprint-OptMsgTokens :
    OptMsgTokens-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("[[OptMsgTokens]]")]
                              )
                            ]

  is-OptMsgTokens =
    ?OptMsgTokens-Plhdr()

  is-SDF-placeholder =
    ?OptMsgTokens-Plhdr()

  prettyprint-OptString :
    OptString-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[OptString]]")]
                           )
                         ]

  is-OptString =
    ?OptString-Plhdr()

  is-SDF-placeholder =
    ?OptString-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-OptTerm :
    OptTerm-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[OptTerm]]")]
                         )
                       ]

  is-OptTerm =
    ?OptTerm-Plhdr()

  is-SDF-placeholder =
    ?OptTerm-Plhdr()

  prettyprint-RedExpr :
    RedExpr-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[RedExpr]]")]
                         )
                       ]

  is-RedExpr =
    ?RedExpr-Plhdr()

  is-SDF-placeholder =
    ?RedExpr-Plhdr()

  prettyprint-String :
    String-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[String]]")]
                        )
                      ]

  is-String =
    ?String-Plhdr()

  is-SDF-placeholder =
    ?String-Plhdr()

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()

  prettyprint-AtomicTactic :
    AtomicTactic-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("[[AtomicTactic]]")]
                              )
                            ]

  is-AtomicTactic =
    ?AtomicTactic-Plhdr()

  is-SDF-placeholder =
    ?AtomicTactic-Plhdr()

  prettyprint-QualId :
    QualId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[QualId]]")]
                        )
                      ]

  is-QualId =
    ?QualId-Plhdr()

  is-SDF-placeholder =
    ?QualId-Plhdr()

  prettyprint-TacArg :
    TacArg-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[TacArg]]")]
                        )
                      ]

  is-TacArg =
    ?TacArg-Plhdr()

  is-SDF-placeholder =
    ?TacArg-Plhdr()

  prettyprint-TAtom :
    TAtom-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[TAtom]]")]
                       )
                     ]

  is-TAtom =
    ?TAtom-Plhdr()

  is-SDF-placeholder =
    ?TAtom-Plhdr()

  prettyprint-TacExpr1 :
    TacExpr1-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[TacExpr1]]")]
                          )
                        ]

  is-TacExpr1 =
    ?TacExpr1-Plhdr()

  is-SDF-placeholder =
    ?TacExpr1-Plhdr()

  prettyprint-TExpr :
    TExpr-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[TExpr]]")]
                       )
                     ]

  is-TExpr =
    ?TExpr-Plhdr()

  is-SDF-placeholder =
    ?TExpr-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-OptRec

  prettyprint-Coq =
    prettyprint-OptMsgTokens

  prettyprint-Coq =
    prettyprint-OptNatural

  prettyprint-Coq =
    prettyprint-OptString

  prettyprint-Coq =
    prettyprint-OptTerm

  prettyprint-OptRec :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptRec =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptRec :
    Rec() -> [ H(
                 [SOpt(HS(), "0")]
               , [S(" rec")]
               )
             ]

  is-OptRec =
    ?Rec()

  get-indent :
    (Rec(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Rec(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Rec(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptMsgTokens :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptMsgTokens =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptMsgTokens :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [S(" "), t1__']
              )
            ]
    where not(is-OptMsgTokens)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-H-list(prettyprint-MsgToken)> t1__

  prettyprint-OptNatural :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptNatural =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptNatural :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-OptNatural)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Num)> t1__

  prettyprint-OptString :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptString =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptString :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-OptString)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Num)> t1__

  prettyprint-OptTerm :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptTerm =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptTerm :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-OptTerm)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Term)> t1__

  is-OptRec =
    fail

  is-OptMsgTokens =
    fail

  is-OptNatural =
    fail

  is-OptString =
    fail

  is-OptTerm =
    fail

  prettyprint-OptRec :
    amb([h|hs]) -> <prettyprint-OptRec> h

  prettyprint-OptMsgTokens :
    amb([h|hs]) -> <prettyprint-OptMsgTokens> h

  prettyprint-OptNatural :
    amb([h|hs]) -> <prettyprint-OptNatural> h

  prettyprint-OptString :
    amb([h|hs]) -> <prettyprint-OptString> h

  prettyprint-OptTerm :
    amb([h|hs]) -> <prettyprint-OptTerm> h

  prettyprint-OptRec :
    OptRec-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[OptRec]]")]
                        )
                      ]

  is-OptRec =
    ?OptRec-Plhdr()

  is-SDF-placeholder =
    ?OptRec-Plhdr()

  prettyprint-OptMsgTokens :
    OptMsgTokens-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("[[OptMsgTokens]]")]
                              )
                            ]

  is-OptMsgTokens =
    ?OptMsgTokens-Plhdr()

  is-SDF-placeholder =
    ?OptMsgTokens-Plhdr()

  prettyprint-MsgToken :
    MsgToken-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[MsgToken]]")]
                          )
                        ]

  is-MsgToken =
    ?MsgToken-Plhdr()

  is-SDF-placeholder =
    ?MsgToken-Plhdr()

  prettyprint-OptNatural :
    OptNatural-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[OptNatural]]")]
                            )
                          ]

  is-OptNatural =
    ?OptNatural-Plhdr()

  is-SDF-placeholder =
    ?OptNatural-Plhdr()

  prettyprint-OptString :
    OptString-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[OptString]]")]
                           )
                         ]

  is-OptString =
    ?OptString-Plhdr()

  is-SDF-placeholder =
    ?OptString-Plhdr()

  prettyprint-Num :
    Num-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[Num]]")]
                     )
                   ]

  is-Num =
    ?Num-Plhdr()

  is-SDF-placeholder =
    ?Num-Plhdr()

  prettyprint-OptTerm :
    OptTerm-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[OptTerm]]")]
                         )
                       ]

  is-OptTerm =
    ?OptTerm-Plhdr()

  is-SDF-placeholder =
    ?OptTerm-Plhdr()

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-TAtom

  prettyprint-TAtom :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-TAtom)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-QualId)> t1__

  prettyprint-TAtom :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-TAtom)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Num)> t1__

  prettyprint-TAtom :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("(TExpr)")]
            )
          ]

  prettyprint-TAtom :
    Unit() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("()")]
                )
              ]

  is-TAtom =
    ?Unit()

  get-indent :
    (Unit(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Unit(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Unit(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  is-TAtom =
    fail

  prettyprint-TAtom :
    amb([h|hs]) -> <prettyprint-TAtom> h

  prettyprint-QualId :
    QualId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[QualId]]")]
                        )
                      ]

  is-QualId =
    ?QualId-Plhdr()

  is-SDF-placeholder =
    ?QualId-Plhdr()

  prettyprint-Num :
    Num-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[Num]]")]
                     )
                   ]

  is-Num =
    ?Num-Plhdr()

  is-SDF-placeholder =
    ?Num-Plhdr()

  prettyprint-TAtom :
    TAtom-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[TAtom]]")]
                       )
                     ]

  is-TAtom =
    ?TAtom-Plhdr()

  is-SDF-placeholder =
    ?TAtom-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-MsgToken

  prettyprint-MsgToken :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-MsgToken)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-String)> t1__

  prettyprint-MsgToken :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-MsgToken)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Ident)> t1__

  prettyprint-MsgToken :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-MsgToken)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Num)> t1__

  is-MsgToken =
    fail

  prettyprint-MsgToken :
    amb([h|hs]) -> <prettyprint-MsgToken> h

  prettyprint-String :
    String-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[String]]")]
                        )
                      ]

  is-String =
    ?String-Plhdr()

  is-SDF-placeholder =
    ?String-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-MsgToken :
    MsgToken-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[MsgToken]]")]
                          )
                        ]

  is-MsgToken =
    ?MsgToken-Plhdr()

  is-SDF-placeholder =
    ?MsgToken-Plhdr()

  prettyprint-Num :
    Num-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[Num]]")]
                     )
                   ]

  is-Num =
    ?Num-Plhdr()

  is-SDF-placeholder =
    ?Num-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-TacArg

  prettyprint-TacArg :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-TacArg)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-QualId)> t1__

  prettyprint-TacArg :
    Unit() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("()")]
                )
              ]

  is-TacArg =
    ?Unit()

  get-indent :
    (Unit(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Unit(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Unit(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-TacArg :
    AtomArg(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("ltac : "), t1__']
                       )
                     ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TAtom)> t1__

  is-TacArg =
    ?AtomArg(_)

  get-indent :
    (AtomArg(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (AtomArg(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (AtomArg(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-TacArg :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-TacArg)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Term)> t1__

  is-TacArg =
    fail

  prettyprint-TacArg :
    amb([h|hs]) -> <prettyprint-TacArg> h

  prettyprint-QualId :
    QualId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[QualId]]")]
                        )
                      ]

  is-QualId =
    ?QualId-Plhdr()

  is-SDF-placeholder =
    ?QualId-Plhdr()

  prettyprint-TAtom :
    TAtom-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[TAtom]]")]
                       )
                     ]

  is-TAtom =
    ?TAtom-Plhdr()

  is-SDF-placeholder =
    ?TAtom-Plhdr()

  prettyprint-TacArg :
    TacArg-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[TacArg]]")]
                        )
                      ]

  is-TacArg =
    ?TacArg-Plhdr()

  is-SDF-placeholder =
    ?TacArg-Plhdr()

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-LetClause

  prettyprint-Coq =
    prettyprint-OptNames

  prettyprint-LetClause :
    LetClause(t1__, t2__, t3__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [t1__', t2__', S(" := "), t3__']
                                     )
                                   ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptNames)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t3__

  is-LetClause =
    ?LetClause(_, _, _)

  get-indent :
    (LetClause(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (LetClause(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (LetClause(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-OptNames :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptNames =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptNames :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [S(" "), t1__']
              )
            ]
    where not(is-OptNames)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-H-list(prettyprint-Name)> t1__

  is-LetClause =
    fail

  is-OptNames =
    fail

  prettyprint-LetClause :
    amb([h|hs]) -> <prettyprint-LetClause> h

  prettyprint-OptNames :
    amb([h|hs]) -> <prettyprint-OptNames> h

  prettyprint-LetClause :
    LetClause-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[LetClause]]")]
                           )
                         ]

  is-LetClause =
    ?LetClause-Plhdr()

  is-SDF-placeholder =
    ?LetClause-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-TExpr :
    TExpr-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[TExpr]]")]
                       )
                     ]

  is-TExpr =
    ?TExpr-Plhdr()

  is-SDF-placeholder =
    ?TExpr-Plhdr()

  prettyprint-OptNames :
    OptNames-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[OptNames]]")]
                          )
                        ]

  is-OptNames =
    ?OptNames-Plhdr()

  is-SDF-placeholder =
    ?OptNames-Plhdr()

  prettyprint-Name :
    Name-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Name]]")]
                      )
                    ]

  is-Name =
    ?Name-Plhdr()

  is-SDF-placeholder =
    ?Name-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-ContextRule

  prettyprint-Coq =
    prettyprint-OptContextHyps

  prettyprint-ContextRule :
    PatContext(t1__, t2__, t3__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [ t1__'
                                        , S("|- ")
                                        , t2__'
                                        , S(" => ")
                                        , t3__'
                                        ]
                                      )
                                    ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptContextHyps)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Pattern)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t3__

  is-ContextRule =
    ?PatContext(_, _, _)

  get-indent :
    (PatContext(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (PatContext(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (PatContext(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-ContextRule :
    WldContext(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("_ => "), t1__']
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t1__

  is-ContextRule =
    ?WldContext(_)

  get-indent :
    (WldContext(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (WldContext(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (WldContext(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-OptContextHyps :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptContextHyps =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptContextHyps :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__', S(" ")]
              )
            ]
    where not(is-OptContextHyps)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-H-list(prettyprint-ContextHyp|", ")> t1__

  is-ContextRule =
    fail

  is-OptContextHyps =
    fail

  prettyprint-ContextRule :
    amb([h|hs]) -> <prettyprint-ContextRule> h

  prettyprint-OptContextHyps :
    amb([h|hs]) -> <prettyprint-OptContextHyps> h

  prettyprint-Pattern :
    Pattern-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[Pattern]]")]
                         )
                       ]

  is-Pattern =
    ?Pattern-Plhdr()

  is-SDF-placeholder =
    ?Pattern-Plhdr()

  prettyprint-ContextRule :
    ContextRule-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[ContextRule]]")]
                             )
                           ]

  is-ContextRule =
    ?ContextRule-Plhdr()

  is-SDF-placeholder =
    ?ContextRule-Plhdr()

  prettyprint-TExpr :
    TExpr-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[TExpr]]")]
                       )
                     ]

  is-TExpr =
    ?TExpr-Plhdr()

  is-SDF-placeholder =
    ?TExpr-Plhdr()

  prettyprint-OptContextHyps :
    OptContextHyps-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("[[OptContextHyps]]")]
                                )
                              ]

  is-OptContextHyps =
    ?OptContextHyps-Plhdr()

  is-SDF-placeholder =
    ?OptContextHyps-Plhdr()

  prettyprint-ContextHyp :
    ContextHyp-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ContextHyp]]")]
                            )
                          ]

  is-ContextHyp =
    ?ContextHyp-Plhdr()

  is-SDF-placeholder =
    ?ContextHyp-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-ContextHyp

  prettyprint-Coq =
    prettyprint-OptCPattern

  prettyprint-ContextHyp :
    ContextHyp(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', S(" : "), t2__']
                                )
                              ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Name)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Pattern)> t2__

  is-ContextHyp =
    ?ContextHyp(_, _)

  get-indent :
    (ContextHyp(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ContextHyp(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ContextHyp(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-ContextHyp :
    ContextHypAssign(t1__, t2__, t3__) -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [t1__', S(" := "), t2__', t3__']
                                            )
                                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Name)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Pattern)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptCPattern)> t3__

  is-ContextHyp =
    ?ContextHypAssign(_, _, _)

  get-indent :
    (ContextHypAssign(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ContextHypAssign(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ContextHypAssign(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-OptCPattern :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptCPattern =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptCPattern :
    OptCPattern(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S(" : "), t1__']
                           )
                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Pattern)> t1__

  is-OptCPattern =
    ?OptCPattern(_)

  get-indent :
    (OptCPattern(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (OptCPattern(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (OptCPattern(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-ContextHyp =
    fail

  is-OptCPattern =
    fail

  prettyprint-ContextHyp :
    amb([h|hs]) -> <prettyprint-ContextHyp> h

  prettyprint-OptCPattern :
    amb([h|hs]) -> <prettyprint-OptCPattern> h

  prettyprint-ContextHyp :
    ContextHyp-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ContextHyp]]")]
                            )
                          ]

  is-ContextHyp =
    ?ContextHyp-Plhdr()

  is-SDF-placeholder =
    ?ContextHyp-Plhdr()

  prettyprint-Name :
    Name-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Name]]")]
                      )
                    ]

  is-Name =
    ?Name-Plhdr()

  is-SDF-placeholder =
    ?Name-Plhdr()

  prettyprint-OptCPattern :
    OptCPattern-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[OptCPattern]]")]
                             )
                           ]

  is-OptCPattern =
    ?OptCPattern-Plhdr()

  is-SDF-placeholder =
    ?OptCPattern-Plhdr()

  prettyprint-Pattern :
    Pattern-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[Pattern]]")]
                         )
                       ]

  is-Pattern =
    ?Pattern-Plhdr()

  is-SDF-placeholder =
    ?Pattern-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-MatchRule

  prettyprint-Coq =
    prettyprint-OptIdent

  prettyprint-Coq =
    prettyprint-OptPattern

  prettyprint-MatchRule :
    MatchPattern(t1__, t2__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__', S(" => "), t2__']
                                  )
                                ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Pattern)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t2__

  is-MatchRule =
    ?MatchPattern(_, _)

  get-indent :
    (MatchPattern(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (MatchPattern(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (MatchPattern(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-MatchRule :
    MatchContext(t1__, t2__, t3__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [ S("context")
                                          , t1__'
                                          , t2__'
                                          , S(" => ")
                                          , t3__'
                                          ]
                                        )
                                      ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptIdent)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptPattern)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t3__

  is-MatchRule =
    ?MatchContext(_, _, _)

  get-indent :
    (MatchContext(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (MatchContext(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (MatchContext(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-MatchRule :
    MatchAppContext(t1__, t2__, t3__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [ S("appcontext")
                                             , t1__'
                                             , t2__'
                                             , S(" => ")
                                             , t3__'
                                             ]
                                           )
                                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptIdent)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptPattern)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t3__

  is-MatchRule =
    ?MatchAppContext(_, _, _)

  get-indent :
    (MatchAppContext(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (MatchAppContext(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (MatchAppContext(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-MatchRule :
    MatchWld(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("_ => "), t1__']
                        )
                      ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-TExpr)> t1__

  is-MatchRule =
    ?MatchWld(_)

  get-indent :
    (MatchWld(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (MatchWld(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (MatchWld(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-OptIdent :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptIdent =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptIdent :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [S(" "), t1__']
              )
            ]
    where not(is-OptIdent)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Ident)> t1__

  prettyprint-OptPattern :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptPattern =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptPattern :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [S(" "), t1__']
              )
            ]
    where not(is-OptPattern)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Pattern)> t1__

  is-MatchRule =
    fail

  is-OptIdent =
    fail

  is-OptPattern =
    fail

  prettyprint-MatchRule :
    amb([h|hs]) -> <prettyprint-MatchRule> h

  prettyprint-OptIdent :
    amb([h|hs]) -> <prettyprint-OptIdent> h

  prettyprint-OptPattern :
    amb([h|hs]) -> <prettyprint-OptPattern> h

  prettyprint-MatchRule :
    MatchRule-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[MatchRule]]")]
                           )
                         ]

  is-MatchRule =
    ?MatchRule-Plhdr()

  is-SDF-placeholder =
    ?MatchRule-Plhdr()

  prettyprint-TExpr :
    TExpr-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[TExpr]]")]
                       )
                     ]

  is-TExpr =
    ?TExpr-Plhdr()

  is-SDF-placeholder =
    ?TExpr-Plhdr()

  prettyprint-OptIdent :
    OptIdent-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[OptIdent]]")]
                          )
                        ]

  is-OptIdent =
    ?OptIdent-Plhdr()

  is-SDF-placeholder =
    ?OptIdent-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-OptPattern :
    OptPattern-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[OptPattern]]")]
                            )
                          ]

  is-OptPattern =
    ?OptPattern-Plhdr()

  is-SDF-placeholder =
    ?OptPattern-Plhdr()

  prettyprint-Pattern :
    Pattern-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[Pattern]]")]
                         )
                       ]

  is-Pattern =
    ?Pattern-Plhdr()

  is-SDF-placeholder =
    ?Pattern-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-RedExpr

  prettyprint-RedExpr :
    RedRed() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("red")]
                  )
                ]

  is-RedExpr =
    ?RedRed()

  get-indent :
    (RedRed(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (RedRed(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (RedRed(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-RedExpr :
    RedHnf() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("hnf")]
                  )
                ]

  is-RedExpr =
    ?RedHnf()

  get-indent :
    (RedHnf(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (RedHnf(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (RedHnf(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-RedExpr :
    RedCompute() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("compute")]
                      )
                    ]

  is-RedExpr =
    ?RedCompute()

  get-indent :
    (RedCompute(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (RedCompute(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (RedCompute(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-RedExpr :
    RedSimpl() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("simpl")]
                    )
                  ]

  is-RedExpr =
    ?RedSimpl()

  get-indent :
    (RedSimpl(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (RedSimpl(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (RedSimpl(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-RedExpr :
    RedCbv() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("cbv")]
                  )
                ]

  is-RedExpr =
    ?RedCbv()

  get-indent :
    (RedCbv(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (RedCbv(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (RedCbv(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-RedExpr :
    RedLazy() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("lazy")]
                   )
                 ]

  is-RedExpr =
    ?RedLazy()

  get-indent :
    (RedLazy(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (RedLazy(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (RedLazy(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-RedExpr :
    RedUnfold() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("unfold")]
                     )
                   ]

  is-RedExpr =
    ?RedUnfold()

  get-indent :
    (RedUnfold(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (RedUnfold(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (RedUnfold(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-RedExpr :
    RedFold() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("fold")]
                   )
                 ]

  is-RedExpr =
    ?RedFold()

  get-indent :
    (RedFold(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (RedFold(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (RedFold(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-RedExpr :
    RedPattern() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("pattern")]
                      )
                    ]

  is-RedExpr =
    ?RedPattern()

  get-indent :
    (RedPattern(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (RedPattern(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (RedPattern(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  is-RedExpr =
    fail

  prettyprint-RedExpr :
    amb([h|hs]) -> <prettyprint-RedExpr> h

  prettyprint-RedExpr :
    RedExpr-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[RedExpr]]")]
                         )
                       ]

  is-RedExpr =
    ?RedExpr-Plhdr()

  is-SDF-placeholder =
    ?RedExpr-Plhdr()