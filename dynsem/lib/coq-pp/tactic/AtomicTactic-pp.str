module coq-pp/tactic/AtomicTactic-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  trans/pp
  coq-signatures/tactic/AtomicTactic-sig


imports
  coq-signatures/Lexical-sig
  coq-signatures/Qid-sig


imports
  coq-pp/Lexical-pp
  coq-pp/Qid-pp


strategies
  prettyprint-example =
    prettyprint-Coq


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Coq-start-symbols


strategies
  prettyprint-Reserved =
    ![S(<is-string>)]

  prettyprint-Coq =
    prettyprint-Reserved

  prettyprint-Reserved :
    amb([h|hs]) -> <prettyprint-Reserved> h


strategies
  prettyprint-Coq =
    prettyprint-AtomicTactic

  prettyprint-Coq =
    prettyprint-OptNumPrefix

  prettyprint-AtomicTactic :
    AtomicTactic(t1__, t2__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__', t2__']
                                  )
                                ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptNumPrefix)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-ATactic)> t2__

  is-AtomicTactic =
    ?AtomicTactic(_, _)

  get-indent :
    (AtomicTactic(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (AtomicTactic(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (AtomicTactic(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-OptNumPrefix :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptNumPrefix =
    ?None()

  get-indent :
    (None(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (None(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (None(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-OptNumPrefix :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__', S(" : ")]
              )
            ]
    where not(is-OptNumPrefix)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Num)> t1__

  is-AtomicTactic =
    fail

  is-OptNumPrefix =
    fail

  prettyprint-AtomicTactic :
    amb([h|hs]) -> <prettyprint-AtomicTactic> h

  prettyprint-OptNumPrefix :
    amb([h|hs]) -> <prettyprint-OptNumPrefix> h

  prettyprint-AtomicTactic :
    AtomicTactic-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("[[AtomicTactic]]")]
                              )
                            ]

  is-AtomicTactic =
    ?AtomicTactic-Plhdr()

  is-SDF-placeholder =
    ?AtomicTactic-Plhdr()

  prettyprint-ATactic :
    ATactic-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[ATactic]]")]
                         )
                       ]

  is-ATactic =
    ?ATactic-Plhdr()

  is-SDF-placeholder =
    ?ATactic-Plhdr()

  prettyprint-OptNumPrefix :
    OptNumPrefix-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("[[OptNumPrefix]]")]
                              )
                            ]

  is-OptNumPrefix =
    ?OptNumPrefix-Plhdr()

  is-SDF-placeholder =
    ?OptNumPrefix-Plhdr()

  prettyprint-Num :
    Num-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[Num]]")]
                     )
                   ]

  is-Num =
    ?Num-Plhdr()

  is-SDF-placeholder =
    ?Num-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-ATactic

  prettyprint-ATactic :
    Intros() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("intros")]
                  )
                ]

  is-ATactic =
    ?Intros()

  get-indent :
    (Intros(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Intros(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Intros(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    Auto() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("auto")]
                )
              ]

  is-ATactic =
    ?Auto()

  get-indent :
    (Auto(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Auto(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Auto(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    EAuto() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("eauto")]
                 )
               ]

  is-ATactic =
    ?EAuto()

  get-indent :
    (EAuto(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (EAuto(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (EAuto(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    Assumption() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("assumption")]
                      )
                    ]

  is-ATactic =
    ?Assumption()

  get-indent :
    (Assumption(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Assumption(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Assumption(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    Inversion(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("inversion "), t1__']
                         )
                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__

  is-ATactic =
    ?Inversion(_)

  get-indent :
    (Inversion(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Inversion(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Inversion(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    Subst() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("subst")]
                 )
               ]

  is-ATactic =
    ?Subst()

  get-indent :
    (Subst(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Subst(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Subst(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    Induction(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("induction "), t1__']
                         )
                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__

  is-ATactic =
    ?Induction(_)

  get-indent :
    (Induction(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Induction(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Induction(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    Destruct(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("destruct "), t1__']
                        )
                      ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__

  is-ATactic =
    ?Destruct(_)

  get-indent :
    (Destruct(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Destruct(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Destruct(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    Left() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("left")]
                )
              ]

  is-ATactic =
    ?Left()

  get-indent :
    (Left(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Left(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Left(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    Right() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("right")]
                 )
               ]

  is-ATactic =
    ?Right()

  get-indent :
    (Right(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Right(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Right(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    Reflexivity() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("reflexivity")]
                       )
                     ]

  is-ATactic =
    ?Reflexivity()

  get-indent :
    (Reflexivity(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Reflexivity(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Reflexivity(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-ATactic :
    Discriminate() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("discriminate")]
                        )
                      ]

  is-ATactic =
    ?Discriminate()

  get-indent :
    (Discriminate(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Discriminate(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Discriminate(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  is-ATactic =
    fail

  prettyprint-ATactic :
    amb([h|hs]) -> <prettyprint-ATactic> h

  prettyprint-QualId :
    QualId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[QualId]]")]
                        )
                      ]

  is-QualId =
    ?QualId-Plhdr()

  is-SDF-placeholder =
    ?QualId-Plhdr()

  prettyprint-ATactic :
    ATactic-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[ATactic]]")]
                         )
                       ]

  is-ATactic =
    ?ATactic-Plhdr()

  is-SDF-placeholder =
    ?ATactic-Plhdr()