module coq-pp/Gallina-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  coq-signatures/Gallina-sig


imports
  coq-signatures/Lexical-sig
  coq-signatures/Qid-sig
  coq-signatures/Options-sig
  coq-signatures/extensions/Function-sig


imports
  coq-pp/Lexical-pp
  coq-pp/Qid-pp
  coq-pp/Options-pp
  coq-pp/extensions/Function-pp


strategies
  prettyprint-example =
    prettyprint-Coq

  prettyprint-Coq =
    fail


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Coq-start-symbols

  prettyprint-Coq-start-symbols =
    fail


strategies
  prettyprint-Coq =
    prettyprint-Term

  prettyprint-Term :
    ForAll(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("forall ")
                              , t1__'
                              , S(", ")
                              , t2__'
                              ]
                            )
                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Binder)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?ForAll(_, _)

  get-indent :
    (ForAll(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ForAll(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ForAll(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Fun(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("fun ")
                           , t1__'
                           , S(" => ")
                           , t2__'
                           ]
                         )
                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Binder)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?Fun(_, _)

  get-indent :
    (Fun(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Fun(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Fun(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Fix(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("fix "), t1__']
                   )
                 ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-FixBodies)> t1__

  is-Term =
    ?Fix(_)

  get-indent :
    (Fix(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Fix(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Fix(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    CoFix(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("cofix "), t1__']
                     )
                   ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-CoFixBodies)> t1__

  is-Term =
    ?CoFix(_)

  get-indent :
    (CoFix(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (CoFix(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (CoFix(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Let(t1__, t2__, t3__, t4__, t5__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [ S("let ")
                                             , t1__'
                                             , t2__'
                                             , t3__'
                                             , S(" :=")
                                             ]
                                           )
                                         , t4__'
                                         , H(
                                             [SOpt(HS(), "0")]
                                           , [S("in")]
                                           )
                                         , t5__'
                                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptBinders)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptType)> t3__
    with t4__' := <pp-indent(|"2")> [ <is-string ; pp-one-Z(prettyprint-origin-term)
                                       <+ pp-one-Z(prettyprint-Term)> t4__
                                    ]
    with t5__' := <pp-indent(|"2")> [ <is-string ; pp-one-Z(prettyprint-origin-term)
                                       <+ pp-one-Z(prettyprint-Term)> t5__
                                    ]

  is-Term =
    ?Let(_, _, _, _, _)

  get-indent :
    ( Let(t1__, t2__, t3__, t4__, t5__)
    , index
    ) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := "  "
           case ?5 :
             indent := "  "
           otherwise :
             indent := ""
         end

  get-separator :
    ( Let(t1__, t2__, t3__, t4__, t5__)
    , index
    ) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           case ?5 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    ( Let(t1__, t2__, t3__, t4__, t5__)
    , index
    ) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           case ?3 :
             ws := ""
           case ?4 :
             ws := "\n  "
           case ?5 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    LetFix(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("let fix ")
                              , t1__'
                              , S(" in ")
                              , t2__'
                              ]
                            )
                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-FixBody)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?LetFix(_, _)

  get-indent :
    (LetFix(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (LetFix(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (LetFix(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    LetCoFix(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [ S("let fix ")
                                , t1__'
                                , S(" in ")
                                , t2__'
                                ]
                              )
                            ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-CoFixBody)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?LetCoFix(_, _)

  get-indent :
    (LetCoFix(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (LetCoFix(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (LetCoFix(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    LetTuple(t1__, t2__, t3__, t4__) -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [ S("let (")
                                            , t1__'
                                            , S(")")
                                            , t2__'
                                            , S(" := ")
                                            , t3__'
                                            , S(" in ")
                                            , t4__'
                                            ]
                                          )
                                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Name|", ")> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptDepRetType)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t3__
    with t4__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t4__

  is-Term =
    ?LetTuple(_, _, _, _)

  get-indent :
    (LetTuple(t1__, t2__, t3__, t4__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (LetTuple(t1__, t2__, t3__, t4__), index) -> separator
    with switch !index
           case ?1 :
             separator := ", "
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (LetTuple(t1__, t2__, t3__, t4__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           case ?4 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    LetPat(t1__, t2__, t3__, t4__, t5__, t6__) -> [ H(
                                                      [SOpt(HS(), "0")]
                                                    , [ S("let ")
                                                      , t1__'
                                                      , S(" ")
                                                      , t2__'
                                                      , t3__'
                                                      , S(" := ")
                                                      , t4__'
                                                      , t5__'
                                                      , S(" in ")
                                                      , t6__'
                                                      ]
                                                    )
                                                  ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-SingleQuote)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Pattern)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptInTerm)> t3__
    with t4__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t4__
    with t5__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptReturnType)> t5__
    with t6__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t6__

  is-Term =
    ?LetPat(_, _, _, _, _, _)

  get-indent :
    ( LetPat(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           case ?5 :
             indent := ""
           case ?6 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    ( LetPat(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           case ?5 :
             separator := ""
           case ?6 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    ( LetPat(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           case ?3 :
             ws := ""
           case ?4 :
             ws := " "
           case ?5 :
             ws := ""
           case ?6 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    If(t1__, t2__, t3__, t4__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [ S("if ")
                                      , t1__'
                                      , t2__'
                                      , S(" then ")
                                      , t3__'
                                      , S(" else ")
                                      , t4__'
                                      ]
                                    )
                                  ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptDepRetType)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t3__
    with t4__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t4__

  is-Term =
    ?If(_, _, _, _)

  get-indent :
    (If(t1__, t2__, t3__, t4__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (If(t1__, t2__, t3__, t4__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (If(t1__, t2__, t3__, t4__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           case ?4 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Cast(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__', S(" : "), t2__']
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?Cast(_, _)

  get-indent :
    (Cast(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Cast(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Cast(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Check(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" <: "), t2__']
                           )
                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?Check(_, _)

  get-indent :
    (Check(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Check(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Check(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Coerce(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__', S(" :>")]
                      )
                    ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__

  is-Term =
    ?Coerce(_)

  get-indent :
    (Coerce(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Coerce(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Coerce(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Arrow(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" -> "), t2__']
                           )
                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?Arrow(_, _)

  get-indent :
    (Arrow(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Arrow(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Arrow(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    ArrowLn(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S(" ->")]
                             )
                           , H(
                               [SOpt(HS(), "0")]
                             , [t2__']
                             )
                           ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?ArrowLn(_, _)

  get-indent :
    (ArrowLn(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ArrowLn(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ArrowLn(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := "\n"
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Apply(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" "), t2__']
                           )
                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?Apply(_, _)

  get-indent :
    (Apply(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Apply(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Apply(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    ApplyImplicit(t1__, t2__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [t1__', S(" "), t2__']
                                   )
                                 ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Arg)> t2__

  is-Term =
    ?ApplyImplicit(_, _)

  get-indent :
    (ApplyImplicit(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ApplyImplicit(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ApplyImplicit(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    UnHide(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("@"), t1__', t2__']
                            )
                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptTerms)> t2__

  is-Term =
    ?UnHide(_, _)

  get-indent :
    (UnHide(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (UnHide(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (UnHide(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    ScopeRef(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__', S(" % "), t2__']
                              )
                            ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t2__

  is-Term =
    ?ScopeRef(_, _)

  get-indent :
    (ScopeRef(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ScopeRef(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ScopeRef(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Match(t1__, t2__, t3__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ S("match ")
                                   , t1__'
                                   , t2__'
                                   , S(" with")
                                   ]
                                 )
                               , t3__'
                               ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-MatchItem|", ")> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptReturnType)> t2__
    with t3__' := <pp-indent(|"2")> [ <is-string ; pp-one-Z(prettyprint-origin-term)
                                       <+ pp-one-Z(prettyprint-Equations)> t3__
                                    , S(" end")
                                    ]

  is-Term =
    ?Match(_, _, _)

  get-indent :
    (Match(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := "  "
           otherwise :
             indent := ""
         end

  get-separator :
    (Match(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ", "
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Match(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           case ?3 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Ref(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__']
                   )
                 ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__

  is-Term =
    ?Ref(_)

  get-indent :
    (Ref(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Ref(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Ref(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Term)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Sort)> t1__

  prettyprint-Term :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Term)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Num)> t1__

  prettyprint-Term :
    WldTerm() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("_")]
                   )
                 ]

  is-Term =
    ?WldTerm()

  get-indent :
    (WldTerm(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (WldTerm(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (WldTerm(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("(")
                               , t1__'
                               , S(")")
                               ]
                             )
                           ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__

  is-Term =
    fail

  prettyprint-Term :
    amb([h|hs]) -> <prettyprint-Term> h

  prettyprint-Binder :
    Binder-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[Binder]]")]
                        )
                      ]

  is-Binder =
    ?Binder-Plhdr()

  is-SDF-placeholder =
    ?Binder-Plhdr()

  prettyprint-FixBodies :
    FixBodies-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[FixBodies]]")]
                           )
                         ]

  is-FixBodies =
    ?FixBodies-Plhdr()

  is-SDF-placeholder =
    ?FixBodies-Plhdr()

  prettyprint-CoFixBodies :
    CoFixBodies-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[CoFixBodies]]")]
                             )
                           ]

  is-CoFixBodies =
    ?CoFixBodies-Plhdr()

  is-SDF-placeholder =
    ?CoFixBodies-Plhdr()

  prettyprint-OptBinders :
    OptBinders-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[OptBinders]]")]
                            )
                          ]

  is-OptBinders =
    ?OptBinders-Plhdr()

  is-SDF-placeholder =
    ?OptBinders-Plhdr()

  prettyprint-OptType :
    OptType-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[OptType]]")]
                         )
                       ]

  is-OptType =
    ?OptType-Plhdr()

  is-SDF-placeholder =
    ?OptType-Plhdr()

  prettyprint-FixBody :
    FixBody-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[FixBody]]")]
                         )
                       ]

  is-FixBody =
    ?FixBody-Plhdr()

  is-SDF-placeholder =
    ?FixBody-Plhdr()

  prettyprint-CoFixBody :
    CoFixBody-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[CoFixBody]]")]
                           )
                         ]

  is-CoFixBody =
    ?CoFixBody-Plhdr()

  is-SDF-placeholder =
    ?CoFixBody-Plhdr()

  prettyprint-Name :
    Name-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Name]]")]
                      )
                    ]

  is-Name =
    ?Name-Plhdr()

  is-SDF-placeholder =
    ?Name-Plhdr()

  prettyprint-SingleQuote :
    SingleQuote-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[SingleQuote]]")]
                             )
                           ]

  is-SingleQuote =
    ?SingleQuote-Plhdr()

  is-SDF-placeholder =
    ?SingleQuote-Plhdr()

  prettyprint-Pattern :
    Pattern-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[Pattern]]")]
                         )
                       ]

  is-Pattern =
    ?Pattern-Plhdr()

  is-SDF-placeholder =
    ?Pattern-Plhdr()

  prettyprint-OptInTerm :
    OptInTerm-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[OptInTerm]]")]
                           )
                         ]

  is-OptInTerm =
    ?OptInTerm-Plhdr()

  is-SDF-placeholder =
    ?OptInTerm-Plhdr()

  prettyprint-OptDepRetType :
    OptDepRetType-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("[[OptDepRetType]]")]
                               )
                             ]

  is-OptDepRetType =
    ?OptDepRetType-Plhdr()

  is-SDF-placeholder =
    ?OptDepRetType-Plhdr()

  prettyprint-Arg :
    Arg-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[Arg]]")]
                     )
                   ]

  is-Arg =
    ?Arg-Plhdr()

  is-SDF-placeholder =
    ?Arg-Plhdr()

  prettyprint-OptTerms :
    OptTerms-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[OptTerms]]")]
                          )
                        ]

  is-OptTerms =
    ?OptTerms-Plhdr()

  is-SDF-placeholder =
    ?OptTerms-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-MatchItem :
    MatchItem-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[MatchItem]]")]
                           )
                         ]

  is-MatchItem =
    ?MatchItem-Plhdr()

  is-SDF-placeholder =
    ?MatchItem-Plhdr()

  prettyprint-OptReturnType :
    OptReturnType-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("[[OptReturnType]]")]
                               )
                             ]

  is-OptReturnType =
    ?OptReturnType-Plhdr()

  is-SDF-placeholder =
    ?OptReturnType-Plhdr()

  prettyprint-Equations :
    Equations-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[Equations]]")]
                           )
                         ]

  is-Equations =
    ?Equations-Plhdr()

  is-SDF-placeholder =
    ?Equations-Plhdr()

  prettyprint-QualId :
    QualId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[QualId]]")]
                        )
                      ]

  is-QualId =
    ?QualId-Plhdr()

  is-SDF-placeholder =
    ?QualId-Plhdr()

  prettyprint-Sort :
    Sort-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Sort]]")]
                      )
                    ]

  is-Sort =
    ?Sort-Plhdr()

  is-SDF-placeholder =
    ?Sort-Plhdr()

  prettyprint-Num :
    Num-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[Num]]")]
                     )
                   ]

  is-Num =
    ?Num-Plhdr()

  is-SDF-placeholder =
    ?Num-Plhdr()

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Arg

  prettyprint-Arg :
    ImplicitArg(t1__, t2__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ S("(")
                                   , t1__'
                                   , S(" := ")
                                   , t2__'
                                   , S(")")
                                   ]
                                 )
                               ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Arg =
    ?ImplicitArg(_, _)

  get-indent :
    (ImplicitArg(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ImplicitArg(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ImplicitArg(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Arg =
    fail

  prettyprint-Arg :
    amb([h|hs]) -> <prettyprint-Arg> h

  prettyprint-Arg :
    Arg-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[Arg]]")]
                     )
                   ]

  is-Arg =
    ?Arg-Plhdr()

  is-SDF-placeholder =
    ?Arg-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Binder

  prettyprint-Binder :
    Bind(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Name)> t1__

  is-Binder =
    ?Bind(_)

  get-indent :
    (Bind(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Bind(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Bind(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Binder :
    Binds(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ S("(")
                             , t1__'
                             , S(": ")
                             , t2__'
                             , S(")")
                             ]
                           )
                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Name|" ")> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Binder =
    ?Binds(_, _)

  get-indent :
    (Binds(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Binds(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := " "
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Binds(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Binder :
    Assign(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("(")
                                    , t1__'
                                    , t2__'
                                    , S(" := ")
                                    , t3__'
                                    , S(")")
                                    ]
                                  )
                                ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Name)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptType)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t3__

  is-Binder =
    ?Assign(_, _, _)

  get-indent :
    (Assign(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Assign(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Assign(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Binder =
    fail

  prettyprint-Binder :
    amb([h|hs]) -> <prettyprint-Binder> h

  prettyprint-Binder :
    Binder-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[Binder]]")]
                        )
                      ]

  is-Binder =
    ?Binder-Plhdr()

  is-SDF-placeholder =
    ?Binder-Plhdr()

  prettyprint-Name :
    Name-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Name]]")]
                      )
                    ]

  is-Name =
    ?Name-Plhdr()

  is-SDF-placeholder =
    ?Name-Plhdr()

  prettyprint-OptType :
    OptType-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[OptType]]")]
                         )
                       ]

  is-OptType =
    ?OptType-Plhdr()

  is-SDF-placeholder =
    ?OptType-Plhdr()

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Name

  prettyprint-Name :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Name)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Ident)> t1__

  prettyprint-Name :
    WldName() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("_")]
                   )
                 ]

  is-Name =
    ?WldName()

  get-indent :
    (WldName(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (WldName(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (WldName(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  is-Name =
    fail

  prettyprint-Name :
    amb([h|hs]) -> <prettyprint-Name> h

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-Name :
    Name-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Name]]")]
                      )
                    ]

  is-Name =
    ?Name-Plhdr()

  is-SDF-placeholder =
    ?Name-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Sort

  prettyprint-Sort :
    Prop() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("Prop")]
                )
              ]

  is-Sort =
    ?Prop()

  get-indent :
    (Prop(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Prop(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Prop(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Sort :
    Set() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("Set")]
               )
             ]

  is-Sort =
    ?Set()

  get-indent :
    (Set(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Set(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Set(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Sort :
    Type() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("Type")]
                )
              ]

  is-Sort =
    ?Type()

  get-indent :
    (Type(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Type(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Type(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  is-Sort =
    fail

  prettyprint-Sort :
    amb([h|hs]) -> <prettyprint-Sort> h

  prettyprint-Sort :
    Sort-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Sort]]")]
                      )
                    ]

  is-Sort =
    ?Sort-Plhdr()

  is-SDF-placeholder =
    ?Sort-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Equations

  prettyprint-Equations :
    ListEqBar(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("| "), t1__']
                         )
                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Equation|"| ")> t1__

  is-Equations =
    ?ListEqBar(_)

  get-indent :
    (ListEqBar(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ListEqBar(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := "| "
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ListEqBar(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Equations :
    ListEq(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__']
                      )
                    ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Equation|"| ")> t1__

  is-Equations =
    ?ListEq(_)

  get-indent :
    (ListEq(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (ListEq(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := "| "
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (ListEq(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  is-Equations =
    fail

  prettyprint-Equations :
    amb([h|hs]) -> <prettyprint-Equations> h

  prettyprint-Equations :
    Equations-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[Equations]]")]
                           )
                         ]

  is-Equations =
    ?Equations-Plhdr()

  is-SDF-placeholder =
    ?Equations-Plhdr()

  prettyprint-Equation :
    Equation-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[Equation]]")]
                          )
                        ]

  is-Equation =
    ?Equation-Plhdr()

  is-SDF-placeholder =
    ?Equation-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-FixBodies

  prettyprint-Coq =
    prettyprint-FixBody

  prettyprint-Coq =
    prettyprint-CoFixBodies

  prettyprint-Coq =
    prettyprint-CoFixBody

  prettyprint-Coq =
    prettyprint-MatchItem

  prettyprint-Coq =
    prettyprint-ReturnType

  prettyprint-Coq =
    prettyprint-Equation

  prettyprint-Coq =
    prettyprint-MultPattern

  prettyprint-Coq =
    prettyprint-Pattern

  prettyprint-Coq =
    prettyprint-OrPattern

  prettyprint-FixBodies :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-FixBodies)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-FixBody)> t1__

  prettyprint-FixBodies :
    With(t1__, t2__, t3__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ t1__'
                                  , S(" with ")
                                  , t2__'
                                  , S(" for ")
                                  , t3__'
                                  ]
                                )
                              ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-FixBody)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-FixBody|"with ")> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t3__

  is-FixBodies =
    ?With(_, _, _)

  get-indent :
    (With(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (With(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := "with "
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (With(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-FixBody :
    FixBody(t1__, t2__, t3__, t4__, t5__) -> [ H(
                                                 [SOpt(HS(), "0")]
                                               , [ t1__'
                                                 , S(" ")
                                                 , t2__'
                                                 , t3__'
                                                 , t4__'
                                                 , S(" :=")
                                                 ]
                                               )
                                             , t5__'
                                             ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Binder|" ")> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptAnnotation)> t3__
    with t4__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptType)> t4__
    with t5__' := <pp-indent(|"2")> [ <is-string ; pp-one-Z(prettyprint-origin-term)
                                       <+ pp-one-Z(prettyprint-Term)> t5__
                                    ]

  is-FixBody =
    ?FixBody(_, _, _, _, _)

  get-indent :
    ( FixBody(t1__, t2__, t3__, t4__, t5__)
    , index
    ) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           case ?5 :
             indent := "  "
           otherwise :
             indent := ""
         end

  get-separator :
    ( FixBody(t1__, t2__, t3__, t4__, t5__)
    , index
    ) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := " "
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           case ?5 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    ( FixBody(t1__, t2__, t3__, t4__, t5__)
    , index
    ) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := ""
           case ?4 :
             ws := ""
           case ?5 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-CoFixBodies :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-CoFixBodies)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-CoFixBody)> t1__

  prettyprint-CoFixBodies :
    With(t1__, t2__, t3__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ t1__'
                                  , S(" with ")
                                  , t2__'
                                  , S(" for ")
                                  , t3__'
                                  ]
                                )
                              ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-CoFixBody)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-CoFixBody|"with ")> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t3__

  is-CoFixBodies =
    ?With(_, _, _)

  get-indent :
    (With(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (With(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := "with "
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (With(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-CoFixBody :
    CoFixBody(t1__, t2__, t3__, t4__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [ t1__'
                                             , t2__'
                                             , t3__'
                                             , S(" := ")
                                             , t4__'
                                             ]
                                           )
                                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptBinders)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptType)> t3__
    with t4__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t4__

  is-CoFixBody =
    ?CoFixBody(_, _, _, _)

  get-indent :
    (CoFixBody(t1__, t2__, t3__, t4__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (CoFixBody(t1__, t2__, t3__, t4__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (CoFixBody(t1__, t2__, t3__, t4__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := ""
           case ?4 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-MatchItem :
    MatchItem(t1__, t2__, t3__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [t1__', t2__', t3__']
                                     )
                                   ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptAlias)> t2__
    with t3__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-OptInTerm)> t3__

  is-MatchItem =
    ?MatchItem(_, _, _)

  get-indent :
    (MatchItem(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (MatchItem(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (MatchItem(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-ReturnType :
    Return(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("return "), t1__']
                      )
                    ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__

  is-ReturnType =
    ?Return(_)

  get-indent :
    (Return(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Return(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Return(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Equation :
    Eq(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S(" => "), t2__']
                        )
                      , H(
                          []
                        , [S("")]
                        )
                      ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-MultPattern|" | ")> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Equation =
    ?Eq(_, _)

  get-indent :
    (Eq(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Eq(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := " | "
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Eq(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-MultPattern :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-MultPattern)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-H-list(prettyprint-Pattern|", ")> t1__

  prettyprint-Pattern :
    QidPattern(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', S(" "), t2__']
                                )
                              ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-QualId)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Pattern|" ")> t2__

  is-Pattern =
    ?QidPattern(_, _)

  get-indent :
    (QidPattern(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (QidPattern(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := " "
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (QidPattern(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Pattern :
    AsPattern(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" as "), t2__']
                               )
                             ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Pattern)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t2__

  is-Pattern =
    ?AsPattern(_, _)

  get-indent :
    (AsPattern(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (AsPattern(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (AsPattern(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Pattern :
    XPattern(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__', S(" % "), t2__']
                              )
                            ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Pattern)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Ident)> t2__

  is-Pattern =
    ?XPattern(_, _)

  get-indent :
    (XPattern(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (XPattern(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (XPattern(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Pattern :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Pattern)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-QualId)> t1__

  prettyprint-Pattern :
    Wld() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("_")]
               )
             ]

  is-Pattern =
    ?Wld()

  get-indent :
    (Wld(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Wld(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Wld(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Pattern :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Pattern)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Num)> t1__

  prettyprint-Pattern :
    OrPattern(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("(")
                           , t1__'
                           , S(")")
                           ]
                         )
                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-OrPattern|", ")> t1__

  is-Pattern =
    ?OrPattern(_)

  get-indent :
    (OrPattern(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (OrPattern(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ", "
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (OrPattern(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-OrPattern :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-OrPattern)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-H-list(prettyprint-Pattern|" | ")> t1__

  is-FixBodies =
    fail

  is-FixBody =
    fail

  is-CoFixBodies =
    fail

  is-CoFixBody =
    fail

  is-MatchItem =
    fail

  is-ReturnType =
    fail

  is-Equation =
    fail

  is-MultPattern =
    fail

  is-Pattern =
    fail

  is-OrPattern =
    fail

  prettyprint-FixBodies :
    amb([h|hs]) -> <prettyprint-FixBodies> h

  prettyprint-FixBody :
    amb([h|hs]) -> <prettyprint-FixBody> h

  prettyprint-CoFixBodies :
    amb([h|hs]) -> <prettyprint-CoFixBodies> h

  prettyprint-CoFixBody :
    amb([h|hs]) -> <prettyprint-CoFixBody> h

  prettyprint-MatchItem :
    amb([h|hs]) -> <prettyprint-MatchItem> h

  prettyprint-ReturnType :
    amb([h|hs]) -> <prettyprint-ReturnType> h

  prettyprint-Equation :
    amb([h|hs]) -> <prettyprint-Equation> h

  prettyprint-MultPattern :
    amb([h|hs]) -> <prettyprint-MultPattern> h

  prettyprint-Pattern :
    amb([h|hs]) -> <prettyprint-Pattern> h

  prettyprint-OrPattern :
    amb([h|hs]) -> <prettyprint-OrPattern> h

  prettyprint-FixBodies :
    FixBodies-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[FixBodies]]")]
                           )
                         ]

  is-FixBodies =
    ?FixBodies-Plhdr()

  is-SDF-placeholder =
    ?FixBodies-Plhdr()

  prettyprint-FixBody :
    FixBody-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[FixBody]]")]
                         )
                       ]

  is-FixBody =
    ?FixBody-Plhdr()

  is-SDF-placeholder =
    ?FixBody-Plhdr()

  prettyprint-Binder :
    Binder-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[Binder]]")]
                        )
                      ]

  is-Binder =
    ?Binder-Plhdr()

  is-SDF-placeholder =
    ?Binder-Plhdr()

  prettyprint-OptAnnotation :
    OptAnnotation-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("[[OptAnnotation]]")]
                               )
                             ]

  is-OptAnnotation =
    ?OptAnnotation-Plhdr()

  is-SDF-placeholder =
    ?OptAnnotation-Plhdr()

  prettyprint-CoFixBodies :
    CoFixBodies-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[CoFixBodies]]")]
                             )
                           ]

  is-CoFixBodies =
    ?CoFixBodies-Plhdr()

  is-SDF-placeholder =
    ?CoFixBodies-Plhdr()

  prettyprint-CoFixBody :
    CoFixBody-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[CoFixBody]]")]
                           )
                         ]

  is-CoFixBody =
    ?CoFixBody-Plhdr()

  is-SDF-placeholder =
    ?CoFixBody-Plhdr()

  prettyprint-OptBinders :
    OptBinders-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[OptBinders]]")]
                            )
                          ]

  is-OptBinders =
    ?OptBinders-Plhdr()

  is-SDF-placeholder =
    ?OptBinders-Plhdr()

  prettyprint-OptType :
    OptType-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[OptType]]")]
                         )
                       ]

  is-OptType =
    ?OptType-Plhdr()

  is-SDF-placeholder =
    ?OptType-Plhdr()

  prettyprint-MatchItem :
    MatchItem-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[MatchItem]]")]
                           )
                         ]

  is-MatchItem =
    ?MatchItem-Plhdr()

  is-SDF-placeholder =
    ?MatchItem-Plhdr()

  prettyprint-OptAlias :
    OptAlias-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[OptAlias]]")]
                          )
                        ]

  is-OptAlias =
    ?OptAlias-Plhdr()

  is-SDF-placeholder =
    ?OptAlias-Plhdr()

  prettyprint-OptInTerm :
    OptInTerm-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[OptInTerm]]")]
                           )
                         ]

  is-OptInTerm =
    ?OptInTerm-Plhdr()

  is-SDF-placeholder =
    ?OptInTerm-Plhdr()

  prettyprint-ReturnType :
    ReturnType-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ReturnType]]")]
                            )
                          ]

  is-ReturnType =
    ?ReturnType-Plhdr()

  is-SDF-placeholder =
    ?ReturnType-Plhdr()

  prettyprint-Equation :
    Equation-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[Equation]]")]
                          )
                        ]

  is-Equation =
    ?Equation-Plhdr()

  is-SDF-placeholder =
    ?Equation-Plhdr()

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()

  prettyprint-MultPattern :
    MultPattern-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[MultPattern]]")]
                             )
                           ]

  is-MultPattern =
    ?MultPattern-Plhdr()

  is-SDF-placeholder =
    ?MultPattern-Plhdr()

  prettyprint-Ident :
    Ident-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Ident]]")]
                       )
                     ]

  is-Ident =
    ?Ident-Plhdr()

  is-SDF-placeholder =
    ?Ident-Plhdr()

  prettyprint-QualId :
    QualId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[QualId]]")]
                        )
                      ]

  is-QualId =
    ?QualId-Plhdr()

  is-SDF-placeholder =
    ?QualId-Plhdr()

  prettyprint-Num :
    Num-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[Num]]")]
                     )
                   ]

  is-Num =
    ?Num-Plhdr()

  is-SDF-placeholder =
    ?Num-Plhdr()

  prettyprint-OrPattern :
    OrPattern-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[OrPattern]]")]
                           )
                         ]

  is-OrPattern =
    ?OrPattern-Plhdr()

  is-SDF-placeholder =
    ?OrPattern-Plhdr()

  prettyprint-Pattern :
    Pattern-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[Pattern]]")]
                         )
                       ]

  is-Pattern =
    ?Pattern-Plhdr()

  is-SDF-placeholder =
    ?Pattern-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Term

  prettyprint-Term :
    List(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("[")
                      , t1__'
                      , S("]")
                      ]
                    )
                  ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Term|";")> t1__

  is-Term =
    ?List(_)

  get-indent :
    (List(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (List(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ";"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (List(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Tuple(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ S("(")
                             , t1__'
                             , S(",")
                             , t2__'
                             , S(")")
                             ]
                           )
                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Term|",")> t2__

  is-Term =
    ?Tuple(_, _)

  get-indent :
    (Tuple(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Tuple(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ","
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Tuple(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Prod(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__', S(" * "), t2__']
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?Prod(_, _)

  get-indent :
    (Prod(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Prod(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Prod(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    Eq(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S(" = "), t2__']
                        )
                      ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?Eq(_, _)

  get-indent :
    (Eq(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Eq(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Eq(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    NotE(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__', S(" <> "), t2__']
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?NotE(_, _)

  get-indent :
    (NotE(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (NotE(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (NotE(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Term :
    And(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__', S(" /\\ "), t2__']
                         )
                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?And(_, _)

  get-indent :
    (And(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (And(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (And(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Term =
    fail

  prettyprint-Term :
    amb([h|hs]) -> <prettyprint-Term> h

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()


strategies
  prettyprint-Coq =
    prettyprint-Type

  prettyprint-Type :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Type)
    where t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                    <+ pp-one-Z(prettyprint-Term)> t1__

  is-Type =
    fail

  prettyprint-Type :
    amb([h|hs]) -> <prettyprint-Type> h

  prettyprint-Type :
    Type-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Type]]")]
                      )
                    ]

  is-Type =
    ?Type-Plhdr()

  is-SDF-placeholder =
    ?Type-Plhdr()

  prettyprint-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Term]]")]
                      )
                    ]

  is-Term =
    ?Term-Plhdr()

  is-SDF-placeholder =
    ?Term-Plhdr()