module lib/Coq/pp/tactic/Toplevel-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  lib/Coq/signatures/tactic/Toplevel-sig


imports
  lib/Coq/signatures/Qid-sig
  lib/Coq/signatures/Lexical-sig
  lib/Coq/signatures/tactic/Expr-sig
  lib/Coq/signatures/Vernacular-sig


imports
  lib/Coq/pp/Qid-pp
  lib/Coq/pp/Lexical-pp
  lib/Coq/pp/tactic/Expr-pp
  lib/Coq/pp/Vernacular-pp


strategies
  prettyprintCoq-Reserved =
    ![S(<is-string>)]

  prettyprintCoq-example =
    prettyprintCoq-Reserved


strategies
  prettyprintCoq-example =
    prettyprintCoq-Sentence

  prettyprintCoq-example =
    prettyprintCoq-Tactic

  prettyprintCoq-Sentence :
    Ltac(t0__, t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t0__', S("Ltac "), t1__']
                          )
                        ]
    with t0__' := <pp-one-Z(prettyprintCoq-OptLocalPrefix)> t0__
    with t1__' := <pp-H-list(prettyprintCoq-LtacDef|" with")> t1__

  is-Sentence =
    ?Ltac(_, _)

  prettyprintCoq-Tactic :
    Tactic(t0__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t0__', S(".")]
                      )
                    ]
    with t0__' := <pp-one-Z(prettyprintCoq-TExpr)> t0__

  is-Tactic =
    ?Tactic(_)

  is-Sentence =
    fail

  is-Tactic =
    fail


strategies
  prettyprintCoq-example =
    prettyprintCoq-OptLocalPrefix

  prettyprintCoq-OptLocalPrefix :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptLocalPrefix =
    ?None()

  prettyprintCoq-OptLocalPrefix :
    LocalTactic() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("Local ")]
                       )
                     ]

  is-OptLocalPrefix =
    ?LocalTactic()

  is-OptLocalPrefix =
    fail


strategies
  prettyprintCoq-example =
    prettyprintCoq-LtacDef

  prettyprintCoq-LtacDef :
    LtacDef(t0__, t1__, t2__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [ t0__'
                                     , S(" ")
                                     , t1__'
                                     , S(" := ")
                                     , t2__'
                                     ]
                                   )
                                 ]
    with t0__' := <pp-one-Z(prettyprintCoq-QualId)> t0__
    with t1__' := <pp-H-list(prettyprintCoq-Ident)> t1__
    with t2__' := <pp-one-Z(prettyprintCoq-TExpr)> t2__

  is-LtacDef =
    ?LtacDef(_, _, _)

  is-LtacDef =
    fail