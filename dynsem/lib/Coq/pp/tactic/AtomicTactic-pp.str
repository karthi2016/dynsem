module lib/Coq/pp/tactic/AtomicTactic-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  lib/Coq/signatures/tactic/AtomicTactic-sig


imports
  lib/Coq/signatures/Lexical-sig
  lib/Coq/signatures/Qid-sig


imports
  lib/Coq/pp/Lexical-pp
  lib/Coq/pp/Qid-pp


strategies
  prettyprintCoq-Reserved =
    ![S(<is-string>)]

  prettyprintCoq-example =
    prettyprintCoq-Reserved


strategies
  prettyprintCoq-example =
    prettyprintCoq-AtomicTactic

  prettyprintCoq-example =
    prettyprintCoq-OptNumPrefix

  prettyprintCoq-AtomicTactic :
    AtomicTactic(t0__, t1__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t0__', t1__']
                                  )
                                ]
    with t0__' := <pp-one-Z(prettyprintCoq-OptNumPrefix)> t0__
    with t1__' := <pp-one-Z(prettyprintCoq-ATactic)> t1__

  is-AtomicTactic =
    ?AtomicTactic(_, _)

  prettyprintCoq-OptNumPrefix :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-OptNumPrefix =
    ?None()

  prettyprintCoq-OptNumPrefix :
    t0__ -> [ H(
                [SOpt(HS(), "0")]
              , [t0__', S(" : ")]
              )
            ]
    where not(is-OptNumPrefix)
    where t0__' := <pp-one-Z(prettyprintCoq-Num)> t0__

  is-AtomicTactic =
    fail

  is-OptNumPrefix =
    fail


strategies
  prettyprintCoq-example =
    prettyprintCoq-ATactic

  prettyprintCoq-ATactic :
    Intros() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("intros")]
                  )
                ]

  is-ATactic =
    ?Intros()

  prettyprintCoq-ATactic :
    Auto() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("auto")]
                )
              ]

  is-ATactic =
    ?Auto()

  prettyprintCoq-ATactic :
    EAuto() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("eauto")]
                 )
               ]

  is-ATactic =
    ?EAuto()

  prettyprintCoq-ATactic :
    Assumption() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("assumption")]
                      )
                    ]

  is-ATactic =
    ?Assumption()

  prettyprintCoq-ATactic :
    Inversion(t0__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("inversion "), t0__']
                         )
                       ]
    with t0__' := <pp-one-Z(prettyprintCoq-QualId)> t0__

  is-ATactic =
    ?Inversion(_)

  prettyprintCoq-ATactic :
    Subst() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("subst")]
                 )
               ]

  is-ATactic =
    ?Subst()

  prettyprintCoq-ATactic :
    Induction(t0__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("induction "), t0__']
                         )
                       ]
    with t0__' := <pp-one-Z(prettyprintCoq-QualId)> t0__

  is-ATactic =
    ?Induction(_)

  prettyprintCoq-ATactic :
    Destruct(t0__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("destruct "), t0__']
                        )
                      ]
    with t0__' := <pp-one-Z(prettyprintCoq-QualId)> t0__

  is-ATactic =
    ?Destruct(_)

  prettyprintCoq-ATactic :
    Left() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("left")]
                )
              ]

  is-ATactic =
    ?Left()

  prettyprintCoq-ATactic :
    Right() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("right")]
                 )
               ]

  is-ATactic =
    ?Right()

  prettyprintCoq-ATactic :
    Reflexivity() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("reflexivity")]
                       )
                     ]

  is-ATactic =
    ?Reflexivity()

  prettyprintCoq-ATactic :
    Discriminate() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("discriminate")]
                        )
                      ]

  is-ATactic =
    ?Discriminate()

  is-ATactic =
    fail