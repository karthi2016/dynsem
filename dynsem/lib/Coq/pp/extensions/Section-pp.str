module lib/Coq/pp/extensions/Section-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  lib/Coq/signatures/extensions/Section-sig


imports
  lib/Coq/signatures/Lexical-sig
  lib/Coq/signatures/Vernacular-sig


imports
  lib/Coq/pp/Lexical-pp
  lib/Coq/pp/Vernacular-pp


strategies
  prettyprintCoq-example =
    prettyprintCoq-Sentence

  prettyprintCoq-Sentence :
    Section(t0__, t1__, t2__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [ S("Section ")
                                     , t0__'
                                     , S(".")
                                     ]
                                   )
                                 , H(
                                     [SOpt(HS(), "0")]
                                   , [t1__']
                                   )
                                 , H(
                                     [SOpt(HS(), "0")]
                                   , [ S("End ")
                                     , t2__'
                                     , S(".")
                                     ]
                                   )
                                 ]
    with t0__' := <pp-one-Z(prettyprintCoq-Ident)> t0__
    with t1__' := <pp-V-list(prettyprintCoq-Sentence|"")> t1__
    with t2__' := <pp-one-Z(prettyprintCoq-Ident)> t2__

  is-Sentence =
    ?Section(_, _, _)

  is-Sentence =
    fail


strategies
  prettyprintCoq-Reserved =
    ![S(<is-string>)]

  prettyprintCoq-example =
    prettyprintCoq-Reserved