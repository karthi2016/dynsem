module ds

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	include/ds
	lib/editor-common.generated
	lib/runtime/analysis/-
	lib/runtime/nabl/-
	lib/runtime/task/-
	lib/runtime/index/-
	lib/runtime/tmpl/pp
	ds.pp.generated
	names
	check
	generate-str
	generate-truffle
	refocus
	factorize
	explicate
	outline
	strict
	sugar
	dstocoq

rules // Analysis
	
	editor-analyze = analysis-default-editor
	
	analysis-single-default-interface = 
		analysis-single-default(id, id, id|<language>)
	analysis-multiple-default-interface = 
		analysis-multiple-default(parse-file <+ !(), id, id, id|<language>, <project-path>)
	
	editor-save = analysis-save-default(|<language>)

rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) -> "Hover"

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast
			
	debug-show-index-current =
		analysis-debug-show-current-partition(|<language>)
		 
	debug-show-index-all =
		analysis-debug-show-all-partitions(|<language>)

	debug-show-tasks-selection =
		analysis-debug-show-tasks-selection(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)

rules // Builders
  
  // Transforms a selection to Stratego
  generate-stratego:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"generated.str")> path;
      result   := <to-stratego(|filename)> selected
  
  // Transforms to Truffle
  generate-truffle:
    (selected, position, ast, path, project-path) -> None()
    with
      filename := <guarantee-extension(|"generated.java")> path;
      <to-truffle(|project-path)> ast
  
  prettyprint-ID = ![S(<id>)]
  prettyprint-INFER = ![S(<id>)]
  prettyprint-STRING = ![S(<id>)]
  prettyprint-INT = ![S(<id>)]
   
  refocus-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"refocussed.ds")> path;
      result   := <unstrict-rules; refocus-rules; prettyprint-example; box2text-string(|80)> selected

  factorize-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"factorized.ds")> path;
      result   := <unstrict-rules; factorize-rules; prettyprint-example; box2text-string(|80)> selected

  explicate-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explicated.ds")> path;
      result   := <unstrict-rules; desugar-all; explicate-rules; sugar-all; prettyprint-example; box2text-string(|80)> selected

  explicate-editor-ast:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explicated.aterm")> path;
      result   := <desugar-all; explicate-rules> selected

  // format rules
  format-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"pp.ds")> path;
      result   := <prettyprint-example; box2text-string(|80)> ast

  unstrict-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"unstrict.ds")> path;
      result   := <unstrict-rules; prettyprint-example; box2text-string(|80)> selected
