module ds

imports
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	include/ds
	lib/editor-common.generated
	lib/runtime-libraries/org.spoofax.meta.runtime.libraries/analysis/-
	lib/runtime-libraries/org.spoofax.meta.runtime.libraries/nabl/-
	lib/runtime-libraries/org.spoofax.meta.runtime.libraries/task/-
	lib/runtime-libraries/org.spoofax.meta.runtime.libraries/index/-
	lib/runtime-libraries/org.spoofax.meta.runtime.libraries/editor/properties
	coq-semantics/main
	pp
	names
	check
	generate-str
	refocus
	factorize
	explicate
	outline
	strict
	sugar
	types.generated
	types.manual
	generator/interpreter/gen-interpreter
	resolve-includes
	
signature
  constructors
    Var : LID -> Term
    Var : ID -> Term
    MatchedVar : ID -> Term

rules // Analysis
	
	editor-analyze = analysis-default-editor
	
	analysis-single-default-interface = 
		analysis-single-default(desugar-all, id, id|<language>)
	analysis-multiple-default-interface = 
		analysis-multiple-default(parse-file <+ !(), desugar-all, id, id|<language>, <project-path>)
	
	editor-save = 
	  where(generate-stratego; write-string-to-file); analysis-save-default(|<language>)

rules
  
  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
    ?(filename, string);
    if <dirname; readdir> filename then
      with(
        handle := <fopen> (filename, "w");
        <fputs> (string, handle);
        <fclose> handle;
        <refresh-workspace-file> filename
      )
    end
    
rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	 // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) ->
      <get-editor-properties(pp-ds-string |<language>, project-path);properties-to-html>target

  // Gathers the properties for the properties view.
  // editor-properties:
  //   (target, position, ast, path, project-path) ->
  //     <get-all-editor-properties(pp-ds-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast
  
  debug-show-desugared:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.aterm")> path;
      result   := <desugar-all> ast
			
	debug-show-index-current =
		analysis-debug-show-current-partition(|<language>)
		 
	debug-show-index-all =
		analysis-debug-show-all-partitions(|<language>)

	debug-show-tasks-selection =
		analysis-debug-show-tasks-selection(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)

  debug-reanalyze = analysis-debug-reanalyze(|<language>)
  
  debug-project = analysis-debug-project(|<language>)
  debug-partition = analysis-debug-partition(|<language>)
  
  debug-index-project = analysis-debug-index-project(|<language>)
  debug-index-partition = analysis-debug-index-partition(|<language>)
  
  debug-task-project = analysis-debug-task-project(|<language>)
  debug-task-partition = analysis-debug-task-partition(|<language>)
  debug-task-selection = analysis-debug-task-selection(|<language>)

rules // Builders
  
  // Transforms a selection to Stratego
  generate-stratego:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"generated.str")> path;
      result   := <explicate-module; to-stratego(|filename)> selected
      
  prettyprint-ID = ![S(<id>)]
  prettyprint-INFER = ![S(<id>)]
  prettyprint-STRING = ![S(<id>)]
  prettyprint-INT = ![S(<id>)]
   
  refocus-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"refocused.ds")> path;
      result   := <refocus-module; pp-debug> selected

  factorize-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"factorized.ds")> path;
      result   := <desugar-all; factorize-module; sugar-all; pp-debug> selected

  explicate-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explicated.ds")> path;
      result   := <resolve-includes; desugar-all; explicate-module; sugar-all; pp-debug> selected

  explicate-factorize-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explicated.factorized.ds")> path;
      result   := <resolve-includes; desugar-all; explicate-module; factorize-module; sugar-all; pp-debug> selected

  explicate-factorize-editor-ast:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explicated.factorized.aterm")> path;
      result   := <resolve-includes; desugar-all; explicate-module; factorize-module> selected

  explicate-editor-ast:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"explicated.aterm")> path;
      result   := <resolve-includes; desugar-all; explicate-module> selected

  // format rules
  format-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"pp.ds")> path;
      result   := <pp-debug> ast

  unstrict-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"unstrict.ds")> path;
      result   := <unstrict-rules; pp-debug> selected

rules // Builtins
	
	analysis-builtin-partitions = 
		![
			("base.ds", Module(
			  "base"
			, [ Signatures(
			      [ InternalSorts([InternalSortDecl("Term")])
			      , Sorts(
			          [ InjDecl("Int", "Term")
			          , InjDecl("Bool", "Term")
			          , InjDecl("String", "Term")
			          , InjDecl("Value", "Term")
			          ]
			        )
			      , InternalConstructors(
			          [ InternalConsDecl("True", [], SimpleSort("Bool"))
			          , InternalConsDecl("False", [], SimpleSort("Bool"))
			          ]
			        )
			      ]
			    )
			  ]
			)
		)
	]
