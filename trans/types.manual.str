module types.manual

imports
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/types/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/nabl/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/task/-
  include/ds
  names
  ds

signature
  constructors
    Any: Term

rules
 
  nabl-collect-rewrite(|lang, ctx, uri*, uri'*):
    Con(c, t*){anno*} -> Con(c, t'*){anno*}
    with
      c-def := <nabl-use-candidate(|lang, ctx, uri*, c)> UseCandidate(NablNsConstructor(), [], Current(), (), ());
      c-ty := <type-lookup(|ctx)> c-def;
      tys := <new-task(|ctx)> Rewrite("proj20", c-ty); task-create-id(|ctx, [c-ty]);
      ty := <new-task(|ctx)> Rewrite("proj21", c-ty); task-create-id(|ctx, [tys]);
      t'* := <map-with-index(attach-expected-type-to-term(|ctx, uri*, uri'*, tys))> t*
  
  nabl-collect-rewrite(|lang, ctx, uri*, uri'*):
    lt@ListTail([e], es){anno*} -> ListTail([e'], es'){anno*}
    with
      l-ty := <expected-type-task(|ctx)> lt;
      e-ty := <new-task(|ctx)> Rewrite("proj22", l-ty); task-create-id(|ctx, [l-ty]);
      e' := <attach-expected-type-to-term(|ctx, uri*, uri'*, [e-ty])> (1, e);
      es' := <attach-expected-type-to-term(|ctx, uri*, uri'*, [l-ty])> (1, es)
  
  nabl-collect-rewrite(|lang, ctx, uri*, uri'*):
    LabelComp(s-ref@SimpleSort(s), t){anno*} -> LabelComp(s-ref, t'){anno*}
    with
      s-def := <nabl-use-candidate(|lang, ctx, uri*, s)> UseCandidate(NablNsSort(), [], Current(), (), ());
      s-ty := <type-lookup(|ctx)> s-def;
      t' := <attach-expected-type-to-term(|ctx, uri*, uri'*, [s-ty])> (1, t)
  
  nabl-collect-rewrite(|lang, ctx, uri*, uri'*):
    Relation(reads, Source(s, ls){annos*}, NamedDynamicEmitted(arrow, e*){annoa*}, Target(t, ts){annot*}){anno*} -> Relation(reads, Source(s', ls){annos*}, NamedDynamicEmitted(arrow, e*){annoa*}, Target(t', ts){annot*}){anno*}
    with
      arrow-def := <nabl-use-candidate(|lang, ctx, uri*, arrow)> UseCandidate(NablNsArrow(), [], Current(), (), ());
      arrow-ty := <type-lookup(|ctx)> arrow-def;
      l-ty := <new-task(|ctx)> Rewrite("proj20", arrow-ty); task-create-id(|ctx, [arrow-ty]);
      r-ty := <new-task(|ctx)> Rewrite("proj21", arrow-ty); task-create-id(|ctx, [arrow-ty]);
      s' := <attach-expected-type-to-term(|ctx, uri*, uri'*, [l-ty])> (1, s);
      t' := <attach-expected-type-to-term(|ctx, uri*, uri'*, [r-ty])> (1, t)
  
  attach-expected-type-to-term(|ctx, old-uri*, new-uri*, tys):
    (i, term{a*}) -> term{(NablProp_expected-type(), term-ty), a*}
    with
      term-ty := <task-create-index(|ctx, i)> tys

  task-rewrite :
    ("proj21", (_, ty)) -> ty
  
  task-rewrite :
    ("proj20", (ty_, _)) -> ty_
  
  task-rewrite :
  	("proj22", ListSort(ty)) -> ty
  	
    
  // create-expected-type-task(|task*) = task-create-fail(|task*)
