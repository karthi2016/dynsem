module coq-semantics/main

imports
  libstratego-gpp
  coq-semantics/-
  lib/runtime/index/-
  lib/runtime/nabl/-
  lib/runtime/properties/-
  lib/runtime/task/-
  names
  lib/editor-common.generated
  include/ds

rules
  
  generate-coq:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      task-setup(|project-path)
    ; filename := <guarantee-extension(|"v")> path
    ; coq-file := <strip-annos; module-to-coq> ast
    with
       result := <parenthesize-Coq; prettyprint-CoqFile; box2text-string(|100)> coq-file
    <+ <bottomup(try(not(is-string) ; not(is-list) ; not(prettyprint-example) ; debug(!"cannot pp ")))> coq-file
    ;  result := ""

rules
  
  module-to-coq:
  	Module(name, rule*) -> Sent([IND_SEMANTICS(definition*)])
		where definition* := <filter(?Rules(<id>)); concat; filter(rule-to-coq)> rule*

rules
  
  rule-to-coq:
    RuleW(formula, prem*) -> DECL(name', <union> (p-bind*, f-bind*), type)
    where
      (prem'*, p-bind*, i) := <foldl(fold-prem)> (prem*, ([], [], 0))
    ; (t', f-bind*, _)     := <formula-to-coq(|i)> formula
    ; type                 := <foldl(fold-type)> (prem'*, t')
    ; name                 := <formula-to-name> formula
    ; name'                := $[[name]C_sem]
  
  rule-to-coq:
  	Rule(prem*,_,formula) -> <rule-to-coq> RuleW(formula, prem*)
  	
  rule-to-coq:
    Axiom(formula) -> <rule-to-coq> RuleW(formula, [])

rules // Fold rules
  
  fold-prem:
    (Formula(p), (p*, b*, i)) -> ([p' | p*], <union> (b*, b'*), i')
    where
      (p', b'*, i') := <formula-to-coq(|i)> p
  
  fold-type: // Composes parts of a type
    (x, y) -> Product(x, y)

overlays

  IND_SEMANTICS(terms) =
		Inductive(
      Ind(
        [ Induc(
            "semantics_cbn"
          , []
          , Type(
              Product(
                Ref("Env")
              , Product(Ref("term"), Product(Ref("value"), Sort(Prop())))
              )
            )
          , ListDeclBar(terms)
          )
        ]
      )
    )

  DECL(name, binds, type) =
		ConsDecl(
		  name
		, binds
		, Type(type)
    )
    
	CONS(hd, tl) = APPLY2(Ref("cons"), hd, tl)
	PAIR(a, b) = APPLY2(Ref("pair"), a, b)
	
	APPLY2(constr, fst, snd) =
	  Apply(
	    Apply(
	      constr
	    , fst
	    )
	  , snd
	  )