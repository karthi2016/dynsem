module Coq

signature
  constructors
                   : CoqFile -> Start
    Admitted       : Proof
    Assertion      : AssertionKeyword * Ident * List(Binder) * Term -> Assertion
    CoFixpoint     : List(CoFixBody) -> Fixpoint
    Fixpoint       : List(FixBody) -> Fixpoint
    Induc          : Ident * List(Binder) * Term * ConsDecls -> IndBody
    ListDecl       : List(ConsDecl) -> ConsDecls
    ListDeclBar    : List(ConsDecl) -> ConsDecls
    ConsDecl       : Ident * List(Binder) * OptType -> ConsDecl
    CoInd          : List(IndBody) -> Inductive
    Ind            : List(IndBody) -> Inductive
    Let            : Ident * List(Binder) * OptType * Term -> Definition
    Def            : Ident * List(Binder) * OptType * Term -> Definition
    Pars           : List(Ident) * Term -> AssumsPar
    Terms          : List(AssumsPar) -> Assums
    Term           : List(Ident) * Term -> Assums
    Assuption      : AssumptionKeyword * Assums -> Assumption
    AssertionProof : Assertion * Proof -> Sentence
    Fixpoint       : Fixpoint -> Sentence
    Inductive      : Inductive -> Sentence
    Definition     : Definition -> Sentence
    Assumption     : Assumption -> Sentence
    Sent           : List(Sentence) -> CoqFile
                   : List(Pattern) -> OrPattern
    OrPattern      : List(OrPattern) -> Pattern
                   : Num -> Pattern
    Wld            : Pattern
                   : QualId -> Pattern
    XPattern       : Pattern * Ident -> Pattern
    AsPattern      : Pattern * Ident -> Pattern
    QidPattern     : QualId * List(Pattern) -> Pattern
                   : List(Pattern) -> MultPattern
    Eq             : List(MultPattern) * Term -> Equation
    Return         : Term -> ReturnType
                   : ReturnType -> OptReturnType
    None           : OptReturnType
    DepRet         : OptAlias * ReturnType -> OptDepRetType
    None           : OptDepRetType
    In             : Term -> OptInTerm
    None           : OptInTerm
    As             : Name -> OptAlias
    None           : OptAlias
    MatchItem      : Term * OptAlias * OptInTerm -> MatchItem
    Anno           : Ident -> OptAnnotation
    None           : OptAnnotation
    CoFixBody      : Ident * List(Binder) * OptType * Term -> CoFixBody
    With           : CoFixBody * List(CoFixBody) * Ident -> CoFixBodies
                   : CoFixBody -> CoFixBodies
    FixBody        : Ident * List(Binder) * OptAnnotation * OptType * Term -> FixBody
    With           : FixBody * List(FixBody) * Ident -> FixBodies
                   : FixBody -> FixBodies
                   : String -> AssertionKeyword
                   : String -> AssumptionKeyword
    Type           : Sort
    Set            : Sort
    Prop           : Sort
    Wld            : Name
                   : Ident -> Name
    Assign         : Name * OptType * Term -> Binder
    Binds          : List(Name) * Term -> Binder
    Bind           : Name -> Binder
    Type           : Term -> OptType
    None           : OptType
    ListEqBar      : List(Equation) -> Equations
    ListEq         : List(Equation) -> Equations
    Num            : Num -> Term
    Sort           : Sort -> Term
    Ref            : QualId -> Term
    Eq             : Term * Term -> Term
    Apply          : Term * Term -> Term
    Product        : Term * Term -> Term
    Coerce         : Term -> Term
    Check          : Term * Term -> Term
    Cast           : Term * Term -> Term
    Match          : List(MatchItem) * OptReturnType * Equations -> Term
    A              : Term * Ident -> Term
    Z              : QualId * List(Term) -> Term
    If             : Term * OptDepRetType * Term * Term -> Term
    X              : List(Name) * OptDepRetType * Term * Term -> Term
    LetCoFix       : CoFixBody * Term -> Term
    LetFix         : FixBody * Term -> Term
    Let            : Ident * List(Binder) * OptType * Term * Term -> Term
    CoFix          : CoFixBodies -> Term
    Fix            : FixBodies -> Term
    Fun            : List(Binder) * Term -> Term
    ForAll         : List(Binder) * Term -> Term
    QId            : QualId * String -> QualId
                   : String -> QualId
    QId            : QualId * Ident -> QualId
                   : Ident -> QualId
                   : String -> Num
                   : String -> Ident


signature
  constructors
    Some : a -> Option(a)
    None : Option(a)


signature
  constructors
    Cons : a * List(a) -> List(a)
    Nil  : List(a)
    Conc : List(a) * List(a) -> List(a)
