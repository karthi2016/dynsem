module include/Coq-parenthesize

imports
  libstratego-lib
  coq-semantics/Coq


strategies
  io-Coq-parenthesize =
    io-wrap(parenthesize-Coq)

  parenthesize-Coq =
    innermost(CoqParenthesize)


rules

  CoqParenthesize :
    Apply(t_0, t_1) -> Apply(Parenthetical(t_0), t_1)
    where <(?Coerce(_)
            + ?Cast(_, _)
            + ?Check(_, _)
            + ?Product(_, _)
            + fail)> t_0

  CoqParenthesize :
    Apply(t_0, t_1) -> Apply(t_0, Parenthetical(t_1))
    where <(?Coerce(_)
            + ?Cast(_, _)
            + ?Check(_, _)
            + ?Product(_, _)
            + ?Apply(_, _)
            + fail)> t_1

  CoqParenthesize :
    Product(t_0, t_1) -> Product(Parenthetical(t_0), t_1)
    where <(?Coerce(_)
            + ?Cast(_, _)
            + ?Check(_, _)
            + ?Product(_, _)
            + fail)> t_0

  CoqParenthesize :
    Product(t_0, t_1) -> Product(t_0, Parenthetical(t_1))
    where <(?Coerce(_)
            + ?Cast(_, _)
            + ?Check(_, _)
            + fail)> t_1

  CoqParenthesize :
    Coerce(t_0) -> Coerce(Parenthetical(t_0))
    where <(?Coerce(_)
            + ?Cast(_, _)
            + ?Check(_, _)
            + fail)> t_0

  CoqParenthesize :
    Check(t_0, t_1) -> Check(Parenthetical(t_0), t_1)
    where <(?Check(_, _)
            + ?Coerce(_)
            + ?Cast(_, _)
            + fail)> t_0

  CoqParenthesize :
    Check(t_0, t_1) -> Check(t_0, Parenthetical(t_1))
    where <(?Check(_, _)
            + ?Coerce(_)
            + ?Cast(_, _)
            + fail)> t_1

  CoqParenthesize :
    Cast(t_0, t_1) -> Cast(Parenthetical(t_0), t_1)
    where <(?Cast(_, _)
            + ?Coerce(_)
            + ?Check(_, _)
            + fail)> t_0

  CoqParenthesize :
    Cast(t_0, t_1) -> Cast(t_0, Parenthetical(t_1))
    where <(?Cast(_, _)
            + ?Coerce(_)
            + ?Check(_, _)
            + fail)> t_1


signature
  constructors
    Parenthetical : Unknown -> Unknown

