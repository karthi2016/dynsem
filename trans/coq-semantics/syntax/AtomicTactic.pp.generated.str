module AtomicTactic.pp.generated
imports
  trans/coq-semantics/syntax/-
  libstratego-gpp
  lib/runtime/tmpl/pp

strategies
  prettyprintCoq-Reserved =
    ![S(<is-string>)]

  prettyprintCoq-example =
    prettyprintCoq-Reserved


strategies
  prettyprintCoq-AtomicTactic :
    AtomicTactic(a, b) -> [ H(
                              [SOpt(HS(), "0")]
                            , [a135, b68]
                            )
                          ]
    where a135 := <pp-one-Z(prettyprintCoq-OptNumPrefix)> a
    where b68 := <pp-one-Z(prettyprintCoq-ATactic)> b

  prettyprintCoq-OptNumPrefix :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptNumPrefix :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a136, S(" : ")]
           )
         ]
    where a136 := <pp-one-Z(prettyprintCoq-Num)> a

  prettyprintCoq-example =
    prettyprintCoq-AtomicTactic

  prettyprintCoq-example =
    prettyprintCoq-OptNumPrefix


strategies
  prettyprintCoq-ATactic :
    Intros() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("intros")]
                  )
                ]

  prettyprintCoq-ATactic :
    Auto() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("auto")]
                )
              ]

  prettyprintCoq-ATactic :
    EAuto() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("eauto")]
                 )
               ]

  prettyprintCoq-ATactic :
    Assumption() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("assumption")]
                      )
                    ]

  prettyprintCoq-ATactic :
    Inversion(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("inversion "), a137]
                      )
                    ]
    where a137 := <pp-one-Z(prettyprintCoq-QualId)> a

  prettyprintCoq-ATactic :
    Subst() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("subst")]
                 )
               ]

  prettyprintCoq-ATactic :
    Induction(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("induction "), a138]
                      )
                    ]
    where a138 := <pp-one-Z(prettyprintCoq-QualId)> a

  prettyprintCoq-ATactic :
    Destruct(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("destruct "), a139]
                     )
                   ]
    where a139 := <pp-one-Z(prettyprintCoq-QualId)> a

  prettyprintCoq-ATactic :
    Left() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("left")]
                )
              ]

  prettyprintCoq-ATactic :
    Right() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("right")]
                 )
               ]

  prettyprintCoq-ATactic :
    Reflexivity() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("reflexivity")]
                       )
                     ]

  prettyprintCoq-ATactic :
    Discriminate() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("discriminate")]
                        )
                      ]

  prettyprintCoq-example =
    prettyprintCoq-ATactic