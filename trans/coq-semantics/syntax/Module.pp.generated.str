module Module.pp.generated
imports
  trans/coq-semantics/syntax/-
  libstratego-gpp
  lib/runtime/tmpl/pp

strategies
  prettyprintCoq-Reserved =
    ![S(<is-string>)]

  prettyprintCoq-example =
    prettyprintCoq-Reserved


strategies
  prettyprintCoq-Module :
    InteractiveModule(a, b, c, d, e, f) -> [ H(
                                               [SOpt(HS(), "0")]
                                             , [ S("Module ")
                                               , a101
                                               , b48
                                               , c18
                                               , d11
                                               , S(".")
                                               ]
                                             )
                                           , e7
                                           , H(
                                               [SOpt(HS(), "0")]
                                             , [S("End "), f1, S(".")]
                                             )
                                           ]
    where a101 := <pp-one-Z(prettyprintCoq-OptModuleBindingKeywordPrefix)> a
    where b48 := <pp-one-Z(prettyprintCoq-Ident)> b
    where c18 := <pp-one-Z(prettyprintCoq-OptModuleBindings)> c
    where d11 := <pp-one-Z(prettyprintCoq-OptModuleTypes)> d
    where e7 := <pp-indent(|"2")> [<pp-V-list(prettyprintCoq-ModContent|"1")> e]
    where f1 := <pp-one-Z(prettyprintCoq-Ident)> f

  prettyprintCoq-example =
    prettyprintCoq-Module


strategies
  prettyprintCoq-ModuleBindingKeyword :
    Import() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("Import")]
                  )
                ]

  prettyprintCoq-ModuleBindingKeyword :
    Export() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("Export")]
                  )
                ]

  prettyprintCoq-OptModuleBindingKeywordPrefix :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptModuleBindingKeywordPrefix :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a102, S(" ")]
           )
         ]
    where a102 := <pp-one-Z(prettyprintCoq-ModuleBindingKeyword)> a

  prettyprintCoq-example =
    prettyprintCoq-ModuleBindingKeyword

  prettyprintCoq-example =
    prettyprintCoq-OptModuleBindingKeywordPrefix


strategies
  prettyprintCoq-ModuleType :
    QualifiedModule(a) -> [ H(
                              [SOpt(HS(), "0")]
                            , [a103]
                            )
                          ]
    where a103 := <pp-one-Z(prettyprintCoq-QualId)> a

  prettyprintCoq-ModuleType :
    ModuleWithDefinition(a, b, c) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [ a104
                                         , S(" with Definition ")
                                         , b49
                                         , S(" := ")
                                         , c19
                                         ]
                                       )
                                     ]
    where a104 := <pp-one-Z(prettyprintCoq-ModuleType)> a
    where b49 := <pp-one-Z(prettyprintCoq-QualId)> b
    where c19 := <pp-one-Z(prettyprintCoq-Term)> c

  prettyprintCoq-ModuleType :
    ModuleWithModule(a, b, c) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [ a105
                                     , S(" with Module ")
                                     , b50
                                     , S(" := ")
                                     , c20
                                     ]
                                   )
                                 ]
    where a105 := <pp-one-Z(prettyprintCoq-ModuleType)> a
    where b50 := <pp-one-Z(prettyprintCoq-QualId)> b
    where c20 := <pp-one-Z(prettyprintCoq-QualId)> c

  prettyprintCoq-ModuleType :
    QualifiedModuleSeq(a, b) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [a106, S(" "), b51]
                                  )
                                ]
    where a106 := <pp-one-Z(prettyprintCoq-QualId)> a
    where b51 := <pp-H-list(prettyprintCoq-QualId)> b

  prettyprintCoq-ModuleType :
    QualifiedModuleBangSeq(a, b) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [ S("!")
                                        , a107
                                        , S(" ")
                                        , b52
                                        ]
                                      )
                                    ]
    where a107 := <pp-one-Z(prettyprintCoq-QualId)> a
    where b52 := <pp-H-list(prettyprintCoq-QualId)> b

  prettyprintCoq-ModuleType :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a108, S(")")]
                          )
                        ]
    where a108 := <pp-one-Z(prettyprintCoq-ModuleType)> a

  prettyprintCoq-OptModuleTypes :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptModuleTypes :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [S(" : "), a109]
           )
         ]
    where a109 := <pp-one-Z(prettyprintCoq-ModuleType)> a

  prettyprintCoq-OptModuleTypes :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [S(" <: "), a110]
           )
         ]
    where a110 := <pp-H-list(prettyprintCoq-ModuleType|" <:")> a

  prettyprintCoq-example =
    prettyprintCoq-ModuleType

  prettyprintCoq-example =
    prettyprintCoq-OptModuleTypes


strategies
  prettyprintCoq-ModuleBinding :
    ModuleBinding(a, b, c) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ S("(")
                                  , a111
                                  , b53
                                  , S(" ")
                                  , c21
                                  , S(")")
                                  ]
                                )
                              ]
    where a111 := <pp-one-Z(prettyprintCoq-OptModuleBindingKeywordPrefix)> a
    where b53 := <pp-H-list(prettyprintCoq-Ident)> b
    where c21 := <pp-one-Z(prettyprintCoq-ModuleType)> c

  prettyprintCoq-OptModuleBindings :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptModuleBindings :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [S(" "), a112]
           )
         ]
    where a112 := <pp-H-list(prettyprintCoq-ModuleBinding|" ")> a

  prettyprintCoq-example =
    prettyprintCoq-ModuleBinding

  prettyprintCoq-example =
    prettyprintCoq-OptModuleBindings


strategies
  prettyprintCoq-ModContent :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a113]
           )
         ]
    where a113 := <pp-one-Z(prettyprintCoq-Sentence)> a

  prettyprintCoq-ModContent :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a114]
           )
         ]
    where a114 := <pp-one-Z(prettyprintCoq-Module)> a

  prettyprintCoq-ModContent :
    Include(a) -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("Include "), a115]
                    )
                  ]
    where a115 := <pp-H-list(prettyprintCoq-Ident|" <+")> a

  prettyprintCoq-example =
    prettyprintCoq-ModContent


strategies
  prettyprintCoq-Module :
    ModuleDef(a, b, c, d) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ S("Module ")
                                 , a116
                                 , b54
                                 , c22
                                 , S(" := ")
                                 , d12
                                 , S(".")
                                 ]
                               )
                             ]
    where a116 := <pp-one-Z(prettyprintCoq-Ident)> a
    where b54 := <pp-one-Z(prettyprintCoq-OptModuleBindings)> b
    where c22 := <pp-one-Z(prettyprintCoq-OptModuleTypes)> c
    where d12 := <pp-one-Z(prettyprintCoq-ModuleExpression)> d

  prettyprintCoq-Module :
    ModuleDefs(a, b, c) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("Module ")
                               , a117
                               , b55
                               , S(" := ")
                               , c23
                               ]
                             )
                           ]
    where a117 := <pp-one-Z(prettyprintCoq-Ident)> a
    where b55 := <pp-one-Z(prettyprintCoq-OptModuleBindings)> b
    where c23 := <pp-H-list(prettyprintCoq-ModuleExpression|"<+")> c

  prettyprintCoq-example =
    prettyprintCoq-Module


strategies
  prettyprintCoq-ModuleExpression :
    ModuleExpression(a) -> [ H(
                               [SOpt(HS(), "0")]
                             , [a118]
                             )
                           ]
    where a118 := <pp-H-list(prettyprintCoq-QualId)> a

  prettyprintCoq-ModuleExpression :
    ModuleBangExpression(a) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("!"), a119]
                                 )
                               ]
    where a119 := <pp-H-list(prettyprintCoq-QualId)> a

  prettyprintCoq-example =
    prettyprintCoq-ModuleExpression


strategies
  prettyprintCoq-Module :
    ModuleType(a, b, c, d) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ S("Module Type ")
                                  , a120
                                  , b56
                                  , S(".")
                                  ]
                                )
                              , c24
                              , H(
                                  [SOpt(HS(), "0")]
                                , [S("End "), d13, S(".")]
                                )
                              ]
    where a120 := <pp-one-Z(prettyprintCoq-Ident)> a
    where b56 := <pp-one-Z(prettyprintCoq-OptModuleBindings)> b
    where c24 := <pp-indent(|"2")> [<pp-H-list(prettyprintCoq-ModTypeContent)> c]
    where d13 := <pp-one-Z(prettyprintCoq-Ident)> d

  prettyprintCoq-example =
    prettyprintCoq-Module


strategies
  prettyprintCoq-ModTypeContent :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a121]
           )
         ]
    where a121 := <pp-one-Z(prettyprintCoq-ModContent)> a

  prettyprintCoq-ModTypeContent :
    InlineAssumption(a, b) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [a122, S(" Inline "), b57]
                                )
                              ]
    where a122 := <pp-one-Z(prettyprintCoq-AssumptionKeyword)> a
    where b57 := <pp-one-Z(prettyprintCoq-Assums)> b

  prettyprintCoq-example =
    prettyprintCoq-ModTypeContent


strategies
  prettyprintCoq-Module :
    ModuleTypeDef(a, b, c) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ S("Module Type ")
                                  , a123
                                  , b58
                                  , S(" := ")
                                  , c25
                                  ]
                                )
                              ]
    where a123 := <pp-one-Z(prettyprintCoq-Ident)> a
    where b58 := <pp-one-Z(prettyprintCoq-OptModuleBindings)> b
    where c25 := <pp-H-list(prettyprintCoq-ModuleType|" <+")> c

  prettyprintCoq-example =
    prettyprintCoq-Module


strategies
  prettyprintCoq-Sentence :
    Import(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a124
                        , S("Import ")
                        , b59
                        , S(".")
                        ]
                      )
                    ]
    where a124 := <pp-one-Z(prettyprintCoq-OptRequirePrefix)> a
    where b59 := <pp-one-Z(prettyprintCoq-QualId)> b

  prettyprintCoq-Sentence :
    Export(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a125
                        , S("Export ")
                        , b60
                        , S(".")
                        ]
                      )
                    ]
    where a125 := <pp-one-Z(prettyprintCoq-OptRequirePrefix)> a
    where b60 := <pp-one-Z(prettyprintCoq-QualId)> b

  prettyprintCoq-example =
    prettyprintCoq-Sentence


strategies
  prettyprintCoq-OptRequirePrefix :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptRequirePrefix :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("Require ")]
            )
          ]

  prettyprintCoq-example =
    prettyprintCoq-OptRequirePrefix