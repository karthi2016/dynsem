module Expr.pp.generated
imports
  trans/coq-semantics/syntax/-
  libstratego-gpp
  lib/runtime/tmpl/pp

strategies
  prettyprintCoq-TExpr :
    ExprSeq(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a140, S("; "), b69]
                       )
                     ]
    where a140 := <pp-one-Z(prettyprintCoq-TExpr)> a
    where b69 := <pp-one-Z(prettyprintCoq-TExpr)> b

  prettyprintCoq-TExpr :
    ExprSeqAlts(a, b) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ a141
                             , S("; [")
                             , b70
                             , S("]")
                             ]
                           )
                         ]
    where a141 := <pp-one-Z(prettyprintCoq-TExpr)> a
    where b70 := <pp-H-list(prettyprintCoq-TExpr|" | ")> b

  prettyprintCoq-TExpr :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a142]
           )
         ]
    where a142 := <pp-one-Z(prettyprintCoq-TacExpr3)> a

  prettyprintCoq-example =
    prettyprintCoq-TExpr


strategies
  prettyprintCoq-TacExpr3 :
    DoTac(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [ S("do")
                       , a143
                       , S(" ")
                       , b71
                       ]
                     )
                   ]
    where a143 := <pp-one-Z(prettyprintCoq-OptTime)> a
    where b71 := <pp-one-Z(prettyprintCoq-TacExpr3)> b

  prettyprintCoq-TacExpr3 :
    Progress(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("progress "), a144]
                     )
                   ]
    where a144 := <pp-one-Z(prettyprintCoq-TacExpr3)> a

  prettyprintCoq-TacExpr3 :
    Repeat(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("repeat "), a145]
                   )
                 ]
    where a145 := <pp-one-Z(prettyprintCoq-TacExpr3)> a

  prettyprintCoq-TacExpr3 :
    Try(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("try "), a146]
                )
              ]
    where a146 := <pp-one-Z(prettyprintCoq-TacExpr3)> a

  prettyprintCoq-TacExpr3 :
    Timeout(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ S("timeout")
                         , a147
                         , S(" ")
                         , b72
                         ]
                       )
                     ]
    where a147 := <pp-one-Z(prettyprintCoq-OptTime)> a
    where b72 := <pp-one-Z(prettyprintCoq-TacExpr3)> b

  prettyprintCoq-TacExpr3 :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a148]
           )
         ]
    where a148 := <pp-one-Z(prettyprintCoq-TacExpr2)> a

  prettyprintCoq-example =
    prettyprintCoq-TacExpr3


strategies
  prettyprintCoq-OptTime :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptTime :
    Natural(a) -> [ H(
                      [SOpt(HS(), "0")]
                    , [a149, S(" ")]
                    )
                  ]
    where a149 := <pp-one-Z(prettyprintCoq-Num)> a

  prettyprintCoq-OptTime :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a150, S(" ")]
           )
         ]
    where a150 := <pp-one-Z(prettyprintCoq-Ident)> a

  prettyprintCoq-example =
    prettyprintCoq-OptTime


strategies
  prettyprintCoq-TacExpr2 :
    Alts(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [a151, S(" || "), b73]
                    )
                  ]
    where a151 := <pp-one-Z(prettyprintCoq-TacExpr1)> a
    where b73 := <pp-one-Z(prettyprintCoq-TacExpr3)> b

  prettyprintCoq-TacExpr2 :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a152]
           )
         ]
    where a152 := <pp-one-Z(prettyprintCoq-TacExpr1)> a

  prettyprintCoq-example =
    prettyprintCoq-TacExpr2


strategies
  prettyprintCoq-TacExpr1 :
    Fun(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [ S("fun ")
                     , a153
                     , S(" => ")
                     , b74
                     ]
                   )
                 ]
    where a153 := <pp-H-list(prettyprintCoq-Ident)> a
    where b74 := <pp-one-Z(prettyprintCoq-TAtom)> b

  prettyprintCoq-TacExpr1 :
    LetTac(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("let")
                           , a154
                           , S(" ")
                           , b75
                           , S(" in ")
                           , c32
                           ]
                         )
                       ]
    where a154 := <pp-one-Z(prettyprintCoq-OptRec)> a
    where b75 := <pp-H-list(prettyprintCoq-LetClause|" with")> b
    where c32 := <pp-one-Z(prettyprintCoq-TAtom)> c

  prettyprintCoq-TacExpr1 :
    MatchGoal(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("match goal with "), a155, S(" end")]
                      )
                    ]
    where a155 := <pp-H-list(prettyprintCoq-ContextRule|" |")> a

  prettyprintCoq-TacExpr1 :
    MatchRevGoal(a) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("match reverse goal with "), a156, S(" end")]
                         )
                       ]
    where a156 := <pp-H-list(prettyprintCoq-ContextRule|" |")> a

  prettyprintCoq-TacExpr1 :
    MatchExpr(a, b) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("match ")
                           , a157
                           , S(" with ")
                           , b76
                           , S(" end")
                           ]
                         )
                       ]
    where a157 := <pp-one-Z(prettyprintCoq-TExpr)> a
    where b76 := <pp-H-list(prettyprintCoq-MatchRule|" |")> b

  prettyprintCoq-TacExpr1 :
    LMatchGoal(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("lazymatch goal with "), a158, S(" end")]
                       )
                     ]
    where a158 := <pp-H-list(prettyprintCoq-ContextRule|" |")> a

  prettyprintCoq-TacExpr1 :
    LMatchRevGoal(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("lazymatch reverse goal with "), a159, S(" end")]
                          )
                        ]
    where a159 := <pp-H-list(prettyprintCoq-ContextRule|" |")> a

  prettyprintCoq-TacExpr1 :
    LMatchExpr(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ S("lazymatch ")
                            , a160
                            , S(" with ")
                            , b77
                            , S(" end")
                            ]
                          )
                        ]
    where a160 := <pp-one-Z(prettyprintCoq-TExpr)> a
    where b77 := <pp-H-list(prettyprintCoq-MatchRule|" |")> b

  prettyprintCoq-TacExpr1 :
    Abstract(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("abstract "), a161]
                     )
                   ]
    where a161 := <pp-one-Z(prettyprintCoq-TAtom)> a

  prettyprintCoq-TacExpr1 :
    AbstractUsing(a, b) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("abstract ")
                               , a162
                               , S(" using ")
                               , b78
                               ]
                             )
                           ]
    where a162 := <pp-one-Z(prettyprintCoq-TAtom)> a
    where b78 := <pp-one-Z(prettyprintCoq-Ident)> b

  prettyprintCoq-TacExpr1 :
    First(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("first [ "), a163, S(" ]")]
                  )
                ]
    where a163 := <pp-H-list(prettyprintCoq-TExpr|" |")> a

  prettyprintCoq-TacExpr1 :
    Solve(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("solve [ "), a164, S(" ]")]
                  )
                ]
    where a164 := <pp-H-list(prettyprintCoq-TExpr|" |")> a

  prettyprintCoq-TacExpr1 :
    IdTac(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("idtac "), a165]
                  )
                ]
    where a165 := <pp-H-list(prettyprintCoq-MsgToken)> a

  prettyprintCoq-TacExpr1 :
    Fail(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("fail"), a166, b79]
                    )
                  ]
    where a166 := <pp-one-Z(prettyprintCoq-OptNatural)> a
    where b79 := <pp-one-Z(prettyprintCoq-OptMsgTokens)> b

  prettyprintCoq-TacExpr1 :
    Fresh(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("fresh"), a167]
                  )
                ]
    where a167 := <pp-one-Z(prettyprintCoq-OptString)> a

  prettyprintCoq-TacExpr1 :
    Context(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("context "), a168, b80]
                       )
                     ]
    where a168 := <pp-one-Z(prettyprintCoq-Ident)> a
    where b80 := <pp-one-Z(prettyprintCoq-OptTerm)> b

  prettyprintCoq-TacExpr1 :
    Eval(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("eval ")
                      , a169
                      , S(" in ")
                      , b81
                      ]
                    )
                  ]
    where a169 := <pp-one-Z(prettyprintCoq-RedExpr)> a
    where b81 := <pp-one-Z(prettyprintCoq-Term)> b

  prettyprintCoq-TacExpr1 :
    TypeOf(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("type of "), a170]
                   )
                 ]
    where a170 := <pp-one-Z(prettyprintCoq-Term)> a

  prettyprintCoq-TacExpr1 :
    External(a, b, c) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ S("external ")
                             , a171
                             , S(" ")
                             , b82
                             , S(" ")
                             , c33
                             ]
                           )
                         ]
    where a171 := <pp-one-Z(prettyprintCoq-String)> a
    where b82 := <pp-one-Z(prettyprintCoq-String)> b
    where c33 := <pp-H-list(prettyprintCoq-TacArg)> c

  prettyprintCoq-TacExpr1 :
    ConstrTerm(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("constr : "), a172]
                       )
                     ]
    where a172 := <pp-one-Z(prettyprintCoq-Term)> a

  prettyprintCoq-TacExpr1 :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a173]
           )
         ]
    where a173 := <pp-one-Z(prettyprintCoq-AtomicTactic)> a

  prettyprintCoq-TacExpr1 :
    QualTactic(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a174, S(" "), b83]
                          )
                        ]
    where a174 := <pp-one-Z(prettyprintCoq-QualId)> a
    where b83 := <pp-H-list(prettyprintCoq-TacArg)> b

  prettyprintCoq-TacExpr1 :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a175]
           )
         ]
    where a175 := <pp-one-Z(prettyprintCoq-TAtom)> a

  prettyprintCoq-TacExpr1 :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a176, S(")")]
                          )
                        ]
    where a176 := <pp-one-Z(prettyprintCoq-TExpr)> a

  prettyprintCoq-example =
    prettyprintCoq-TacExpr1


strategies
  prettyprintCoq-OptRec :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptRec :
    Rec() -> [ H(
                 [SOpt(HS(), "0")]
               , [S(" rec")]
               )
             ]

  prettyprintCoq-OptMsgTokens :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptMsgTokens :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [S(" "), a177]
           )
         ]
    where a177 := <pp-H-list(prettyprintCoq-MsgToken)> a

  prettyprintCoq-OptNatural :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptNatural :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a178]
           )
         ]
    where a178 := <pp-one-Z(prettyprintCoq-Num)> a

  prettyprintCoq-OptString :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptString :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a179]
           )
         ]
    where a179 := <pp-one-Z(prettyprintCoq-Num)> a

  prettyprintCoq-OptTerm :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptTerm :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a180]
           )
         ]
    where a180 := <pp-one-Z(prettyprintCoq-Term)> a

  prettyprintCoq-example =
    prettyprintCoq-OptRec

  prettyprintCoq-example =
    prettyprintCoq-OptMsgTokens

  prettyprintCoq-example =
    prettyprintCoq-OptNatural

  prettyprintCoq-example =
    prettyprintCoq-OptString

  prettyprintCoq-example =
    prettyprintCoq-OptTerm


strategies
  prettyprintCoq-TAtom :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a181]
           )
         ]
    where a181 := <pp-one-Z(prettyprintCoq-QualId)> a

  prettyprintCoq-TAtom :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a182]
           )
         ]
    where a182 := <pp-one-Z(prettyprintCoq-Num)> a

  prettyprintCoq-TAtom :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("(TExpr)")]
            )
          ]

  prettyprintCoq-TAtom :
    Unit() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("()")]
                )
              ]

  prettyprintCoq-example =
    prettyprintCoq-TAtom


strategies
  prettyprintCoq-MsgToken :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a183]
           )
         ]
    where a183 := <pp-one-Z(prettyprintCoq-String)> a

  prettyprintCoq-MsgToken :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a184]
           )
         ]
    where a184 := <pp-one-Z(prettyprintCoq-Ident)> a

  prettyprintCoq-MsgToken :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a185]
           )
         ]
    where a185 := <pp-one-Z(prettyprintCoq-Num)> a

  prettyprintCoq-example =
    prettyprintCoq-MsgToken


strategies
  prettyprintCoq-TacArg :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a186]
           )
         ]
    where a186 := <pp-one-Z(prettyprintCoq-QualId)> a

  prettyprintCoq-TacArg :
    Unit() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("()")]
                )
              ]

  prettyprintCoq-TacArg :
    AtomArg(a) -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("ltac : "), a187]
                    )
                  ]
    where a187 := <pp-one-Z(prettyprintCoq-TAtom)> a

  prettyprintCoq-TacArg :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a188]
           )
         ]
    where a188 := <pp-one-Z(prettyprintCoq-Term)> a

  prettyprintCoq-example =
    prettyprintCoq-TacArg


strategies
  prettyprintCoq-LetClause :
    LetClause(a, b, c) -> [ H(
                              [SOpt(HS(), "0")]
                            , [a189, b84, S(" := "), c34]
                            )
                          ]
    where a189 := <pp-one-Z(prettyprintCoq-Ident)> a
    where b84 := <pp-one-Z(prettyprintCoq-OptNames)> b
    where c34 := <pp-one-Z(prettyprintCoq-TExpr)> c

  prettyprintCoq-OptNames :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptNames :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [S(" "), a190]
           )
         ]
    where a190 := <pp-H-list(prettyprintCoq-Name)> a

  prettyprintCoq-example =
    prettyprintCoq-LetClause

  prettyprintCoq-example =
    prettyprintCoq-OptNames


strategies
  prettyprintCoq-ContextRule :
    PatContext(a, b, c) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ a191
                               , S("|- ")
                               , b85
                               , S(" => ")
                               , c35
                               ]
                             )
                           ]
    where a191 := <pp-one-Z(prettyprintCoq-OptContextHyps)> a
    where b85 := <pp-one-Z(prettyprintCoq-Pattern)> b
    where c35 := <pp-one-Z(prettyprintCoq-TExpr)> c

  prettyprintCoq-ContextRule :
    WldContext(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("_ => "), a192]
                       )
                     ]
    where a192 := <pp-one-Z(prettyprintCoq-TExpr)> a

  prettyprintCoq-OptContextHyps :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptContextHyps :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a193, S(" ")]
           )
         ]
    where a193 := <pp-H-list(prettyprintCoq-ContextHyp|", ")> a

  prettyprintCoq-example =
    prettyprintCoq-ContextRule

  prettyprintCoq-example =
    prettyprintCoq-OptContextHyps


strategies
  prettyprintCoq-ContextHyp :
    ContextHyp(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a194, S(" : "), b86]
                          )
                        ]
    where a194 := <pp-one-Z(prettyprintCoq-Name)> a
    where b86 := <pp-one-Z(prettyprintCoq-Pattern)> b

  prettyprintCoq-ContextHyp :
    ContextHypAssign(a, b, c) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [a195, S(" := "), b87, c36]
                                   )
                                 ]
    where a195 := <pp-one-Z(prettyprintCoq-Name)> a
    where b87 := <pp-one-Z(prettyprintCoq-Pattern)> b
    where c36 := <pp-one-Z(prettyprintCoq-OptCPattern)> c

  prettyprintCoq-OptCPattern :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptCPattern :
    OptCPattern(a) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S(" : "), a196]
                        )
                      ]
    where a196 := <pp-one-Z(prettyprintCoq-Pattern)> a

  prettyprintCoq-example =
    prettyprintCoq-ContextHyp

  prettyprintCoq-example =
    prettyprintCoq-OptCPattern


strategies
  prettyprintCoq-MatchRule :
    MatchPattern(a, b) -> [ H(
                              [SOpt(HS(), "0")]
                            , [a197, S(" => "), b88]
                            )
                          ]
    where a197 := <pp-one-Z(prettyprintCoq-Pattern)> a
    where b88 := <pp-one-Z(prettyprintCoq-TExpr)> b

  prettyprintCoq-MatchRule :
    MatchContext(a, b, c) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ S("context")
                                 , a198
                                 , b89
                                 , S(" => ")
                                 , c37
                                 ]
                               )
                             ]
    where a198 := <pp-one-Z(prettyprintCoq-OptIdent)> a
    where b89 := <pp-one-Z(prettyprintCoq-OptPattern)> b
    where c37 := <pp-one-Z(prettyprintCoq-TExpr)> c

  prettyprintCoq-MatchRule :
    MatchAppContext(a, b, c) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("appcontext")
                                    , a199
                                    , b90
                                    , S(" => ")
                                    , c38
                                    ]
                                  )
                                ]
    where a199 := <pp-one-Z(prettyprintCoq-OptIdent)> a
    where b90 := <pp-one-Z(prettyprintCoq-OptPattern)> b
    where c38 := <pp-one-Z(prettyprintCoq-TExpr)> c

  prettyprintCoq-MatchRule :
    MatchWld(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("_ => "), a200]
                     )
                   ]
    where a200 := <pp-one-Z(prettyprintCoq-TExpr)> a

  prettyprintCoq-OptIdent :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptIdent :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [S(" "), a201]
           )
         ]
    where a201 := <pp-one-Z(prettyprintCoq-Ident)> a

  prettyprintCoq-OptPattern :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  prettyprintCoq-OptPattern :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [S(" "), a202]
           )
         ]
    where a202 := <pp-one-Z(prettyprintCoq-Pattern)> a

  prettyprintCoq-example =
    prettyprintCoq-MatchRule

  prettyprintCoq-example =
    prettyprintCoq-OptIdent

  prettyprintCoq-example =
    prettyprintCoq-OptPattern


strategies
  prettyprintCoq-RedExpr :
    RedRed() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("red")]
                  )
                ]

  prettyprintCoq-RedExpr :
    RedHnf() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("hnf")]
                  )
                ]

  prettyprintCoq-RedExpr :
    RedCompute() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("compute")]
                      )
                    ]

  prettyprintCoq-RedExpr :
    RedSimpl() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("simpl")]
                    )
                  ]

  prettyprintCoq-RedExpr :
    RedCbv() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("cbv")]
                  )
                ]

  prettyprintCoq-RedExpr :
    RedLazy() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("lazy")]
                   )
                 ]

  prettyprintCoq-RedExpr :
    RedUnfold() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("unfold")]
                     )
                   ]

  prettyprintCoq-RedExpr :
    RedFold() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("fold")]
                   )
                 ]

  prettyprintCoq-RedExpr :
    RedPattern() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("pattern")]
                      )
                    ]

  prettyprintCoq-example =
    prettyprintCoq-RedExpr