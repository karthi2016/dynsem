module pcf-semantics

rules // binding

  E env |- Var(x) --> v 
  where env[x] = T(e, env'),
        E env' |- e --> v
  
  E env |- Fun(Param(x, t), e) --> C(x, e, env)
  
  E env |- Fix(Param(x, t), e) --> v
  where 
    E {x |--> T(Fix(Param(x,t),e),env), env} |- e --> v
  
  E env |- App(e1, e2) --> v
  where E env |- e1 --> C(x, e, env'),
        E {x |--> T(e2, env), env'} |- e --> v
        
  E env |- Let(x, t, e1, e2) --> v
  where E {x |--> T(e1, env), env} |- e2 --> v

rules // arithmetic
  
  Num(i) --> I(i)
      
  Ifz(e1, e2, e3) --> v
  where e1 --> I(i), i = 0, e2 --> v
  
  Ifz(e1, e2, e3) --> v
  where e1 --> I(i), i != 0, e3 --> v
    
  Add(e1, e2) --> I(addInt(i, j))
  where e1 --> I(i), e2 --> I(j)
  
  Sub(e1, e2) --> I(subInt(i, j))
  where e1 --> I(i), e2 --> I(j)
  
  Mul(e1, e2) --> I(mulInt(i, j))
  where e1 --> I(i), e2 --> I(j)
 
signature
  sorts
    term   {native}
    int    {native}
    string {native}
    value  {native, value}
    E      {native}
  
  constructors
    C : string * Exp * E -> value // closure
    I : int -> value              // integer
    T : term * E -> value         // thunk
    
    addInt : int * int -> int { native }
    subInt : int * int -> int { native }
    mulInt : int * int -> int { native }
    
signature // PCF
  sorts
    Exp
    Type
    Param
    Start
    Exp -> Start
    
  constructors
  
    Ifz     : Exp * Exp * Exp -> Exp
    FunType : Type * Type -> Type
    IntType : -> Type
    Param   : string * Type -> Param
    Div     : Exp * Exp -> Exp
    Mul     : Exp * Exp -> Exp
    Sub     : Exp * Exp -> Exp
    Add     : Exp * Exp -> Exp
    Num     : int -> Exp
    Let     : string * Type * Exp * Exp -> Exp
    App     : Exp * Exp -> Exp
    Fix     : Param * Exp -> Exp
    Fun     : Param * Exp -> Exp
    Var     : string -> Exp